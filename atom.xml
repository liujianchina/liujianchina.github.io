<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>树先生的金融风控工程师博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.sofunnyai.com/"/>
  <updated>2020-05-26T05:06:31.825Z</updated>
  <id>https://blog.sofunnyai.com/</id>
  
  <author>
    <name>树先生</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>风控策略相关的一切</title>
    <link href="https://blog.sofunnyai.com/article/strategy.html"/>
    <id>https://blog.sofunnyai.com/article/strategy.html</id>
    <published>2020-04-15T06:37:22.000Z</published>
    <updated>2020-05-26T05:06:31.825Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#feng-kong-ce-lue-gai-yao">风控策略概要</a><ul><li><a href="#shi-me-shi-feng-kong-shen-pi-ce-lue">什么是风控审批策略</a><ul><li><a href="#qi-zhong-duo-wei-du-shu-ju-de-ce-lue-gui-ze-bao-gua">其中多维度数据的<strong>策略规则</strong>包括：</a></li></ul></li><li><a href="#feng-kong-shen-pi-ce-lue-de-mu-de">风控审批策略的目的</a><ul><li><a href="#feng-kong-shen-pi-ce-lue-de-zuo-yong">风控审批策略的作用</a></li><li><a href="#feng-kong-shen-pi-ce-lue-de-lei-bie">风控审批策略的类别</a></li><li><a href="#feng-kong-de-ji-ben-liang-hua-zhi-biao">风控的基本量化指标</a></li><li><a href="#que-ding-mu-biao-bian-liang">确定目标变量</a></li><li><a href="#zhi-ding-feng-kong-shen-pi-ce-lue">制定风控审批策略</a></li><li><a href="#ce-lue-yu-gu">策略预估</a></li><li><a href="#ce-lue-jian-kong">策略监控</a></li><li><a href="#ce-lue-hui-gu">策略回顾</a></li></ul></li></ul></li><li><a href="#feng-kong-ce-lue-fen-xi-shi">风控策略分析师</a><ul><li><a href="#ri-chang-gong-zuo-nei-rong">日常工作内容</a></li><li><a href="#bi-bei-ji-neng">必备技能</a></li><li><a href="#he-xin-zuo-yong">核心作用</a></li><li><a href="#ce-lue-fen-xi-chang-jian-gong-zuo-chang-jing-yu-dui-ying-fen-xi-fang-fa">策略分析常见工作场景与对应分析方法</a></li><li><a href="#san-fang-shu-ju-ce-ping">三方数据测评</a><ul><li><a href="#ju-li-hei-ming-dan-shu-ju-ping-ce">举例—黑名单数据评测</a></li></ul></li><li><a href="#zhun-ru-ce-lue-de-zhi-ding">准入策略的制定</a><ul><li><a href="#nian-ling-zhun-ru-ce-lue"><strong>年龄准入策略</strong></a></li><li><a href="#di-qu-zhun-ru-ce-lue"><strong>地区准入策略</strong></a></li><li><a href="#bai-ming-dan-ce-lue">白名单策略</a></li><li><a href="#hei-ming-dan-ce-lue">黑名单策略</a></li></ul></li></ul></li><li><a href="#gui-ze-yu-zhi-cutoff-ru-he-she-ding"><strong>规则阈值cutoff如何设定</strong></a><ul><li><a href="#bei-jing">背景</a></li><li><a href="#di-yi-bu-tong-guo-ping-fen-zhao-dao-feng-xian-bei-di-gu-de-qu-jian"><em>第一步：通过评分找到风险被低估的区间</em></a></li><li><a href="#di-er-bu-ping-gu-ni-ju-jue-ren-qun-de-shou-yi-feng-xian-bi"><em>第二步，评估拟拒绝人群的收益/风险比</em></a></li></ul></li><li><a href="#tong-guo-lu-xia-jiang-de-ce-lue-diao-zheng">通过率下降的策略调整</a><ul><li><a href="#1-xun-zhao-tong-guo-lu-xia-jiang-de-shi-jian-dian-huo-shi-jian-duan">1.寻找通过率下降的时间点或时间段</a></li><li><a href="#2-pan-duan-ce-lue-jie-dian-zhu-ci-yao-ju-jue-ying-xiang">2.判断策略节点主次要拒绝影响</a></li><li><a href="#3-cong-jie-dian-ju-jiao-dao-jie-dian-gui-ze-ceng-shen-du-fen-xi"><em>3.从节点聚焦到节点规则层深度分析</em></a></li><li><a href="#4-ju-ti-gui-ze-fen-bu-fen-xi"><em>4.具体规则分布分析</em></a></li><li><a href="#5-fen-xi-zhi-dao-jue-ce"><em>5.分析指导决策</em></a></li></ul></li><li><a href="#yu-qi-lu-shang-sheng-de-ce-lue-diao-zheng">逾期率上升的策略调整</a><ul><li><a href="#di-yi-bu-que-ding-cun-liang-huan-shi-xin-zeng-ke-hu-dao-zhi-yu-qi-shang-sheng"><strong>第一步：确定存量还是新增客户导致逾期上升</strong></a></li><li><a href="#di-er-bu-duo-wei-du-fen-xi-zhao-chu-zui-zhu-yao-ying-xiang-gui-ze"><strong>第二步：多维度分析，找出最主要影响规则</strong></a></li><li><a href="#di-san-bu-zhi-ding-ce-lue-diao-zheng-fang-an"><strong>第三步：制定策略调整方案</strong></a></li></ul></li><li><a href="#xin-yong-duo-tou-ce-lue">信用多头策略</a><ul><li><a href="#1-shi-me-shi-duo-tou-jie-dai"><strong>1.什么是多头借贷</strong></a></li><li><a href="#2-duo-tou-jie-dai-shu-ju-de-fen-xi-fang-fa"><strong>2.多头借贷数据的分析方法</strong></a></li><li><a href="#3-duo-tou-jie-dai-shu-ju-wei-he-shao-yong-yu-mo-xing"><strong>3.多头借贷数据为何少用于模型</strong></a></li><li><a href="#4-duo-tou-jie-dai-shu-ju-zai-ce-lue-gui-ze-shang-de-ying-yong"><strong>4.多头借贷数据在策略规则上的应用</strong></a></li></ul></li><li><a href="#ping-fen-de-ce-lue-ying-yong">评分的策略应用</a><ul><li><a href="#ping-fen-qia-mo-xing-de-yun-yong-zhu-yao-shi-wei-liao-jie-jue-liang-da-wen-ti">评分卡模型的运用，主要是为了解决两大问题：</a></li></ul><ul><li><a href="#ping-fen-mo-xing-de-cutoff">评分模型的cutoff</a></li></ul></li><li><a href="#mo-xing-yu-ce-lue-de-guan-xi">模型与策略的关系</a><ul><li><a href="#mo-xing-shi-fou-ke-yi-ti-dai-suo-you-de-ce-lue-gui-ze">模型是否可以替代所有的策略规则?</a><ul><li><a href="#ce-lue-gui-ze-ping-fen-mo-xing">策略规则+评分模型</a></li><li><a href="#ce-lue-gui-ze-mo-xing-gui-ze">策略规则+模型规则</a></li><li><a href="#ce-lue-gui-ze-de-cu-fang-shi-guan-li"><strong>策略规则的粗放式管理</strong></a></li></ul></li><li><a href="#ping-fen-mo-xing-de-chang-jian-san-chong-mang-qu"><strong>评分模型的常见三种盲区</strong></a><ul><li><a href="#jian-mo-shu-ju-ji-yu-shi-ji-dai-kuan-ren-zhi-jian-cun-zai-pian-chai"><strong>建模数据集与实际贷款人之间存在偏差</strong></a></li><li><a href="#mo-xing-shu-ju-ji-lai-zi-li-shi-yu-wei-lai-shi-ji-qing-kuang-cun-zai-pian-chai"><strong>模型数据集来自历史，与未来实际情况存在偏差</strong></a></li><li><a href="#mo-xing-dui-yu-mu-biao-bian-liang-de-jie-ding-yu-shi-ji-shang-ye-mu-biao-cun-zai-pian-chai"><strong>模型对于目标变量的界定与实际商业目标存在偏差</strong></a></li></ul></li></ul></li></ul><!-- tocstop --></div><blockquote><p>精简摘录自微信公众号：金科应用研院</p></blockquote><h1><span id="feng-kong-ce-lue-gai-yao"> 风控策略概要</span><a href="#feng-kong-ce-lue-gai-yao" class="header-anchor">#</a></h1><h2><span id="shi-me-shi-feng-kong-shen-pi-ce-lue"> 什么是风控审批策略</span><a href="#shi-me-shi-feng-kong-shen-pi-ce-lue" class="header-anchor">#</a></h2><p>基于数据分析在申请阶段制定各式各样多维度的<strong>策略和规则</strong>;</p><h3><span id="qi-zhong-duo-wei-du-shu-ju-de-ce-lue-gui-ze-bao-gua"> 其中多维度数据的<strong>策略规则</strong>包括：</span><a href="#qi-zhong-duo-wei-du-shu-ju-de-ce-lue-gui-ze-bao-gua" class="header-anchor">#</a></h3><ol><li>社交及短信维度规则</li><li>移动设备维度规则</li><li>外部数据源（如：征信报告、各种黑名单来源）规则</li><li>多维度评分卡规则</li><li>行为数据(设备信息、注册时间、登陆时间)规则</li></ol><h2><span id="feng-kong-shen-pi-ce-lue-de-mu-de"> 风控审批策略的目的</span><a href="#feng-kong-shen-pi-ce-lue-de-mu-de" class="header-anchor">#</a></h2><p>在贷前审批减少风险事件的发生的各种可能性，挽回风险事件时造成的损失。较大的程度上筛选过滤高风险客户，保留低风险客户予以营销。针对客群分级实行个性化的审批流程，提高审批效率。</p><h3><span id="feng-kong-shen-pi-ce-lue-de-zuo-yong"> 风控审批策略的作用</span><a href="#feng-kong-shen-pi-ce-lue-de-zuo-yong" class="header-anchor">#</a></h3><p>在保证业务量的同时降低业务坏账率、控制逾期风险，最终实现公司盈利。</p><h3><span id="feng-kong-shen-pi-ce-lue-de-lei-bie"> 风控审批策略的类别</span><a href="#feng-kong-shen-pi-ce-lue-de-lei-bie" class="header-anchor">#</a></h3><p>多维度数据分析呈现了借款人的用户画像，制定多维度完善的审批策略规则，具体策略规则包含：</p><ul><li>1）经济能力维度(月收入、工资流水等信息)</li><li>2）app信息维度(贷款APP安装个数、短信命中高风险关键词)</li><li>3）基本信息维度(年龄、性别、工龄等信息)</li><li>4）信用历史(征信贷款信息、还款记录)</li><li>5）行为表现(活动轨迹、登陆时间、注册时间等信息)</li></ul><h3><span id="feng-kong-de-ji-ben-liang-hua-zhi-biao"> 风控的基本量化指标</span><a href="#feng-kong-de-ji-ben-liang-hua-zhi-biao" class="header-anchor">#</a></h3><ul><li><p>FPDx：首期逾期，x对应天数</p></li><li><p>CPDx：当前逾期，x对应天数</p></li></ul><p>逾期时间的长短来定义逾期的等级，C代表正常资产。M3-M6属于不良，M6+属于坏账。</p><p>迁移率、vintage账龄分析、滚动率见<a href="./vintage_rollrate_fpd.html">上一篇博客</a>，这里：<a href="https://blog.sofunnyai.com/article/vintage_rollrate_fpd.html">https://blog.sofunnyai.com/article/vintage_rollrate_fpd.html</a></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525145244445.png" alt="image-20200525145244445"></p><h3><span id="que-ding-mu-biao-bian-liang"> 确定目标变量</span><a href="#que-ding-mu-biao-bian-liang" class="header-anchor">#</a></h3><p>根据催回率及迁徙率确定好坏客户（不过一般还是用滚动率比较多）</p><p>由上表可以看出，M2以上的迁徙率将近90%，所以确定当前逾期31天以上为区分好坏客户的标准，及后续分析的目标变量。</p><h3><span id="zhi-ding-feng-kong-shen-pi-ce-lue"> 制定风控审批策略</span><a href="#zhi-ding-feng-kong-shen-pi-ce-lue" class="header-anchor">#</a></h3><p>如以城市等级为例，城市等级与逾期的关系：城市等级越低，其对应的逾期率越高。</p><h3><span id="ce-lue-yu-gu"> 策略预估</span><a href="#ce-lue-yu-gu" class="header-anchor">#</a></h3><p>预估策略上线对生产运营阶段的影响，基于进件量、放款量、通过率的影响。</p><h3><span id="ce-lue-jian-kong"> 策略监控</span><a href="#ce-lue-jian-kong" class="header-anchor">#</a></h3><p>策略上线后，监控此策略的占比与预计的占比是否发生严重偏差，且在正常运行阶段是否全部执行。</p><h3><span id="ce-lue-hui-gu"> 策略回顾</span><a href="#ce-lue-hui-gu" class="header-anchor">#</a></h3><p>对上线后的策略，在一定时间后。对于有表现的数据进行策略回顾，看策略调整后的进件量、通过率及贷后表现。若是想及时的查看策略上线后的贷后表现可以针对FPD指标分不同的天数去观测，FPD4，FPD10，FPD30等。</p><ul><li><p>若策略是调宽或者是放松时，可以针对性回顾下豁免出来的客户的进件情况、通过率及贷后表现。</p></li><li><p>若策略是调严或者收紧时，可以针对性回顾拒绝阈值边缘维度的贷后表现及拟定拒绝的客户数。</p></li></ul><h1><span id="feng-kong-ce-lue-fen-xi-shi"> 风控策略分析师</span><a href="#feng-kong-ce-lue-fen-xi-shi" class="header-anchor">#</a></h1><p>风控策略分析师是完成上述P1部分所有分析，构架风控策略的人员。</p><h2><span id="ri-chang-gong-zuo-nei-rong"> 日常工作内容</span><a href="#ri-chang-gong-zuo-nei-rong" class="header-anchor">#</a></h2><ul><li>贷前、贷中及贷后各环节的风险策略与流程，制订各项策略规则，具体包括<strong>准入、授信、定价、用信、还款、调额等信贷流程</strong>各阶段的<strong>策略规则</strong></li><li>通过对各类风险指标与报表的分析，关注各类资产和客群的风险变动，对公司全渠道风险政策与策略进行跟踪评价，并及时优化调整相应的风险政策与策略</li></ul><h2><span id="bi-bei-ji-neng"> 必备技能</span><a href="#bi-bei-ji-neng" class="header-anchor">#</a></h2><ul><li>结合内外数据，通过统计分析方法，对不同风险点制定出不同类型的风险规则</li><li>完成整个贷前、贷中和贷后的<strong>风险规则架构</strong>，实现<strong>自动化风控</strong></li><li>可以实现策略规则优化，不限于A、D类调优方法</li><li>规则的部署与监控预警</li><li>临时指标调整的项目经验</li></ul><h2><span id="he-xin-zuo-yong"> 核心作用</span><a href="#he-xin-zuo-yong" class="header-anchor">#</a></h2><p>实现具体规则和流程的设计、开发、部署、监控与优化</p><h2><span id="ce-lue-fen-xi-chang-jian-gong-zuo-chang-jing-yu-dui-ying-fen-xi-fang-fa"> 策略分析常见工作场景与对应分析方法</span><a href="#ce-lue-fen-xi-chang-jian-gong-zuo-chang-jing-yu-dui-ying-fen-xi-fang-fa" class="header-anchor">#</a></h2><h2><span id="san-fang-shu-ju-ce-ping"> 三方数据测评</span><a href="#san-fang-shu-ju-ce-ping" class="header-anchor">#</a></h2><ul><li>案例：现有1000个样本数据，分别测试2家黑名单，2家欺诈名单与2家多头，如何选择合适的第三方数据源？</li></ul><p>首先要专业科普选择第三方数据源重要考察的5大指标计算公式（以黑名单为例）：</p><ol><li>查得率(Search rate)=查得数/样本量</li><li>覆盖率(Cover rate)=查得命中黑名单数/样本中命中黑名单量</li><li>误拒率(Error reject rate)=查得命中黑名单数/样本中通过且为Good量</li><li>有效差异率(Effective difference rate)=查得命中黑名单数/样本中通过且Bad量</li><li>无效差异率(Invalid difference rate)=查得命中黑名单数/样本中其他拒绝量</li></ol><p>其中SR、CR、EDR指标越高越好，ERR越低越好，IDR与EDR结合起来观察，如果IDR和EDR都较高，反应的一种情况是数据源定义黑名单是广撒网式，黑名单质量相对不够精准。</p><p>其中前三个指标是重点考察，如果想更全面的测试第三方数据源，后面两个差异率指标也可以加入考核标准。</p><h3><span id="ju-li-hei-ming-dan-shu-ju-ping-ce"> 举例—黑名单数据评测</span><a href="#ju-li-hei-ming-dan-shu-ju-ping-ce" class="header-anchor">#</a></h3><p>1000个测试样本数据中，审批结果字段表示样本通过和拒绝，其中通过样本中有未逾期和发生逾期的客户样本，拒绝样本中有通过黑名单库拒绝客户，也有其他原因产生拒绝。比如，数据源1（黑名单）代表一家提供黑名单数据的数据供应商A，数据源2（黑名单）代表另一家提供黑名单数据的数据供应商B，以此类推。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525150653791.png" alt="image-20200525150653791"></p><p>对1000条测试数据返回结果进行整理可以总结出如上数据概要，对比看到数据源1的返回结果如下：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525150737830.png" alt="image-20200525150737830"></p><p>按照文章开始介绍的指标分析方法，对比数据源1和数据源2的测试结果可以得出如下结论：</p><ol><li>数据供应商1的查得率、覆盖率高于数据供应商2大约5%、4%；</li><li>数据供应商1的误拒率低于数据供应商2大约0.3%；</li><li>数据供应商1的有效差异率低于数据供应商2大约8%，无效差异率低于数据供应商2大约7%；</li></ol><p>依据五大指标分析标准，SR、CR、EDR指标越高越好，ERR越低越好，IDR与EDR结合起来观察，如果IDR和EDR都较高，反应的一种情况是数据源定义黑名单是广撒网式，黑名单质量相对不够精准！</p><p>最终分析结论：</p><p>数据供应商2虽然覆盖的黑名单比数据供应商1的更广，但其不如数据供应商1精准，更偏向选择数据供应商1的黑名单数据。</p><h2><span id="zhun-ru-ce-lue-de-zhi-ding"> 准入策略的制定</span><a href="#zhun-ru-ce-lue-de-zhi-ding" class="header-anchor">#</a></h2><p>风控准入策略作为金融借贷机构评估一个借款人是否有机会获得授信的第一道门槛，是保卫金融机构的第一道护卫。</p><p>风控准入策略属于贷前风控策略体系的一部分，贷前风控策略包括<strong>基础认证、准入策略，贷前反欺诈策略，黑名单策略，特殊名单策略及信用风险策略</strong>。风控准入策略中的规则更多是由产品政策性规则构成。</p><p>针对不同信贷场景采取更适应业务的准入规则，设定科学的准入策略，对于风险的防范与降维有十分重要意义。合理的风险准入策略，也能对信贷业务的走向与风险倾向产生直接影响，进一步影响金融机构的最终盈亏。</p><p><strong>为什么要设计风控准入策略</strong></p><p>风控准入策略的规则属性全部为强拒绝规则（硬规则），借款人<strong>一旦不满足一条准入规则金融贷款机构都不会给予贷款的授信与发放</strong>；同时，风控准入规则不需要经过复杂的规则衍生，通常可以简单有效的判决借款人是否有资格进入之后的风控流程；最后，风控准入规则的策略理念是验证借款人依法合规未被政策限制。</p><p><strong>风控准入策略模块</strong></p><p>风控基础认证模块:</p><p>基础认证模块主要作用是验证借款此人是本人，也是以风控规则形式出现，规则大多为公允共认的规则。比如身份证信息验证，人脸信息验证、银行卡四要素验证、运营商三要素验证等。</p><p>在验证完借款人基础信息后，风控贷前流程才会进入准入策略模块。</p><p>准入策略模块主要分为<strong>年龄准入、地区准入、行业准入及其他</strong>。这些准入规则的根本设定原则是基于监管和金融机构产品政策性导向。</p><h3><span id="nian-ling-zhun-ru-ce-lue"> <strong>年龄准入策略</strong></span><a href="#nian-ling-zhun-ru-ce-lue" class="header-anchor">#</a></h3><p>对于年龄准入而言，中国银行业监督管理委员会令《个人贷款管理暂行办法》中指出个人贷款申请应具备以下条件：</p><p>（一）借款人为具有完全民事行为能力的中华人民共和国公民或符合国家有关规定的境外自然人；</p><p>（二）贷款用途明确合法；</p><p>（三）贷款申请数额、期限和币种合理；</p><p>（四）借款人具备还款意愿和还款能力；</p><p>（五）借款人信用状况良好，无重大不良信用记录；</p><p>（六）贷款人要求的其他条件。</p><p>其中借款人具有完全民事行为能力的中华人民共和国公民年龄范围在<strong>18-60岁</strong>。所以合规的金融机构信贷产品的借款人年龄准入策略中，年龄规则的设定是：年龄&gt;X &amp;  年龄&lt;X ，X属于18-60。有些贷款产品，则是根据贷款人的性别不同来限制年龄的。比如对于女性申请人的年龄限制是22周岁以上，而男性申请人的年龄限制为20周岁。</p><h3><span id="di-qu-zhun-ru-ce-lue"> <strong>地区准入策略</strong></span><a href="#di-qu-zhun-ru-ce-lue" class="header-anchor">#</a></h3><p>一般金融机构会按照风险热力地图将一些重灾风险区进行隔离或者进行“象征性”政策贷款发放。</p><p>地区准入规则的初始设定一般是风险集中度比较高、社会稳定性比较弱、地区经济GDP比较低，亦或是难催收的地区，比如<strong>新疆、东北</strong>等个别地域。</p><p>在之后随着信贷业务的开展，也会根据贷款回收率对地区准入规则进行一些策略调整，比如一些地区的贷款回收率长期观测较低，金融机构企业内部信贷战略调整后，可以将这些地区加入限制性地区里。</p><p>上图事例1中展示的是M1阶段的回收率热力分布地图，可以发现灰色区域的M1贷款回收率低于60%。如果需要进行地区准入策略的调整，还可以将M1回收率0-60%的区间划分的更细，比如0-15%的M1回收率，也可以将省维度拆成市级维度进行限制。</p><p>此处需要提醒，<strong>一旦加入到地区准入规则后的地域在之后将无法进行信贷业务，同时也会失去观测业务数据</strong>，所以此类的策略调整<strong>要谨慎设计</strong>。</p><p>地区准入策略的常用规则如<strong>户籍地址</strong> in（x,x,x），<strong>单位地址</strong> in （x,x,x）,<strong>家庭地址</strong> in （x,x,x）等。</p><p><strong>行业准入策略</strong></p><p>行业准入策略的基础原则是对一些行业工作不稳定或无业的借款人禁止提供信贷业务。如禁止：</p><p>金融属性行业如投资、担保、理财、典当；政策性敏感娱乐行业如KTV、按摩院、会所等；无业和自由职业、学生、媒体工作者，检察院。</p><h3><span id="bai-ming-dan-ce-lue"> 白名单策略</span><a href="#bai-ming-dan-ce-lue" class="header-anchor">#</a></h3><p>白名以下两种业务场景：</p><p>A.在存在自有存量数据的前提下，金融机构想开展信贷业务，前期需要通过白名单控制入口，此类场景多存在于<strong>业务初期，或者是内部员工贷</strong>的业务场景。(风控模型不完善的条件下，先把业务开展起来。同时，在这个展业的过程中，可以逐渐组建适合金融机构业务的风控策略和模型。)</p><p>B.在业务开展中期，需要<strong>部分进件客户走特殊贷前审批流程</strong>，满足特殊审批的要求，此类场景多存在于较大的金融公司。(有着较好的信用、较好的资产亦或是较好的“背景”，通过一些特殊审批流程进行贷款的审核，最终满足“VIP”的借贷需求。)</p><p>综合来讲，白名单可以定义为，通过金融机构内部现有数据判断的“好客户”，或者经过一系列规则挖掘分析得出的“好客户”，由他们组成的借贷优质名单。</p><p><strong>如何筛选出白名单</strong></p><ul><li><p>联合建模：<br>金融机构在有<strong>存量数据的前提下，自有数据是不缺乏X特征变量，主要缺乏相应业务场景有表现特征的目标Y变量。<strong>在这个时候可以通过引进一些外部机构进行</strong>联合建模，用以补充一些Y变量。</strong></p><p>通过与外部机构<strong>联合建模得出评分，不论是将其用于内部客户分层，还是将评分分数直接做规则</strong>，都对筛选白名单有很好的帮助。</p></li><li><p>内部数据探索：</p><p>我们在筛选白名单的时候，除了通过联合建模弥补相应业务场景下目标变量的缺失，还可以通过内部数据探索，寻找分析一些对逾期违约表现相关性较强的一些特征规则，逐渐设定出白名单规则。这里面分为两种规则设定方式。</p><p>第一种是寻找与新开展业务相似模式和场景的已有产品，参照已有产品的风控策略规则对新业务场景数据进行比对分析，参照已有产品的策略规则制定出新业务场景的风控白名单规则。</p><p>另外一种方式是在更“艰苦”的环境下，没有任何可对比参照的已有产品，这个时候设定的白名单规则相对更严谨，同时对风控策略工作者的业务经验要求更高，可以认为是一种专家经验规则。</p></li><li><p>引入外部数据匹配：</p></li></ul><p>工作单位、学历、社保缴费单位、公积金缴费单位、缴费基数等信息去筛选优质客户。</p><p><strong>白名单的作用：</strong></p><ul><li>控制放量节奏：初期的时候用于控制节奏，整体调控。</li><li>降低风险</li><li>提高过审率</li><li>协助调整贷前策略：白名单筛选的过程就是贷前策略的一部分。</li></ul><h3><span id="hei-ming-dan-ce-lue"> 黑名单策略</span><a href="#hei-ming-dan-ce-lue" class="header-anchor">#</a></h3><p>黑名单：性质极其恶劣的坏客户。无论是其还款能力，还款意愿，借款目的等都不能满足正常客户的标准。</p><p>有自建和外部引用两种。对于业务初期的金融机构通常调用三方数据接口查询行内黑名单客户，同时在自家展业过程中，通过贷后管理逐渐补充、完善自家黑名单库。</p><h4><span id="hei-ming-dan-de-shi-yong"> 黑名单的使用：</span><a href="#hei-ming-dan-de-shi-yong" class="header-anchor">#</a></h4><ul><li>一般来说金融机构一旦触碰到黑名单规则，金融机构通常会全部拒绝。（全部拒绝黑名单前，会随机放过5%或者10%的触碰黑名单的客户，去测试黑名单数据有“多黑”，测试该黑名单客群是否适用于该机构。）</li><li>导流助贷机构可能会选择性放入一部分客群，结合客户评分，多头等数据综合判断，或者随机放过。（反正不是他兜底）</li></ul><h4><span id="chang-kou-ce-suan"> 敞口测算</span><a href="#chang-kou-ce-suan" class="header-anchor">#</a></h4><p>假设一个场景：如果有一万块钱，借款一年，不考虑其他，综合年化36%的信贷产品，因为一个黑名单客户导致本金全部损失，那么实际上需要大约3个好客户才能弥补1个坏客户的损失。</p><p>如果我们加上资金的运营成本，人力成本，引流成本，实际成本等。 假设需要的综合年化是15%，那么实际上 ，也就是5个好客户才能覆盖一个坏客户的本金损失，同时还需要覆盖上述的各种成本 ，也就是说金融机构大约要用6个完全的好人才能替代一个完整的坏人。</p><p>如果是3期、6期产品，同时也包含资金占有率问题，实际上需要的用更多的好人去覆盖坏客户带来的损失。</p><ul><li>假设5000  6期  36%，每个好人收益是5000×0.36/2 = 900，不算其他成本也需要5.5个人才能cover一个欺诈。（此时坏账率：1/6.5=15.4%）</li><li>实际同上假设人力、引流、IT，使得实际年华15%，每个好人收益是5000×0.15/2 = 375，需要13.3人才能cover。（坏账率1/14.3=6.99%）</li><li>PS：助贷导流客户平均成本一般不会超过5毛钱，金融机构开展信贷业务所需风控数据成本也不会超过10元。</li></ul><p>所以黑名单很重要，坏账很难搞。。。</p><h4><span id="zi-jian-hei-ming-dan"> 自建黑名单</span><a href="#zi-jian-hei-ming-dan" class="header-anchor">#</a></h4><p>黑名单一般的自建维度有<strong>参照回款表现、渠道、利率、各种公布失信类客户</strong>以及通过爬虫获得的一系列坏客户，黑名单的设定不一定仅限客户本身，也可以拓展为<strong>身份证、手机号、邮箱、银行卡、ip地址</strong>等，都可作为自建黑名单的参考维度。</p><p>和通讯记录、电话簿、二度通讯记录等联系起来。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200526130546511.png" alt="image-20200526130546511"></p><p>自建黑名单命中率通常不会太高（相同客户再次注册的概率较低），且自建黑名单库需要长期的业务积累过程，因此金融信贷机构常常需要借助三方金融科技公司的黑名单库服务（特指三方数据供应商商以及其他金融信贷机构）。</p><p>大量p2p以及小贷机构接入百行征信，但我想要说明的是：滞后性和成本的增加使得黑名单需要更多的共享，只有共享才能更全面了解我们金融机构所接触的客群。</p><h1><span id="gui-ze-yu-zhi-cutoff-ru-he-she-ding"> <strong>规则阈值cutoff如何设定</strong></span><a href="#gui-ze-yu-zhi-cutoff-ru-he-she-ding" class="header-anchor">#</a></h1><p>风险策略拒绝线的设定，背后有严谨的分析逻辑，本文就以评分分数区间和年龄规则为例，为大家讲解审批策略拒绝线的内在分析方法。</p><h2><span id="bei-jing"> 背景</span><a href="#bei-jing" class="header-anchor">#</a></h2><p>评分模型，尤其是主流基于线性Logistic算法的评分模型，<strong>对于一些边际评分区间的风险，其实常常无法精准的预估到，势必会造成一些区间风险被低估的现象。如果不通过一些规则维度的拒绝补充，容易因为模型风险发生不必要的利益损失。</strong></p><p>假设我们已经对评分模型分数分为T1-T5组，T1风险最低T5风险最大。年龄规则也使用单变量树模型初步分为5组区间。我们希望结合评分分数找到年龄规则这个核心策略维度的合理拒绝线。</p><h2><span id="di-yi-bu-tong-guo-ping-fen-zhao-dao-feng-xian-bei-di-gu-de-qu-jian"> <em>第一步：通过评分找到风险被低估的区间</em></span><a href="#di-yi-bu-tong-guo-ping-fen-zhao-dao-feng-xian-bei-di-gu-de-qu-jian" class="header-anchor">#</a></h2><p>本例中，首先将年龄与评分卡进行交叉矩阵分析，观测不同交叉区间里的用户违约概率。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525160850020.png" alt="image-20200525160850020"></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525160913346.png" alt="image-20200525160913346"></p><p>一般策略规则多数组之间的趋势线是紧密相近的。从图示数据走线可以发现，年龄组[35,47)和[47,53)这两个年龄组的违约概率走线脱离了其他分组，尤其是年龄组[35,47)，其走线脱离其他“群体”过多。通过分析初步定位年龄组[35,47)和[47,53)可以是待确定的规则拒绝线。</p><h2><span id="di-er-bu-ping-gu-ni-ju-jue-ren-qun-de-shou-yi-feng-xian-bi"> <em>第二步，评估拟拒绝人群的收益/风险比</em></span><a href="#di-er-bu-ping-gu-ni-ju-jue-ren-qun-de-shou-yi-feng-xian-bi" class="header-anchor">#</a></h2><p>虽然经过评分与年龄的交叉对比，发现年龄规则的两个待确定高风险拒绝区间。但是实际拒绝线的划分要结合年龄分组区间人群的实际收益与风险进一步考虑。<strong>如果高风险的人群可以带来高收益，对于策略来讲也是可以接受的。</strong></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525161216545.png" alt="image-20200525161216545"></p><p>将年龄分组区间按照上图示例2横轴所示指标进行统计，假设年龄分组[35,47)的收益/风险大于[47,53)且为正，即表明虽然[35,47)年龄分组的人群违约率最高，但其收益同样也是最大。反而[47,53)年龄区间的人群为公司带来负收益。</p><p>本着收益覆盖风险的商业理念，此时对于年龄这一维度的策略最佳拒绝线，应该划分在[47,53)这一分组区间。</p><h1><span id="tong-guo-lu-xia-jiang-de-ce-lue-diao-zheng"> 通过率下降的策略调整</span><a href="#tong-guo-lu-xia-jiang-de-ce-lue-diao-zheng" class="header-anchor">#</a></h1><p><strong>审批通过率</strong>和<strong>不良率</strong>是一对<strong>权衡指标</strong>，在新业务<strong>上线初期，维持一个较低的通过率可以保证最好的客群进去。<strong>随着业务规模</strong>做大和风控样本积累，此时需要在风险容忍度可接受范围内提升通过率，以保持收益的最大化。</strong></p><p>如果某一天风控通过率忽然降低，这种情况下策略分析人员应该如何应对？</p><h2><span id="1-xun-zhao-tong-guo-lu-xia-jiang-de-shi-jian-dian-huo-shi-jian-duan"> 1.寻找通过率下降的时间点或时间段</span><a href="#1-xun-zhao-tong-guo-lu-xia-jiang-de-shi-jian-dian-huo-shi-jian-duan" class="header-anchor">#</a></h2><p>在风控策略稳定之后，审批通过率一般稳定在某一小范围内波动，当监控每日通过率指标时发现，T-1、T-2时点的通过率明显下降，我们应该先通过监控报表迅速定位到具体时间点或时间段。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525161544954.png" alt="image-20200525161544954"></p><p>2019.6.23和6.24授信通过率下降。</p><p>Tip：上图示例通过率下降到6.9%、7.0%可以直接用肉眼分辨数据，但实际业务一般建议以通过率趋势图和PSI指标监控通过率下降。</p><h2><span id="2-pan-duan-ce-lue-jie-dian-zhu-ci-yao-ju-jue-ying-xiang"> 2.判断策略节点主次要拒绝影响</span><a href="#2-pan-duan-ce-lue-jie-dian-zhu-ci-yao-ju-jue-ying-xiang" class="header-anchor">#</a></h2><p>发现通过率下降的时间点或时间段之后，下一步先聚焦到策略节点。本文为FALers举例两个策略节点A（准入）和B（规则）。以6月23日为时间节点划分，对比数据分析，寻找拒绝率的波动差。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525162143545.png" alt="image-20200525162143545"></p><p>上图示例2中波动差按照B段A节点拒绝率-A段A节点拒绝率计算出来，以此类推。此时计算波动差仍然可以考虑加入PSI=(B-A)*LN(B/A)测算波动差,A节点的PSI为0.77%，B节点的PSI为0.01%。</p><p>按照波动差确定通过率的下降主要因为A节点的拒绝率上升引起，从而将通过率下降的影响因素从策略A和B两个节点问题进一步聚焦到A节点上。</p><h2><span id="3-cong-jie-dian-ju-jiao-dao-jie-dian-gui-ze-ceng-shen-du-fen-xi"> <em>3.从节点聚焦到节点规则层深度分析</em></span><a href="#3-cong-jie-dian-ju-jiao-dao-jie-dian-gui-ze-ceng-shen-du-fen-xi" class="header-anchor">#</a></h2><p>完成节点的聚焦分析，定位到引起通过率下降的主要原因节点A，接下来需要进一步分析节点A内包含的所有规则拒绝情况。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525162807285.png" alt="image-20200525162807285"></p><p>与节点聚焦分析一致，寻找引起拒绝率上升的主次要拒绝规则。在规则层确定主次要影响因子时，分析方法不仅结合数据同时也参考业务场景。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525163158091.png" alt="image-20200525163158091"></p><p>从上图示例4可以发现，按照波动差分析得出年龄准入拒绝和X3_准入拒绝是主要引起通过率下降的规则。</p><h2><span id="4-ju-ti-gui-ze-fen-bu-fen-xi"> <em>4.具体规则分布分析</em></span><a href="#4-ju-ti-gui-ze-fen-bu-fen-xi" class="header-anchor">#</a></h2><p>从步骤3确定出年龄准入拒绝是第一位引起通过率下降的规则后，第四步就从规则层聚焦到具体策略规则的分布上。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525163345465.png" alt="image-20200525163345465"></p><p>通过分析具体策略规则分布的波动差定位具体策略规则的某一分布，找出引起通过率下降的主要策略分布。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525162923974.png" alt="image-20200525162923974"></p><p>从上图示例6可以发现，年龄准入拒绝这一策略规则中，18-25岁的分布拒绝率在时间A段和时间B段的波动差最大，这个年龄分布的拒绝率上升可能是引起整个审批通过率下降的主要规则分布。</p><p>造成以上18-25岁年龄分布拒绝增加的原因，很常见的一种是进件客群发生了变化，针对客群发生突然变化的情况，如何将分析结果指导决策执行，是策略分析最后且最重要的一步。</p><h2><span id="5-fen-xi-zhi-dao-jue-ce"> <em>5.分析指导决策</em></span><a href="#5-fen-xi-zhi-dao-jue-ce" class="header-anchor">#</a></h2><p>仍以上述案例为例，通过一系列聚焦分析发现，18-25岁的进件客群变化是引起整体通过率下降的核心因素。实际业务场景中，并不会因为此时通过率突降就进行策略规则的调整，更多的是通过聚焦分析后，结果进一步细分两个参照要素：进件渠道的进件量分布和最大进件渠道的年龄准入拒绝分布。</p><p><em>5.1.进件渠道分布分析</em></p><p>既然是客群的变化引起了整体审批通过率的下降，从进件的所有渠道数据中进行分布排序，定位到渠道进件量A段和B段都最大的一个进件渠道C。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525163500790.png" alt="image-20200525163500790"></p><p><em>5.2.最大进件渠道的年龄准入拒绝分布</em></p><p>通过进件渠道进件量分析，从众多进件渠道中定位到最大进件渠道C。此时分析主要拒绝规则-年龄准入拒绝的渠道C的分布情况，是否满足条件：B段与A段年龄18-25岁的波动变高。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525163605116.png" alt="image-20200525163605116"></p><p>从上图示例8中分析发现，渠道C年龄在18-25岁的客群进件量在B段比A段上升明显，即从渠道进件前段业务确定出引起通过率降低的主要进件渠道C。至此，可以进行策略分析决策建议。</p><p><em>5.3.决策建议</em></p><p>将策略分析结果应用于前段业务指导和决策，提醒前端业务人员在渠道C可以适当缩紧18-25岁客群的进件需求，以此共同维护金融公司整体风控通过率，这才是风控策略分析工作者最终的使命和义务。</p><h1><span id="yu-qi-lu-shang-sheng-de-ce-lue-diao-zheng"> 逾期率上升的策略调整</span><a href="#yu-qi-lu-shang-sheng-de-ce-lue-diao-zheng" class="header-anchor">#</a></h1><p>当逾期升高时，如何进行策略调优。</p><p>真实案例背景（数据已脱敏）：</p><p>通过PQR监控报表发现，某XX贷产品的MOB报表自2019年5月开始，后续放款月资产逾期呈上升趋势，既DPD30+逐月上升，且上升速度逐步增快（MOB期数逐渐缩短）。在2019年11月放款的客户里，MOB=4的DPD30+等于2.49%。如下图1所示。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525163737375.png" alt="image-20200525163737375"></p><p>通过将MOB制作成Vintage报表，可以观测到某XX贷产品的风险自2019年5月到11月的DPD30+平均值位于6%的水平，如下图2所示。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525163801595.png" alt="image-20200525163801595"></p><p>往期DPD30+表现出的风险水平逐月快速上升现象，意味着如果不做相应的策略调整，之后的放款月风险将会更快的暴露。</p><p><strong>针对此时逾期快速上升的背景下，如何分析策略，进行策略调整呢？</strong><br><strong>策略分析方法</strong></p><h2><span id="di-yi-bu-que-ding-cun-liang-huan-shi-xin-zeng-ke-hu-dao-zhi-yu-qi-shang-sheng"> <strong>第一步：确定存量还是新增客户导致逾期上升</strong></span><a href="#di-yi-bu-que-ding-cun-liang-huan-shi-xin-zeng-ke-hu-dao-zhi-yu-qi-shang-sheng" class="header-anchor">#</a></h2><p>信贷业务每个月发生授信和放款的客户可以分成新增客户和存量客户。从上图示例2中Vintage报表展现的数据，反映出资产逾期呈上升趋势。那我们首先需要将2019年5月到2019年11月（可观测到DPD30+）的Vintage分成新增客户的Vintage1和存量客户的Vintage2，如下图3。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525164330196.png" alt="image-20200525164330196"></p><p>从上图3的Vintage1（新客户）和Vintage2（存量客户）标注的红色椭圆框可以观测到，新客户的DPD30+平均处于6%，存量客户的DPD30+平均处于5%。与图示1对比可以分析出，导致资产逾期上升的主要原因是新增客户资产变差的影响。</p><p>至此阶段的分析结论：我们可以确定出需要调整的策略规则是贷前规则。</p><p>解释如下：往期放款月中，新客户是由贷前规则通过后，给予授信并放款的，存量客户的复借是由贷中规则决定。通过Vintage1和2的分析比对，引起资产逾期上升的主要原因是新客户的逾期上升。</p><h2><span id="di-er-bu-duo-wei-du-fen-xi-zhao-chu-zui-zhu-yao-ying-xiang-gui-ze"> <strong>第二步：多维度分析，找出最主要影响规则</strong></span><a href="#di-er-bu-duo-wei-du-fen-xi-zhao-chu-zui-zhu-yao-ying-xiang-gui-ze" class="header-anchor">#</a></h2><p>通过第一步的分析确定出核心要调整的是贷前策略后，我们接下来要通过分析不同的规则变量，找出对目标变量（DPD30+）影响最大的维度变量。</p><p>这里提供分析主要影响变量的两个思路，具体实践过程就不在这里多讲，文末推荐阅读有链接。</p><p>思路一：自上而下地按照A类策略调优方法，从贷前策略节点到节点里的规则集，再细分到具体规则，逐步分析出影响较大的规则变量（文末推荐阅读给出具体分析的往期文链接）</p><p>思路二：自下而上地将所有规则变量与目标变量拟合分析，通过IV的降序排序，找出影响较大的规则变量。</p><p>分析得出，城市等级是影响逾期目标上升的主要变量。通过分析2019年5月至11月的城市等级Vintage曲线，可以发现“其他城市”较“一线城市”、“二线城市”、“三线城市“对逾期的影响较大，如下图。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525165245788.png" alt="image-20200525165245788"></p><h2><span id="di-san-bu-zhi-ding-ce-lue-diao-zheng-fang-an"> <strong>第三步：制定策略调整方案</strong></span><a href="#di-san-bu-zhi-ding-ce-lue-diao-zheng-fang-an" class="header-anchor">#</a></h2><p>通过上述数据分析，发现贷前风控规则里的“城市等级”规则”其他城市“是导致逾期升高的主要原因。此时容易出现的一个错误决策是拒绝“其他城市”的进件。</p><p>原因很简单：这种决策会导致大量的申请被拒绝，对通过率的影响比较大。</p><p>最优的策略调整方案思路是：从“坏客户”中挑选出“最坏”的一批客户，且这批客户的占比较少，然后加以拒绝。</p><p>按照上述思路，我们可以制定出如下的策略优化方案：</p><p>1、进一步分析“其他城市”里，哪一些的城市逾期较高；</p><p>2、挑选部分逾期较高的城市做贷前准入规则。</p><p>以上，就是逾期升高情况下，策略调优的分析方法。</p><h1><span id="xin-yong-duo-tou-ce-lue"> 信用多头策略</span><a href="#xin-yong-duo-tou-ce-lue" class="header-anchor">#</a></h1><p>金融风险管理中，对于一个借款人还款能力的评估十分重视。如果一个人的资产负债比过大，一旦发生资不抵债的现象，金融机构继续对其发放贷款发生违约的风险是极大的。</p><p>在体现借款人甚至借款企业还款能力的众多指标中，多头借贷是一项核心指标。</p><h2><span id="1-shi-me-shi-duo-tou-jie-dai"> <strong>1.什么是多头借贷</strong></span><a href="#1-shi-me-shi-duo-tou-jie-dai" class="header-anchor">#</a></h2><p>多头借贷是指单个借款人向2家或2家以上的金融机构提出借贷需求的行为。多头借贷数据一般至少会粗分成银行类多头借贷、非银类多头借贷。按时间跨度可以分为近7天、近15天、近1个月、近3个月、近6个月、近12个月。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525170055587.png" alt="image-20200525170055587"></p><p>多头借贷除了会统计申请次数，还会统计申请机构数、申请最大间隔天数、申请最小间隔天数、申请记录月份、平均每月申请次数(有申请月份平均)、最大月申请次数、最小月申请次数等。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525170130273.png" alt="image-20200525170130273"></p><p>由于单个用户的偿还能力是有限的，向多方借贷必然蕴含着较高的风险。一般来说，当借贷人出现了多头借贷的情况，说明该借贷人资金出现了较大困难，有理由怀疑其还款能力。</p><h2><span id="2-duo-tou-jie-dai-shu-ju-de-fen-xi-fang-fa"> <strong>2.多头借贷数据的分析方法</strong></span><a href="#2-duo-tou-jie-dai-shu-ju-de-fen-xi-fang-fa" class="header-anchor">#</a></h2><p>由于多头借贷可以比较有效的反应借款人的还款能力，所以在对借款人信用风险、欺诈风险评估上，基本都有使用多头借贷数据。</p><p>多头借贷作为一个衡量借款人的维度特征，可以结合一些逾期指标进行分析。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525170208464.png" alt="image-20200525170208464"></p><p>上图示例1中，对近7天非银机构申请机构平台数进行分析，对申请不同平台数的客户，分别统计客群的分布占比、FPD30%、FPD30-DPD90+%、通过单量、FPD30单量、DPD90+单量以及DPD90+%。通过统计后的数据，分析近7天申请N平台数的客户，其不同逾期指标的变化趋势，如上图示例1中FPD30%的增幅，进一步用于寻找策略切点或者豁免客群的回顾分析。</p><h2><span id="3-duo-tou-jie-dai-shu-ju-wei-he-shao-yong-yu-mo-xing"> <strong>3.多头借贷数据为何少用于模型</strong></span><a href="#3-duo-tou-jie-dai-shu-ju-wei-he-shao-yong-yu-mo-xing" class="header-anchor">#</a></h2><p>多头借贷少出现在模型变量中，主要有两个方面原因。</p><p>第一，多头借贷数据往往被策略同事应用于规则中。</p><p>数据建模的目的是从金融弱变量中通过特征工程方法，提炼出有效区分变量，构建评分模型。所以对于多头借贷数据，既然已经运用在策略规则中，实在没必要加入到模型变量。如果读者朋友们看到提交的评分模型报告中有多头借贷变量，那么建模的同事要么没有事先了解已上线运行的策略规则集，要么就是为了模型表现指标（如KS、AR、AUC）好看强行使用。</p><p>第二，多头借贷数据往往覆盖度不全。</p><p>多头借贷虽然是一个与风险强关联的维度，但其查得率一直被人所诟病。</p><p>举一个例子，借款人一个月内在多家机构贷款，作为一个特征，很有可能出现某个人虽然频繁贷款，但并没有被多头供应商捕捉到。一旦这个特征作为模型变量，那么这个变量的噪声就很大了。反而如果做成反欺诈策略，就不需要担心噪声问题，直接选取拒绝线进行截断，最大的影响，也就是没有拒绝掉足够多的用户，而这个影响我们还可以用噪声较小的模型进行弥补。</p><h2><span id="4-duo-tou-jie-dai-shu-ju-zai-ce-lue-gui-ze-shang-de-ying-yong"> <strong>4.多头借贷数据在策略规则上的应用</strong></span><a href="#4-duo-tou-jie-dai-shu-ju-zai-ce-lue-gui-ze-shang-de-ying-yong" class="header-anchor">#</a></h2><p>多头借贷在策略上一般作为一条策略规则，一个拒绝维度参与到整个风控流程中。不同机构，不同信贷产品，不同场景，对于多头借贷的拒绝线划分都是不一样的。如何找到当下最适合的多头借贷拒绝线，对于风控策略分析人员，是风控工作的核心任务。</p><p>仍以上图示例1为例，假设当前对于7天多平台数规则的拒绝线划分在6，即如果7天多平台数&gt;=7则拒绝。如果我们现在希望通过7天多平台数规则豁免一部分客群提升整体通过率，此时的拒绝线cutoff应该划分在哪里呢？</p><p>如果不是应对紧急调整通过率的情况，我们可以事先豁免7天多平台数7-10的客户，作为测试样本，用以产生7-10客群通过单量的分布，之后将拒绝线调回6。既可以生成如下统计分析表：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525170257437.png" alt="image-20200525170257437"></p><p>上图示例2中的桔色部分都是通过分析预测出来，比如通过上图示例1中不同多平台数FPD30%的平均增幅0.7%，预测出7-10的FPD30%。</p><p>预估计算公式8FPD30%=7FPD30%+0.7%。进一步计算出FPD30量、DPD90量等其他指标。</p><p>提醒读者朋友们，因为我们对于资产风险管控最关心的逾期指标还是不良率，所以我们通过FPD30-DPD90+%的迁徙率预测出不同7天多平台数的DPD90+%。对于7-10的FPD30-DPD90+%预估，可以采用MAX(0-6的FPD30-DPD90+%)的预估方法。</p><p>在这之后，我们对于不同7天多平台数测算出拒绝线Cutoff的FPD%和DPD%，如下图所示：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525170317997.png" alt="image-20200525170317997"></p><p>对比示例图1和图3的Cutoff_DPD%可以发现，规则拒绝线设定在&gt;=7时DPD%=3.0%，设定在&gt;=8时DPD%=3.0%，设定在&gt;=9时DPD%=3.3%。规则拒绝线设定在&gt;=8的DPD%并没有增加。此时可以尝试建议将7天多平台数的拒绝线调整到7。</p><p>当然，这种策略分析方法仍有一些纰漏，比如此方法需要有测试样本进行观测，无法满足快速调整通过率的需求；7天多平台数的FPD30%的增幅实际情况并非线性增长，有经验的策略分析师知道，FPD30%一定会在某一个节点指数级增长。</p><p>但正是因为策略分析师通过不断地按照上述方法进行样本测试对照，根据实际情况回顾分析结果，才能不断的积累策略调整经验，才会对规则分布具有一定敏感性。</p><h1><span id="ping-fen-de-ce-lue-ying-yong"> 评分的策略应用</span><a href="#ping-fen-de-ce-lue-ying-yong" class="header-anchor">#</a></h1><h3><span id="ping-fen-qia-mo-xing-de-yun-yong-zhu-yao-shi-wei-liao-jie-jue-liang-da-wen-ti"> 评分卡模型的运用，主要是为了解决两大问题：</span><a href="#ping-fen-qia-mo-xing-de-yun-yong-zhu-yao-shi-wei-liao-jie-jue-liang-da-wen-ti" class="header-anchor">#</a></h3><p>1、线上借贷业务量逐渐增加的情景下，<strong>策略规则已经无法满足更细的切分需求</strong>；</p><p>2、对于策略无法有效识别的<strong>大量灰色客群，需要使用评分卡进行风险判断</strong>；</p><p>现如今业界使用评分卡模型，更多的是为了解决第二个问题。</p><p>从金融机构自身业务发展历程来看，评分卡模型介入风险管理流程常常取决于两个重要的时机：</p><p>1、业务快速发展阶段</p><p>在金融机构业务发展的早期阶段，因为业务量小、样本少、风险控制严格等一些主客观原因，使用风控策略规则足以开展业务，所以在业务发展早期评分模型基本没有任何用武之地。</p><p>但随着信贷产品的测试期结束，金融机构要加快业务发展，此时不论是大量的客群样本、逾期表现的积累，还是风险控制的政策放松，都因为风险策略无法精准细分的局限性，而需要评分模型的介入，评分卡的应用场景更适用于人工分流。</p><p>此阶段的评分模型，常常表现不稳定，比如<strong>KS波动较大，Lift下降较快，PSI时常过0.1</strong>。此阶段评分模型的优化更多在于分析波动原因，快速重新开发迭代。</p><p>2、业务发展稳定阶段</p><p>一旦金融机构度过了新产品的早期和发展期，此时产品市场表现已经趋向稳定，反应在客群分析上，表现出稳定层级的客户画像，此阶段是评分模型介入2.0阶段。</p><p>在这个阶段评分模型会在风控流程节点上进行一些调整，比如<strong>申请卡模型会进一步的前置，担当部分客群豁免的功能。同时，此时评分模型介入2.0阶段也会降低一些外部征信数据调用成本，控制因三方数据有误而引起的误杀。</strong></p><p>此阶段的评分模型，表现较为<strong>稳定，KS、Lift、PSI等指标波动较小，对于评分卡的迭代开发需求降低</strong>，评分卡的应用更加与业务需求、金融政策以及企业发展战略相关，在保证评分模型稳定性及相对精准度的前提下，使用模型调整系数进行全局模型的调整是此阶段的主要优化办法。</p><h2><span id="ping-fen-mo-xing-de-cutoff"> 评分模型的cutoff</span><a href="#ping-fen-mo-xing-de-cutoff" class="header-anchor">#</a></h2><p>评分卡分数转换出来，在不同业务发展阶段如何合理的制定评分的cutoff，是评分应用重要的一步。</p><p>一般将评分等分后，会有两种方式对评分进行cutoff：一种是参照KS和Cum % bad rate,另一种根据等分后的累计净收益。</p><p>第一种参照Max KS和累积bad rate理论上是可以尽可能的将坏客户剔除，对好客群进行授信，但无法根据业务发展需要保证收益最大化。参照不同业务发展阶段的需求，根据评分对收益损失预估，最终确定评分cutoff，我认为这才是精细化的评分应用策略。</p><p>第二种制定评分的cutoff，需要联动分析以下图示的一些指标</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525170640285.png" alt="image-20200525170640285"></p><p>通过逆向累计净收入指标的分析，结合当下风控政策，综合评定评分的cutoff，将之应用在风控策略上，这样才是更接近业务的评分cutoff。</p><h1><span id="mo-xing-yu-ce-lue-de-guan-xi"> 模型与策略的关系</span><a href="#mo-xing-yu-ce-lue-de-guan-xi" class="header-anchor">#</a></h1><p>评分模型在金融信贷风控领域的应用非常广泛，模型的开发、监控也趋于标准化。</p><p><strong>评分模型可以为每一位观测对象打出一个评分分数</strong>，理论上实现风险与定价的绝对对等，实现<strong>个体差异化的风险管理，在这点上，风险策略规则是远不可及的。</strong></p><h2><span id="mo-xing-shi-fou-ke-yi-ti-dai-suo-you-de-ce-lue-gui-ze"> 模型是否可以替代所有的策略规则?</span><a href="#mo-xing-shi-fou-ke-yi-ti-dai-suo-you-de-ce-lue-gui-ze" class="header-anchor">#</a></h2><p>此时就有了风险策略与模型之间的争议：<strong>模型是否可以替代所有的策略规则？（排除政策准入规则）</strong></p><p>想要回答上述的争议，首先需要了解目前策略规则与模型在风控决策体系里的应用架构。目前我所见到有两种主流的风控决策应用架构：<strong>策略规则+评分模型 &amp; 策略规则+模型规则。</strong></p><h3><span id="ce-lue-gui-ze-ping-fen-mo-xing"> 策略规则+评分模型</span><a href="#ce-lue-gui-ze-ping-fen-mo-xing" class="header-anchor">#</a></h3><p>前者策略规则和评分模型是分开的，一般风控流程是先进行策略规则的风险判断，再进入评分模型的风险识别；</p><h3><span id="ce-lue-gui-ze-mo-xing-gui-ze"> 策略规则+模型规则</span><a href="#ce-lue-gui-ze-mo-xing-gui-ze" class="header-anchor">#</a></h3><p>后者是将评分模型的预测概率（或分数）转变为一个策略规则，与其他策略规则融合在一起进行风险决策。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525171048451.png" alt="image-20200525171048451"></p><h3><span id="ce-lue-gui-ze-de-cu-fang-shi-guan-li"> <strong>策略规则的粗放式管理</strong></span><a href="#ce-lue-gui-ze-de-cu-fang-shi-guan-li" class="header-anchor">#</a></h3><p>策略规则作为一种风险识别的方法，其自身具有直观、易用等特性。对于新产品上线前的风险决策，因为没有数据样本的原因，策略规则在<strong>风险决策初期起到不可替代作用</strong>。但也因为策略规则的设定原理，其自身<strong>很难做到风险决策的精细化管理。</strong></p><p>以上图风险决策B为例，可以看出策略规则都是XXXX&gt;xxx，这种单维度的风险判断是存在一定的取舍。比如某金融机构的一条多头借贷策略规则设定为：<strong>多头借贷平台数&gt;5则执行拒绝，那多头借贷=6的申请客户，就一定会违约吗？</strong></p><p>说到这里可能会有读者朋友质疑：我可以设定一些策略规则组合起来判断。没错，这也是风险决策体系下策略规则应用的一种方式，但不论多少维度的组合判断，都必然会对单一维度策略规则进行True or False判断。比如上例中的策略规则变为：多头借贷&gt;5 或 多头借贷&gt;6且性别为男性，则执行拒绝。此时对于多头借贷=6的女性不会拒绝，但对于多头借贷=7且有一定储蓄的男性，就一定会违约吗？</p><p>可以看出，如果希望通过策略规则的组合实现精细化的风险管理，就会不断地增加策略规则，最终导致策略规则的复杂和冗余，对于策略优化、回顾并没有正向的影响，这与策略规则的易用、直观等特性产生了矛盾。</p><h2><span id="ping-fen-mo-xing-de-chang-jian-san-chong-mang-qu"> <strong>评分模型的常见三种盲区</strong></span><a href="#ping-fen-mo-xing-de-chang-jian-san-chong-mang-qu" class="header-anchor">#</a></h2><p>由于策略规则的先天性缺陷，评分模型的出现可以恰当的弥补策略规则的不足，但并不意味着评分模型可以完全替代所有的策略规则。其原因有风控流程的考虑、业务发展的考虑等，在本文我为大家从模型自身的盲区为大家作解释。</p><h3><span id="jian-mo-shu-ju-ji-yu-shi-ji-dai-kuan-ren-zhi-jian-cun-zai-pian-chai"> <strong>建模数据集与实际贷款人之间存在偏差</strong></span><a href="#jian-mo-shu-ju-ji-yu-shi-ji-dai-kuan-ren-zhi-jian-cun-zai-pian-chai" class="header-anchor">#</a></h3><p>在中国因为征信体系的不完善，金融机构的模型一般以实际贷款人作为模型数据集，而申请人母集到贷款人子集往往发生较大变化（就算是大家熟知的拒绝推断也只能尽量弥补但不能完全拒绝这方面的误差），模型的判断就会出现一些偏差，此时需要根据策略维度的一些拒绝线，对模型进行一些矫正和保护。</p><h3><span id="mo-xing-shu-ju-ji-lai-zi-li-shi-yu-wei-lai-shi-ji-qing-kuang-cun-zai-pian-chai"> <strong>模型数据集来自历史，与未来实际情况存在偏差</strong></span><a href="#mo-xing-shu-ju-ji-lai-zi-li-shi-yu-wei-lai-shi-ji-qing-kuang-cun-zai-pian-chai" class="header-anchor">#</a></h3><p>模型是基于历史数据找到数据之间的逻辑规律后，对未来事件进行预测。对于具有周期性的金融行业，如果用处于上升期的数据模型预测金融衰退期的事件，必然会与实际情况发生偏差。</p><p>举个例子，比如在经济上升或者繁荣期，消费者不仅有工作的单一收入，消费者可以从一些兼职等渠道获取额外的收入来源，此时即使有较高负债收入比的客群仍然可以维持较好的信用表现；但当经济开始进入下滑时期，未来消费者很难继续从其他渠道获取资金，即使历史数据告诉模型、模型告诉决策人，此时的借贷申请人有还款能力和意愿，但商业风险决策者应考虑收紧对于较高负债收入比人群的贷款。</p><h3><span id="mo-xing-dui-yu-mu-biao-bian-liang-de-jie-ding-yu-shi-ji-shang-ye-mu-biao-cun-zai-pian-chai"> <strong>模型对于目标变量的界定与实际商业目标存在偏差</strong></span><a href="#mo-xing-dui-yu-mu-biao-bian-liang-de-jie-ding-yu-shi-ji-shang-ye-mu-biao-cun-zai-pian-chai" class="header-anchor">#</a></h3><p>模型为了权衡观察期的代表性和表现期的时效性，在建模时为了囊括最近的贷款数据，在界定“坏账”定义时，仅考虑前12个月的还款表现（有时仅考虑前6个月），此时对于一些中额长期的信贷产品（比如24个月、36个月），模型目标变量的界定与实际商业目标就发生了偏差。</p><p>综上，从反面辩证性的角度分析模型与策略，二者缺一不可，谁也不可能完全替代对方。通过科学地搭配，共同构架起严谨的风险决策体系。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#feng-kong-ce-lue-gai-yao&quot;&gt;风控策略概要&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#shi-me-shi-feng-kong
      
    
    </summary>
    
    
      <category term="risk" scheme="https://blog.sofunnyai.com/categories/risk/"/>
    
    
      <category term="risk" scheme="https://blog.sofunnyai.com/tags/risk/"/>
    
      <category term="strategy" scheme="https://blog.sofunnyai.com/tags/strategy/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud组件03---Hystrix实践</title>
    <link href="https://blog.sofunnyai.com/article/springcloud-H-03-hystrix.html"/>
    <id>https://blog.sofunnyai.com/article/springcloud-H-03-hystrix.html</id>
    <published>2020-03-23T09:34:41.000Z</published>
    <updated>2020-06-15T03:13:17.201Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#rxjava-kuai-su-ru-men">RxJava快速入门</a><ul><li><a href="#ji-ben-gai-nian">基本概念</a></li><li><a href="#chuang-jian-liu-cheng">创建流程</a><ul><li><a href="#observer-guan-cha-zhe">Observer观察者</a></li><li><a href="#observable-bei-guan-cha-zhe-shi-jian-yuan">Observable 被观察者(事件源)</a></li></ul></li></ul></li><li><a href="#jian-jie">简介</a></li><li><a href="#gai-nian">概念</a><ul><li><a href="#fu-wu-rong-duan">服务熔断</a></li><li><a href="#fu-wu-jiang-ji">服务降级</a><ul><li><a href="#rong-duan-jiang-ji-de-guan-xi">熔断、降级的关系</a></li><li><a href="#jiang-ji-fang-shi">降级方式</a></li></ul></li><li><a href="#fu-wu-xian-liu">服务限流</a></li><li><a href="#ru-he-shi-xian-de">如何实现的：</a><ul><li><a href="#shang-tu-de-bu-zou">上图的步骤</a></li></ul></li><li><a href="#ge-chi-de-shi-xian">隔离的实现</a><ul><li><a href="#xian-cheng-chi-ge-chi-mo-shi">线程池隔离模式：</a></li><li><a href="#xin-hao-liang-ge-chi-mo-shi">信号量隔离模式：</a></li></ul></li><li><a href="#rong-duan">熔断</a></li></ul></li><li><a href="#hystrix-yuan-ma">Hystrix源码</a><ul><li><a href="#hystrixcommand-lei-tu">HystrixCommand类图</a></li><li><a href="#hystrixobservablecommand-lei-tu">HystrixObservableCommand类图</a><ul><li><a href="#hystrixcommand-he-hystrixobservablecommand">HystrixCommand和HystrixObservableCommand</a></li></ul></li><li><a href="#duan-lu-qi-hystrixcircuitbreaker">断路器HystrixCircuitBreaker</a></li><li><a href="#ge-chi">隔离</a></li></ul></li><li><a href="#pei-zhi-can-shu">配置参数</a></li></ul><!-- tocstop --></div><p>因为Hystrix大量使用到观察者模式和RxJava，所以需要补充相关知识。</p><p>观察者模式可以看这里：《》</p><p>下面是RxJava的快速入门</p><h1><span id="rxjava-kuai-su-ru-men"> RxJava快速入门</span><a href="#rxjava-kuai-su-ru-men" class="header-anchor">#</a></h1><h2><span id="ji-ben-gai-nian"> 基本概念</span><a href="#ji-ben-gai-nian" class="header-anchor">#</a></h2><p>RxJava 有四个基本概念：</p><ul><li><p><code>Observable</code> (可观察者，即<strong>被观察者</strong>)、 <code>Observer</code> (观察者)、 <code>subscribe</code> (订阅)、<code>Event</code>事件。<code>Observable</code> 和 <code>Observer</code> 通过 <code>subscribe()</code> 方法实现订阅关系，从而 <code>Observable</code> 可以在需要的时候发出事件来通知 <code>Observer</code>。这里的事件就是对依赖的服务进行调用。</p></li><li><p>一个Observable可以发出多个事件，直到结束或者发生异常。</p></li><li><p><code>Observable</code>每次发出一个事件就会调用<code>Subscriber</code>对象的<code>onNext()</code>方法。</p></li><li><p>每一个Observable的执行，最后都会通过调用一个<code>Subscriber.onComplete()</code>或者<code>Subscriber.onError()</code>结束事件的操作流。</p></li><li><p>RxJava 的事件回调方法除了普通事件 <code>onNext()</code> （相当于 <code>onClick()</code> / <code>onEvent()</code>）之外，还定义了两个特殊的事件：<code>onCompleted()</code> 和 <code>onError()</code>。</p></li><li><p><code>onCompleted()</code>: <strong>事件队列完结</strong>。RxJava 不仅把每个事件单独处理，还会把它们看做一个队列。RxJava 规定，当不会再有新的 <code>onNext()</code> 发出时，需要触发 <code>onCompleted()</code> 方法作为标志。</p></li><li><p><code>onError()</code>: <strong>事件队列异常</strong>。在事件处理过程中出异常时，<code>onError()</code> 会被触发，同时队列自动终止，不允许再有事件发出。</p></li><li><p>在一个正确运行的事件序列中, <code>onCompleted()</code> 和 <code>onError()</code> <strong>有且只有一个</strong>，并且<strong>是事件序列中的最后一个</strong>。需要注意的是，<code>onCompleted()</code> 和 <code>onError()</code> 二者也是<strong>互斥</strong>的，即在队列中调用了其中一个，就不应该再调用另一个。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200603184440919.png" alt="image-20200603184440919"></p></li></ul><h2><span id="chuang-jian-liu-cheng"> 创建流程</span><a href="#chuang-jian-liu-cheng" class="header-anchor">#</a></h2><h3><span id="observer-guan-cha-zhe"> Observer观察者</span><a href="#observer-guan-cha-zhe" class="header-anchor">#</a></h3><p>观察者，它决定事件触发的时候将<strong>有怎样的行为</strong>。有两种方式，直接创建<code>Observer</code>接口，或者从抽象类<code>Subscriber</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Item: "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Subscriber</code>和上面的<code>Observer</code>二者只是抽象类提供了更多的拓展方法（<code>onStart</code>和<code>unsubscribe</code>）而已，创建过程是一样的。</p><h3><span id="observable-bei-guan-cha-zhe-shi-jian-yuan"> Observable 被观察者(事件源)</span><a href="#observable-bei-guan-cha-zhe-shi-jian-yuan" class="header-anchor">#</a></h3><p>决定<strong>什么时候触发事件</strong>以及<strong>触发怎样的事件</strong>。 RxJava 使用 <code>create()</code> 方法来创建一个 Observable ，并为它定义事件触发规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">"Hi"</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">"Aloha"</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到，这里传入了一个 <code>OnSubscribe</code> 对象作为参数。<code>OnSubscribe</code> 会被存储在返回的 <code>Observable</code> 对象中，它的作用相当于一个计划表:</p><ul><li><p><strong>当 <code>Observable</code> 被订阅的时候，<code>OnSubscribe</code> 的 <code>call()</code> 方法会自动被调用</strong></p></li><li><p>事件序列就会依照设定依次触发（对于上面的代码，就是观察者<code>Subscriber</code> 将会被调用三次 <code>onNext()</code> 和一次 <code>onCompleted()</code>）。</p></li><li><p>这样，由被观察者调用了观察者的回调方法，就实现了由被观察者向观察者的事件传递，即观察者模式。</p></li></ul><blockquote><p>这里只是最简单的一个例子，事件的内容是字符串，而不是一些复杂的对象；事件的内容是已经定好了的，而不像有的观察者模式一样是待确定的（例如网络请求的结果在请求返回之前是未知的）；所有事件在一瞬间被全部发送出去，而不是夹杂一些确定或不确定的时间间隔或者经过某种触发器来触发的。</p></blockquote><h1><span id="jian-jie"> 简介</span><a href="#jian-jie" class="header-anchor">#</a></h1><p>官网</p><blockquote><p><a href="https://github.com/Netflix/hystrix" target="_blank" rel="noopener">https://github.com/Netflix/hystrix</a></p></blockquote><p>因为调用链路越来越长，当某个微服务挂了，可能造成整个调用链路的请求拥挤和挂起，导致更多服务down掉，最终形成服务雪崩。</p><p>Hystrix是用于处理分布式系统的<strong>延迟</strong>和<strong>容错</strong>开源库，在超时、异常等场景下，Hystrix保证在一个依赖出问题的情况下，不会导致整体集群集体失败、避免级联故障、提高分布式系统的弹性</p><p>断路器是一种开关装置。实现快速失败，<strong>服务失败后，通过服务的故障监控，向调用方发送一个预期的、可处理的备选FallBack反馈，而不是长时间挂起或者抛出异常。</strong></p><p>这样保证了服务调用方的线程不会长时间挂起、不必要的等待，避免了故障的蔓延和雪崩。</p><p>造成雪崩原因可以归结为以下三个：</p><ul><li>服务提供者不可用（硬件故障，程序Bug，缓存击穿，用户大量请求）</li><li>重试加大流量（用户重试，代码逻辑重试）</li><li>服务调用者不可用（同步等待造成的资源耗尽）</li></ul><p>最终的结果就是一个服务不可用导致一系列服务的不可用，而往往这种后果往往无法预料的。</p><h1><span id="gai-nian"> 概念</span><a href="#gai-nian" class="header-anchor">#</a></h1><h2><span id="fu-wu-rong-duan"> 服务熔断</span><a href="#fu-wu-rong-duan" class="header-anchor">#</a></h2><p>一般是指软件系统中，<strong>由于某些原因使得服务出现了过载现象，为防止造成整个系统故障，从而采用的一种保护措施</strong>，所以很多地方把熔断亦称为过载保护。</p><h2><span id="fu-wu-jiang-ji"> 服务降级</span><a href="#fu-wu-jiang-ji" class="header-anchor">#</a></h2><p>划分优先级，忍痛割爱。整体资源快不够了，忍痛将某些服务先关掉，待渡过难关，再开启回来。对方不可用的时候，给一个可预期的备选兜底FallBack。</p><p>什么时候会降级：<strong>程序异常/超时/熔断触发/线程池、信号量打满</strong></p><p>要在<strong>调用方做降级</strong>（不然那个微服务都down掉了再做降级也没什么意义了） 比如说我们 user 调用payment 那么就在user 做降级.</p><h3><span id="rong-duan-jiang-ji-de-guan-xi"> 熔断、降级的关系</span><a href="#rong-duan-jiang-ji-de-guan-xi" class="header-anchor">#</a></h3><p>二者的目标是一致的，目的都是保证上游服务的稳定性。但其关注的重点并不一样，融断对下层依赖的服务并不级（或者说孰轻孰重），一旦产生故障就断掉；而降级需要对下层依赖的业务分级，把产生故障的丢了，换一个轻量级的方案，是一种退而求其次的方法。<br>根据业务场景的不同，一般采用以下两种模式：</p><h3><span id="jiang-ji-fang-shi"> 降级方式</span><a href="#jiang-ji-fang-shi" class="header-anchor">#</a></h3><p>第一种（最常用）如果服务失败，则我们通过fallback进行降级，返回静态值。</p><ul><li>fallback进行降级，返回静态值：</li></ul><p><img src="../../../../home/tree/.config/Typora/typora-user-images/image-20200602153749926.png" alt="image-20200602153749926"></p><ul><li>级联方式降级：</li></ul><p>如果第一个服务失败，则调用备用服务，例如失败重试或者访问缓存失败再去取数据库。</p><p>服务级联的目的则是尽最大努力保证返回数据的成功性，但如果考虑不充分，则有可能导致级联的服务崩溃（比如，缓存失败了，把全部流量打到数据库，瞬间导致数据库挂掉）。</p><p>因此级联模式，也要慎用，增加了管理的难度。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200602153858394.png" alt="image-20200602153858394"></p><p>Hystrix执行以下操作：</p><ul><li>提供保护并控制通过第三方客户端库访问（通常是通过网络）的依赖项带来的延迟和失败。</li><li>停止复杂的分布式系统中的级联故障。</li><li>快速失败并快速恢复。</li><li>FallBack回退并在可能的情况下正常降级。</li><li>启用近乎实时的监视，警报和操作控制。</li></ul><p>Hystrix的工作原理：</p><ul><li>防止任何单个依赖项耗尽所有容器（例如Tomcat）用户线程。</li><li>减少负载并快速失败，而不是排队。</li><li>在可行的情况下提供备用，以保护用户免受故障的影响。</li><li>隔离：例如隔板bulkhead，泳道swimlane和断路器模式circuit breaker patterns，（线程池隔离和信号量隔离）限制调用分布式服务的资源使用，某一个调用的服务出现问题不会影响其他服务调用。</li><li>降级机制：超时降级、资源不足时(线程或信号量)降级，降级后可以配合降级接口返回托底数据。</li><li>融断：当失败率达到阀值自动触发降级(如因网络故障/超时造成的失败率高)，熔断器触发的快速失败会进行快速恢复。</li><li>缓存：提供了请求缓存、请求合并实现。</li><li>通过近实时监控指标，警报优化</li></ul><h2><span id="fu-wu-xian-liu"> 服务限流</span><a href="#fu-wu-xian-liu" class="header-anchor">#</a></h2><p>秒杀等高并发场景，严禁一窝蜂，需要排队，一秒钟只能N个有序运行。</p><h2><span id="ru-he-shi-xian-de"> 如何实现的：</span><a href="#ru-he-shi-xian-de" class="header-anchor">#</a></h2><ul><li><p>将对外部系统（或“依赖项”）的所有调用包装在通常在单独线程中执行的HystrixCommand或HystrixObservableCommand对象中（这是命令模式的示例）。</p></li><li><p>超时调用时间阈值。 有默认值，但可以自定义为超过99.5％的调用时间。</p></li><li><p>为每个依赖项维护一个小的线程池（或信号量）； 如果已满，发往该依赖项的请求将立即被拒绝，而不是排队。</p></li><li><p>测量成功，失败（客户端抛出的异常），超时和线程拒绝。</p></li><li><p>如果某个服务的错误百分比超过阈值，则使断路器跳闸，以在一段时间内手动或自动停止所有对特定服务的请求。</p></li><li><p>当请求失败，被拒绝，超时或短路时执行回退逻辑。</p></li><li><p>几乎实时监控指标和配置更改。</p><p>更多见：</p></li></ul><blockquote><p><a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works#flow1" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/How-it-Works#flow1</a></p></blockquote><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200602151354011.png" alt="image-20200602151354011"></p><h3><span id="shang-tu-de-bu-zou"> 上图的步骤</span><a href="#shang-tu-de-bu-zou" class="header-anchor">#</a></h3><ol><li><p>构造一个<code>HystrixCommand</code>或<code>HystrixObservableCommand</code>对象</p></li><li><p>执行命令，有四种方式。分别可以返回单个和多个返回。<code>HystrixObservableCommand</code>两个方法分别获取Hot和Cold的Observable。</p></li><li><p>响应是否已缓存：如果为此命令启用了请求缓存，并且如果对请求的响应在缓存中可用，则该缓存的响应将立即以的形式返回<code>Observable</code>。</p></li><li><p>断路器是否开启：当执行该命令时，Hystrix会检查断路器，以查看断路器是否断开。</p><p>如果断开（或“跳闸”），那么Hystrix将不执行命令，而是将流路由到（8）获取回退。如果电路是闭合的，则流程进行到（5），以检查是否有足够的容量来运行该命令。</p></li><li><p>线程池/队列/信号量是否已满：如果与该命令关联的线程池和队列（或信号量，如果未在线程中运行）已满，则Hystrix将不执行该命令，但会立即将流路由到（8）获取回退。</p></li><li><p><code>HystrixObservableCommand.construct()</code>或<code>HystrixCommand.run()</code>，run返回单个响应或引发异常。construct返回一个Observable，它发出响应或发送<code>onError</code>通知。</p></li><li><p>计算电路健康度：Hystrix向断路器报告成功，失败，拒绝和超时，断路器保持滚动的一组计算统计信息的计数器。它使用这些统计信息来确定电路何时应“跳闸”，在此点它会将随后的所有请求短路，直到经过恢复期为止，在此之后，在首先检查某些运行状况检查之后，它将再次闭合电路。</p></li><li><p>获取后备：<a href="#%E4%B8%A4%E4%B8%AA%E5%A4%84%E7%90%86%E9%99%8D%E7%BA%A7%E7%9A%84%E7%B1%BB%E5%8C%BA%E5%88%AB%EF%BC%9A">两个处理降级的类区别：</a></p><ol><li><p>construct或者run引发异常</p></li><li><p>断路器断开</p></li><li><p>线程池或者信号量满了</p></li><li><p>命令时间超时</p><p><code>HystrixCommand.getFallback()</code>或者<code>HystrixObservableCommand.resumeWithFallback()</code>进行后备实现，最终的后备应该不依赖网络静态，否则会级联失败。</p><p>如果没准备后备，缺省抛出异常，会到OnError通知，非常糟糕要避免。</p></li></ol></li><li><p>获取成功后的响应：参见 <a href="#%E4%B8%A4%E4%B8%AA%E5%A4%84%E7%90%86%E9%99%8D%E7%BA%A7%E7%9A%84%E7%B1%BB%E5%8C%BA%E5%88%AB%EF%BC%9A">HystrixCommand和HystrixObservableCommand两个处理降级的类区别</a></p></li></ol><blockquote><p>这里有一个关联源码的动态序列图   <a href="https://design.codelytics.io/hystrix/how-it-works" target="_blank" rel="noopener">https://design.codelytics.io/hystrix/how-it-works</a></p></blockquote><p>降级出现的场景：</p><ul><li>上图4，命令处于“熔断、短路”状态的时候</li><li>上图5，当前命令的线程池、请求队列或者信号量被占满的时候。</li><li>上图6，当<code>HystrixObservableCommand.construct()</code>或者<code>HystrixCommand.run()</code>发生异常的时候。</li></ul><h2><span id="ge-chi-de-shi-xian"> 隔离的实现</span><a href="#ge-chi-de-shi-xian" class="header-anchor">#</a></h2><h3><span id="xian-cheng-chi-ge-chi-mo-shi"> 线程池隔离模式：</span><a href="#xian-cheng-chi-ge-chi-mo-shi" class="header-anchor">#</a></h3><p>使用一个线程池来存储当前的请求，线程池对请求作处理，设置任务返回处理超时时间，堆积的请求堆积入线程池队列。这种方式需要为每个依赖的服务申请线程池，有一定的资源消耗，好处是可以应对突发流量（流量洪峰来临时，处理不完可将数据存储到线程池队里慢慢处理）</p><h3><span id="xin-hao-liang-ge-chi-mo-shi"> 信号量隔离模式：</span><a href="#xin-hao-liang-ge-chi-mo-shi" class="header-anchor">#</a></h3><p>使用一个原子计数器（或信号量）来记录当前有多少个线程在运行，请求来先判断计数器的数值，若超过设置的最大线程个数则丢弃改类型的新请求，若不超过则执行计数操作请求来计数器+1，请求返回计数器-1。这种方式是严格的控制线程且立即返回模式，无法应对突发流量（流量洪峰来临时，处理的线程超过数量，其他的请求会直接返回，不继续去请求依赖的服务）</p><p>区别（两种隔离方式只能选其一）：</p><table><thead><tr><th></th><th>线程池隔离</th><th>信号量隔离</th></tr></thead><tbody><tr><td>线程</td><td>与调用线程非相同线程</td><td>与调用线程相同（jetty线程）</td></tr><tr><td>开销</td><td>排队、调度、上下文开销等</td><td>无线程切换，开销低</td></tr><tr><td>异步</td><td>支持</td><td>不支持</td></tr><tr><td>并发支持</td><td>支持（最大线程池大小）</td><td>支持（最大信号量上限）</td></tr></tbody></table><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200602153259821.png" alt="image-20200602153259821"></p><h2><span id="rong-duan"> 熔断</span><a href="#rong-duan" class="header-anchor">#</a></h2><p>正常状态下，电路处于关闭状态(Closed)，如果调用持续出错或者超时，电路被打开进入熔断状态(Open)，后续一段时间内的所有调用都会被拒绝(Fail Fast)，一段时间以后，保护器会尝试进入半熔断状态(Half-Open)，允许少量请求进来尝试，如果调用仍然失败，则回到熔断状态，如果调用成功，则回到电路闭合状态;</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200602153404090.png" alt="image-20200602153404090"></p><p>HystrixCircuitBreaker（断路器的具体实现），下图是官网How-it-works里面的：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/4115139-5443e70eedb3c6ef.png" alt="img"></p><p>详细的工作流程：</p><blockquote><p><a href="http://hot66hot.iteye.com/blog/2155036" target="_blank" rel="noopener">http://hot66hot.iteye.com/blog/2155036</a></p></blockquote><h1><span id="hystrix-yuan-ma"> Hystrix源码</span><a href="#hystrix-yuan-ma" class="header-anchor">#</a></h1><h2><span id="hystrixcommand-lei-tu"> HystrixCommand类图</span><a href="#hystrixcommand-lei-tu" class="header-anchor">#</a></h2><p>用于返回一个操作结果</p><p>类图，抽象类<code>HystrixCommand</code>继承了<code>AbstractCommand</code>，实现了三个核心接口<code>HystrixExecutable</code>、<code>HystrixInvokableInfo</code>、<code>HystrixObservable</code></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200603115730422.png" alt="image-20200603115730422"></p><h2><span id="hystrixobservablecommand-lei-tu"> HystrixObservableCommand类图</span><a href="#hystrixobservablecommand-lei-tu" class="header-anchor">#</a></h2><p>用于返回多个操作结果对象</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200603160553985.png" alt="image-20200603160553985"></p><ul><li><code>HystrixInvokableInfo</code>是一个空接口，只是一个标记。</li><li><code>HystrixInvokable</code>也一样，空接口是一个标记。</li></ul><h3><span id="hystrixcommand-he-hystrixobservablecommand"> HystrixCommand和HystrixObservableCommand</span><a href="#hystrixcommand-he-hystrixobservablecommand" class="header-anchor">#</a></h3><h4><span id="liang-ge-chu-li-jiang-ji-de-lei-qu-bie"> 两个处理降级的类区别：</span><a href="#liang-ge-chu-li-jiang-ji-de-lei-qu-bie" class="header-anchor">#</a></h4><ul><li><p><code>HystrixCommand</code>有2个方法：</p><ul><li><code>public R execute()</code>： 用于同步执行命令。其实是用queue()返回的Future.get()实现同步。会等待任务执行完毕。</li><li><code>public Future&lt;R&gt; queue()</code>：用于异步执行命令。底层是通过 <code>toObservable()</code>拿到一个ColdObservable对象，通过toBlocking()转换为BlockingObservable，它可以把数据通过阻塞的方式发射出去。但是这里使用toFuture()转换成了一个Future返回，不会阻塞。使得消费者可以异步操作。这种转换要求只能发出一个数据，所以execute和queue都只能返回单一结果。</li></ul></li><li><p><code>HystrixObservableCommand</code>又提供了2个方法：</p><ul><li><code>public Observable&lt;R&gt; observe()</code>：返回<code>Observable</code>对象，eagerly的。代表了操作的多个结果。订阅<code>Observable</code>，可用于通过回调异步执行命令。返回的是一个<code>Hot Observable</code>（不管是否有订阅者都会触发事件，每一个订阅者都可能是中途开始的，只看到整个操作的局部）</li><li><code>public Observable&lt;R&gt; toObservable()</code>：返回的也是<code>Observable</code>对象，lazily的。代表了操作的多个结果。返回的是一个<code>Cold Observable</code>（会等待，直到有订阅者才开始发布事件，对订阅者保证都是从一开始都看到整个操作的全程。）</li><li>Observable可以发送过个数据，获取多个结果。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200604002958416.png" alt="image-20200604002958416"></p></li></ul><h4><span id="er-zhe-jiang-ji-de-fang-fa-ye-bu-tong"> 二者降级的方法也不同：</span><a href="#er-zhe-jiang-ji-de-fang-fa-ye-bu-tong" class="header-anchor">#</a></h4><ul><li><code>HystrixCommand</code>：通过<code>R getFallback()</code>完成降级，直接返回业务R对象。</li><li><code>HystrixObservableCommand</code>：通过<code>Observable&lt;R&gt; resumeWithFallback()</code>完成降级，返回Observable对象来发射一个或者多个降级结果。</li><li>如果我们没有为命令实现降级方法，缺省实现是抛异常。或者降级失败也会抛异常，最终会进入到<code>onError()</code>方法中因其命令失败，要避免。</li></ul><p>在服务降级的逻辑中，我们需要一个通用的结果。通常是静态或从缓存中获取的兜底数据，而不是依赖于网络。如果一定要依赖网络，那么依赖的服务也必须放到Hystrix的命令中，级联降级。最终最后兜底的那个一定是一个不依赖于网络的，否则可能降级失败。</p><h2><span id="duan-lu-qi-hystrixcircuitbreaker"> 断路器HystrixCircuitBreaker</span><a href="#duan-lu-qi-hystrixcircuitbreaker" class="header-anchor">#</a></h2><p>**关键词：**统计值、状态位、CAS、SingleTest、SleepWindow</p><p><code>HystrixCircuitBreaker</code>是一个接口，接口文件中有两个实现类<code>HystrixCircuitBreakerImpl</code>和<code>NoOpCircuitBreaker</code>，以及一个Factory。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200604093738685.png" alt="image-20200604093738685"></p><ul><li><p>Factory没啥意思，就是一个CurrentHashMap使用命令的key来缓存和实例化断路器。</p></li><li><p>来看一下缺省断路器实现类<code>HystrixCircuitBreakerImpl</code>就能搞定它的原理了，先大概描述一下再上代码：</p><ul><li>有四个核心方法：</li><li><code>allowRequest()</code>：是否允许访问，主要判断超参数开关。参数设定强制断开、联通的话不回去判断断路器。否则才判断断路器isOpen或者singleTest。没啥意思。</li><li><code>isOpen()</code>: true=断开，断开的立刻返回失败。没断开的判断窗口内是否超量(缺省10秒20)，没超量也返回ok。超量的看错误率(缺省50%)超标则标记失败状态(<strong>CAS标识和失败时间</strong>)并返回，否则返回ok。</li><li><code>allowSingleTest()</code>：是否允许测一把，在上面isOpen里面如果错误量超标，会CAS标记断开，同时记录断开时间。然后<code>当前请求时间&gt;断开时间+sleepWindow(缺省5秒)</code>后属于<code>半开</code>状态，此时的请求只允许测试一次，成功就恢复，没成功继续修改断开时间。【<strong>也是CAS修改时间戳，保证只会发起一次测试</strong>】</li><li><code>markSuccess()</code>：请求成功后就标记成功并清空计数器（<strong>CAS标记成功防止重复清空</strong>）。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixCircuitBreakerImpl</span> <span class="keyword">implements</span> <span class="title">HystrixCircuitBreaker</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HystrixCommandProperties properties;    <span class="comment">//实例化的时候带进来的，一大堆配置参数和开关</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> HystrixCommandMetrics metrics;  <span class="comment">//实例化的时候带进来的，一堆指标</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* track whether this circuit is open/closed at any given point in time (default to false==closed) */</span></span><br><span class="line">        <span class="keyword">private</span> AtomicBoolean circuitOpen = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);  <span class="comment">// true的时候就是open，也就是断路器断开了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* when the circuit was marked open or was last allowed to try a 'singleTest' */</span></span><br><span class="line">        <span class="keyword">private</span> AtomicLong circuitOpenedOrLastTestedTime = <span class="keyword">new</span> AtomicLong();   <span class="comment">// 一个时间戳</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">HystrixCircuitBreakerImpl</span><span class="params">(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixCommandProperties properties, HystrixCommandMetrics metrics)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.properties = properties;</span><br><span class="line">            <span class="keyword">this</span>.metrics = metrics;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记成功</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">markSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (circuitOpen.get()) &#123; <span class="comment">//true=open=断开</span></span><br><span class="line">                <span class="keyword">if</span> (circuitOpen.compareAndSet(<span class="keyword">true</span>, <span class="keyword">false</span>)) &#123;   <span class="comment">// 注意使用了CAS避免并发问题，恢复断路器。</span></span><br><span class="line">                    <span class="comment">//win the thread race to reset metrics  // CAS拿到了执行权</span></span><br><span class="line">                    <span class="comment">//Unsubscribe from the current stream to reset the health counts stream.  This only affects the health counts view,  //退订当前流以重置运行状况计数流。这只会影响健康计数相关的信息</span></span><br><span class="line">                    <span class="comment">//and all other metric consumers are unaffected by the reset  //并且所有其他指标使用者均不受重置的影响</span></span><br><span class="line">                    metrics.resetStream();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allowRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (properties.circuitBreakerForceOpen().get()) &#123;  <span class="comment">// 参数里面看看是不是强制断开的，是的话拒绝。</span></span><br><span class="line">                <span class="comment">// properties have asked us to force the circuit open so we will allow NO requests</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (properties.circuitBreakerForceClosed().get()) &#123;    <span class="comment">// 参数里面是不是强制关闭的，是的话允许。</span></span><br><span class="line">                <span class="comment">// we still want to allow isOpen() to perform it's calculations so we simulate normal behavior  // 计数</span></span><br><span class="line">                isOpen();</span><br><span class="line">                <span class="comment">// properties have asked us to ignore errors so we will ignore the results of isOpen and just allow all traffic through</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> !isOpen() || allowSingleTest();    <span class="comment">// 否则看是否闭合，或者是否允许单一测试（单一测试是挂了很久了，再来一个请求允许试一把看看恢复了没）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//  挂了很久，测一把看看是否恢复了。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allowSingleTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> timeCircuitOpenedOrWasLastTested = circuitOpenedOrLastTestedTime.get();  <span class="comment">// 从Atomic时间戳了拿出来上次失败时间</span></span><br><span class="line">            <span class="comment">// 1) if the circuit is open   // 断路器断开了，而且已经断开了很久，超过了参数配置的睡眠窗口时间。就会允许测试一把</span></span><br><span class="line">            <span class="comment">// 2) and it's been longer than 'sleepWindow' since we opened the circuit</span></span><br><span class="line">            <span class="keyword">if</span> (circuitOpen.get() &amp;&amp; System.currentTimeMillis() &gt; timeCircuitOpenedOrWasLastTested + properties.circuitBreakerSleepWindowInMilliseconds().get()) &#123;</span><br><span class="line">                <span class="comment">// 如果测试成功，就会把断路器合上，恢复服务。否则把失败时间往后赋值，再等下一次时间窗口后进行singleTest</span></span><br><span class="line">                <span class="comment">// We push the 'circuitOpenedTime' ahead by 'sleepWindow' since we have allowed one request to try.</span></span><br><span class="line">                <span class="comment">// If it succeeds the circuit will be closed, otherwise another singleTest will be allowed at the end of the 'sleepWindow'.</span></span><br><span class="line">                <span class="keyword">if</span> (circuitOpenedOrLastTestedTime.compareAndSet(timeCircuitOpenedOrWasLastTested, System.currentTimeMillis())) &#123;</span><br><span class="line">                    <span class="comment">// if this returns true that means we set the time so we'll return true to allow the singleTest</span></span><br><span class="line">                    <span class="comment">// if it returned false it means another thread raced us and allowed the singleTest before we did</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;  <span class="comment">// 允许</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 另一个线程已经测试了</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 断路器是否闭合</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (circuitOpen.get()) &#123;</span><br><span class="line">                <span class="comment">// 如果是断开的(true)，我们会立即返回true断开，而不必费心尝试“关闭”自己，因为这允许allowSingleTest和随后的成功测试关闭</span></span><br><span class="line">                <span class="comment">// if we're open we immediately return true and don't bother attempting to 'close' ourself as that is left to allowSingleTest and a subsequent successful test to close</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="comment">// 如果我们是闭合的，看一眼是否有错误使我们跳闸，以便使电路断开</span></span><br><span class="line">            <span class="comment">// we're closed, so let's see if errors have made us so we should trip the circuit open</span></span><br><span class="line">            HealthCounts health = metrics.getHealthCounts();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查是否超过总统计量的阈值参数，没有超过总量就立即返回false（没断开），不用计算别的</span></span><br><span class="line">            <span class="comment">// check if we are past the statisticalWindowVolumeThreshold</span></span><br><span class="line">            <span class="keyword">if</span> (health.getTotalRequests() &lt; properties.circuitBreakerRequestVolumeThreshold().get()) &#123;</span><br><span class="line">                <span class="comment">// we are not past the minimum volume threshold for the statisticalWindow so we'll return false immediately and not calculate anything</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果超过了总量，再来计算错误比例</span></span><br><span class="line">            <span class="keyword">if</span> (health.getErrorPercentage() &lt; properties.circuitBreakerErrorThresholdPercentage().get()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;   <span class="comment">// 错误比例没超标，直接返回ok的，没断开</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// our failure rate is too high, trip the circuit</span></span><br><span class="line">                <span class="keyword">if</span> (circuitOpen.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;    <span class="comment">// 错误率太高，CAS把断路器关闭掉。CAS成功的话</span></span><br><span class="line">                    <span class="comment">// if the previousValue was false then we want to set the currentTime</span></span><br><span class="line">                    circuitOpenedOrLastTestedTime.set(System.currentTimeMillis());    <span class="comment">// 设置断路时间</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;   <span class="comment">// 返回断路了</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// How could previousValue be true? If another thread was going through this code at the same time a race-condition could have</span></span><br><span class="line">                    <span class="comment">// caused another thread to set it to true already even though we were in the process of doing the same</span></span><br><span class="line">                    <span class="comment">// In this case, we know the circuit is open, so let the other thread set the currentTime and report back that the circuit is open</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;   <span class="comment">// 这里是被别的CAS抢占了，但是也要告诉当前的调用者这次是断开的。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2><span id="ge-chi"> 隔离</span><a href="#ge-chi" class="header-anchor">#</a></h2><h1><span id="pei-zhi-can-shu"> 配置参数</span><a href="#pei-zhi-can-shu" class="header-anchor">#</a></h1><p>很多参数，去这里查：</p><blockquote><p><a href="https://github.com/Netflix/Hystrix/wiki/Configuration" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/wiki/Configuration</a></p></blockquote><blockquote><p><a href="https://www.jianshu.com/p/e07661b9bae8" target="_blank" rel="noopener">https://www.jianshu.com/p/e07661b9bae8</a></p><p><a href="https://www.jianshu.com/p/3e11ac385c73uyi" target="_blank" rel="noopener">https://www.jianshu.com/p/3e11ac385c73uyi</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#rxjava-kuai-su-ru-men&quot;&gt;RxJava快速入门&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ji-ben-gai-nian&quot;&gt;基本
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://blog.sofunnyai.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://blog.sofunnyai.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud组件02---OpenFeign实践</title>
    <link href="https://blog.sofunnyai.com/article/springcloud-H-02-open-feign.html"/>
    <id>https://blog.sofunnyai.com/article/springcloud-H-02-open-feign.html</id>
    <published>2020-03-22T04:22:51.000Z</published>
    <updated>2020-06-02T06:37:51.174Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#openfeign-jian-jie">OpenFeign简介</a><ul><li><a href="#ribbon-he-feign-de-qu-bie">Ribbon和Feign的区别</a><ul><li><a href="#ribbon">Ribbon</a></li><li><a href="#feign">Feign</a></li><li><a href="#openfeign">OpenFeign</a></li></ul></li></ul></li><li><a href="#shi-jian-an-li">实践案例</a><ul><li><a href="#server-duan">Server端：</a></li><li><a href="#ti-gong-fang">提供方</a></li><li><a href="#feign-chang-jian-pei-zhi">feign常见配置</a></li><li><a href="#chao-shi-kong-zhi">超时控制</a></li><li><a href="#feign-ri-zhi-kong-zhi">Feign日志控制</a></li><li><a href="#feign-geng-duo">Feign更多</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="openfeign-jian-jie"> OpenFeign简介</span><a href="#openfeign-jian-jie" class="header-anchor">#</a></h1><p>Feign已经不再更新，进入维护状态。SpringCloud版本 OpenFeign作为后起之秀接替他。</p><blockquote><p>Feign是声明性Web服务客户端。 它使编写Web服务客户端更加容易。 要使用Feign，请创建一个接口并对其进行注释。 它具有可插入的注释支持，包括Feign注释和JAX-RS注释。 Feign还支持可插拔编码器和解码器。 Spring Cloud添加了对Spring MVC注释的支持，并支持使用Spring Web中默认使用的相同HttpMessageConverters。 Spring Cloud集成了Ribbon和Eureka以及Spring Cloud LoadBalancer，以在使用Feign时提供负载平衡的http客户端。</p></blockquote><blockquote><p><a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">https://github.com/OpenFeign/feign</a></p><p><a href="https://cloud.spring.io/spring-cloud-openfeign/2.2.x/reference/html/" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-openfeign/2.2.x/reference/html/</a></p></blockquote><h2><span id="ribbon-he-feign-de-qu-bie"> Ribbon和Feign的区别</span><a href="#ribbon-he-feign-de-qu-bie" class="header-anchor">#</a></h2><h3><span id="ribbon"> Ribbon</span><a href="#ribbon" class="header-anchor">#</a></h3><p>是一个基于 HTTP 和 TCP 客户端 的负载均衡的工具。主启动类上使用<code>@RibbonClient</code>开启<br>它可以 在客户端 配置 RibbonServerList（服务端列表），使用 HttpClient 或 RestTemplate 模拟http请求，步骤相当繁琐。</p><p>Ribbon 可以用来做<strong>客户端负载均衡</strong>，调用注册中心的服务</p><p>Ribbon的使用需要代码里<strong>手动调用目标服务</strong>，请参考官方示例：<a href="https://github.com/Netflix/ribbon" target="_blank" rel="noopener">https://github.com/Netflix/ribbon</a></p><h3><span id="feign"> Feign</span><a href="#feign" class="header-anchor">#</a></h3><p>Feign 是在 Ribbon的基础上进行了一次改进，是一个使用起来更加方便的 HTTP 客户端。</p><p>采用接口的方式， 只需要创建一个接口，然后在上面添加注解即可 ，就能完成对服务方的接口绑定。只需要将需要调用的其他服务的方法定义成抽象方法即可， 不需要自己构建http请求。</p><p>然后就像是调用自身工程的方法调用，而感觉不到是调用远程方法，使得编写 客户端变得非常容易。Feign自动封装底层Http请求。</p><p>Feign是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端</p><p>Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。</p><p>Feign支持的注解和用法请参考官方文档：<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">https://github.com/OpenFeign/feign</a></p><p>Feign本身不支持Spring MVC的注解，它有一套自己的注解</p><h3><span id="openfeign"> OpenFeign</span><a href="#openfeign" class="header-anchor">#</a></h3><p>OpenFeign是Spring Cloud 在Feign的基础上支持了Spring MVC的注解，如@RequesMapping等等。<br>OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，<br>并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200602124753981.png" alt="image-20200602124753981"></p><h1><span id="shi-jian-an-li"> 实践案例</span><a href="#shi-jian-an-li" class="header-anchor">#</a></h1><ul><li>主启动类开启<code>@EnableFeignClients</code></li><li>写服务接口，对应提供方的Controller，接口上<code>@FeignClient(服务名)</code>和<code>@Component</code>实例化。</li><li>把这个service接口注入到业务中即可使用。（这个Service会有springcloud动态代理生成实现并实例化）</li></ul><h2><span id="server-duan"> Server端：</span><a href="#server-duan" class="header-anchor">#</a></h2><p>pom新增open-feign支持：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--open feign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--上面的eureka-client会自动引入ribbon--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--业务common类，引用当前项目的版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sam.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MVC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--TEST--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--DEV-TOOLS--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>   <span class="comment">// 开启feign功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerOpenFeign8084</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依赖Eureka7001\7002，Peyment服务方8001\8002四个服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CustomerOpenFeign8084<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用OpenFeign调用Server只用一个接口，Feign会使用代理模式给我们生成一个实现。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"CLOUD-PAYMENT-SERVICE"</span>) <span class="comment">// server端的服务名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymengFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value=<span class="string">"/payment/add"</span>)  <span class="comment">// server端的服务地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">addPayment</span><span class="params">(@RequestBody Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/payment/get/&#123;id&#125;"</span>) <span class="comment">// server端的服务地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200602132939630.png" alt="image-20200602132939630"></p><h2><span id="ti-gong-fang"> 提供方</span><a href="#ti-gong-fang" class="header-anchor">#</a></h2><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/payment"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 因为是接受调用的server，这里使用<span class="doctag">@RequestBody</span>接受json，否则字段会丢失</span></span><br><span class="line"><span class="comment">     * http://localhost:8002/payment/add</span></span><br><span class="line"><span class="comment">     * &#123;"serial":"lalala"&#125;  content-type: application/json才行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> payment</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(value=<span class="string">"/add"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">addPayment</span><span class="params">(@RequestBody Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = paymentService.add(payment);</span><br><span class="line">        log.info(<span class="string">"---------插入:"</span>+result);</span><br><span class="line">        <span class="keyword">if</span>(result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.success(<span class="string">"插入payment成功！serverPort="</span>+serverPort);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.businessFail(<span class="string">"插入payment失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/get/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>&#123;</span><br><span class="line">        Payment payment = paymentService.getById(id);</span><br><span class="line">        <span class="keyword">if</span>(payment != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.success(<span class="string">"ok,serverPort="</span>+serverPort, payment);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.businessFail(<span class="string">"查询失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="feign-chang-jian-pei-zhi"> feign常见配置</span><a href="#feign-chang-jian-pei-zhi" class="header-anchor">#</a></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">feignName:</span> <span class="comment"># 这里是可变的，如default</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">full</span></span><br><span class="line">        <span class="attr">errorDecoder:</span> <span class="string">com.example.SimpleErrorDecoder</span></span><br><span class="line">        <span class="attr">retryer:</span> <span class="string">com.example.SimpleRetryer</span></span><br><span class="line">        <span class="attr">requestInterceptors:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.example.FooRequestInterceptor</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.example.BarRequestInterceptor</span></span><br><span class="line">        <span class="attr">decode404:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">encoder:</span> <span class="string">com.example.SimpleEncoder</span></span><br><span class="line">        <span class="attr">decoder:</span> <span class="string">com.example.SimpleDecoder</span></span><br><span class="line">        <span class="attr">contract:</span> <span class="string">com.example.SimpleContract</span></span><br></pre></td></tr></table></figure><h2><span id="chao-shi-kong-zhi"> 超时控制</span><a href="#chao-shi-kong-zhi" class="header-anchor">#</a></h2><p>因为feign底层是使用的ribbon，调用方的<code>application.yml</code>中配置ribbon的超时时间：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 超时配置，以下二选一</span></span><br><span class="line"><span class="comment">#ribbon:</span></span><br><span class="line"><span class="comment">#  ReadTimeout: 5000  # 连接建立后请求数据的时间</span></span><br><span class="line"><span class="comment">#  ConnectTimeout: 5000  # 建立连接的时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用feign原生配置，https://cloud.spring.io/spring-cloud-openfeign/2.2.x/reference/html/</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># 可变的name</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br></pre></td></tr></table></figure><h2><span id="feign-ri-zhi-kong-zhi"> Feign日志控制</span><a href="#feign-ri-zhi-kong-zhi" class="header-anchor">#</a></h2><p>yml对应包打开日志</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.sam.springcloud.service.PaymengFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>feign配置日志级别，使用上面的yml配置文件控制，或者下面人肉注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可选，设置Feign的日志级别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="feign-geng-duo"> Feign更多</span><a href="#feign-geng-duo" class="header-anchor">#</a></h2><p>Encoder、Decoder、和Hystyix结合，消息压缩，见</p><blockquote><p><a href="https://cloud.spring.io/spring-cloud-openfeign/2.2.x/reference/html/#spring-cloud-feign-hystrix" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-openfeign/2.2.x/reference/html/#spring-cloud-feign-hystrix</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#openfeign-jian-jie&quot;&gt;OpenFeign简介&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ribbon-he-feign-de-qu
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://blog.sofunnyai.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://blog.sofunnyai.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>互联网金融资产质量评估指标---fpd、vintage、rollrate和迁移率等等</title>
    <link href="https://blog.sofunnyai.com/article/vintage_rollrate_fpd.html"/>
    <id>https://blog.sofunnyai.com/article/vintage_rollrate_fpd.html</id>
    <published>2020-03-21T17:25:33.000Z</published>
    <updated>2020-05-25T06:57:03.990Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="mu-lu"> 目录</span><a href="#mu-lu" class="header-anchor">#</a></h1><!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#gai-shu"><strong>概述</strong></a></li><li><a href="#ji-chu-gai-nian"><strong>基础概念</strong></a><ul><li><a href="#feng-xian-fen-xi-you-chang-jian-de-5-yao-su">风险分析有常见的5要素：</a></li><li><a href="#qi-ta-de-xiang-guan-gai-nian">其他的相关概念</a></li></ul><ul><li><a href="#yan-zhi-lu">延滞率</a><ul><li><a href="#ji-qi-zhi-biao-coincidental"><strong>即期指标（coincidental）：</strong></a></li><li><a href="#di-yan-zhi-biao-lagged"><strong>递延指标（lagged）：</strong></a></li></ul></li><li><a href="#zhang-ling-month-of-book-mob">账龄(Month of Book，MOB)</a></li><li><a href="#fpd-shou-yu-lu-fan-qi-zha-xiang-guan">FPD 首逾率（反欺诈相关）</a></li><li><a href="#ru-cui-lu">入催率</a></li><li><a href="#yu-qi-shi-jian">逾期时间</a></li></ul></li><li><a href="#vintage-cheng-shou-qi"><strong>vintage 成熟期</strong></a><ul><li><a href="#guan-cha-dian-yu-biao-xian-qi">观察点与表现期：</a></li><li><a href="#vintage-ju-li">vintage举例</a></li></ul></li><li><a href="#roll-rate-gun-dong-lu"><strong>roll rate滚动率</strong></a><ul><li><a href="#gun-dong-lu-ding-yi-zhuang-tai-bian-hua">滚动率定义—状态变化</a></li></ul></li><li><a href="#ru-he-que-ding-bad-he-good-biao-qian-de-zhang-ling"><strong>如何确定bad和good标签的账龄</strong></a><ul><li><a href="#vintage-he-roll-rate-de-qu-bie">vintage和roll rate的区别：</a><ul><li><a href="#roll-rate-yi-jing-que-ding-liao-bad-wei-shi-me-huan-xu-yao-tong-guo-vintage-fen-xi-lai-que-ding-biao-xian-qi">roll rate已经确定了bad为什么还需要通过Vintage分析来确定表现期？</a></li><li><a href="#vintage-li-suo-you-de-zhang-hu-wo-men-de-mu-de-shi-zhua-zhu-jin-ke-neng-duo-de-pi-ke-hu">Vintage里所有的账户，我们的目的是抓住尽可能多的坏客户。</a></li></ul></li></ul></li><li><a href="#flow-rate-qian-yi-lu"><strong>Flow Rate迁移率</strong></a></li><li><a href="#pi-zhang-zhun-bei-jin"><strong>坏账准备金</strong></a><ul><li><a href="#pi-zhang-zhun-bei-jin-de-gai-nian-ge-qi-yu-qi-yu-e-cheng-yi-ge-zi-zhun-bei-jin-lu">坏账准备金的概念----各期逾期余额乘以各自准备金率</a></li><li><a href="#zhun-bei-jin-bi-li">准备金比例</a></li></ul></li><li><a href="#zi-chan-zu-he-guan-li-xiang-guan">资产组合管理相关</a></li><li><a href="#can-kao-wen-zhang-lian-jie">参考文章链接：</a></li></ul><!-- tocstop --></div><h1><span id="gai-shu"> <strong>概述</strong></span><a href="#gai-shu" class="header-anchor">#</a></h1><p>想写一个vintage和roll rate的文章，查到求是汪大佬写的非常详细，图文并茂。直接偷懒摘录了一个脱水版，想看原文的在<a href="https://zhuanlan.zhihu.com/p/81027037/" target="_blank" rel="noopener">这里</a>。下面开始干货。</p><p>本文主要讲述账龄vantage、滚动率roll rate、迁移率flow rate三个指标的关系。</p><ul><li>账龄分析（Vintage Analysis）：用以分析账户成熟期、变化规律等。</li><li>滚动率分析（Roll Rate Analysis）：用以定义账户好坏程度。</li><li>迁移率分析（Flow Rate Analysis）：用以分析不同逾期状态之间的转化率。</li></ul><h1><span id="ji-chu-gai-nian"> <strong>基础概念</strong></span><a href="#ji-chu-gai-nian" class="header-anchor">#</a></h1><h3><span id="feng-xian-fen-xi-you-chang-jian-de-5-yao-su"> 风险分析有常见的5要素：</span><a href="#feng-xian-fen-xi-you-chang-jian-de-5-yao-su" class="header-anchor">#</a></h3><ol><li>下单月：</li><li>观察月：</li><li>放款额（GMV）：就是零售业说的“流水”，成交总额包括销售额、取消订单金额、拒收订单 金额和退货订单金额。</li><li>在贷余额（Balance）/ ENR：至某时点借款人尚未偿还的本金</li><li>逾期天数（DPD）</li></ol><h3><span id="qi-ta-de-xiang-guan-gai-nian"> 其他的相关概念</span><a href="#qi-ta-de-xiang-guan-gai-nian" class="header-anchor">#</a></h3><ol><li>C,M1,M2,M3…的贷款余额：根据逾期期数(C,M1,M2,M3…)，计算每条借款的当时的贷款余额。（<strong>贷款余额 = 放款时合同额 –已还本金</strong>）</li><li>核销金额: 贷款逾期M7+（坏账）后经审核进行销帐，核销金额即在核销日期当天的贷款余额。</li><li>回收金额 Recovery：来自历史所有已核销合同的全部实收金额。（核销后又回收的部分）</li><li>净坏账 NCL：当月新增核销金额 – 当月回收金额（坏账减去回收）</li></ol><h2><span id="yan-zhi-lu"> 延滞率</span><a href="#yan-zhi-lu" class="header-anchor">#</a></h2><p>延滞率（delinquent%）的计算可分为coincidental以及lagged两种方式，除了各bucket延滞率之外，也会观察特定bucket以上的延滞率，如M2+lagged%以及M4+lagged%等指标，以M2+lagged%为例，分母为两个月前应收账款，分子为本月M2（含）以上尚未转呆账的逾期金额。</p><p>在消费金融风险管理上，M2以及M4为两个重要的观测点，原因是客户可能因为一时忙碌或疏忽造成账款逾期，但若经过M1催收仍旧落入M2以上，几乎可以确认为无力缴款或者蓄意拖欠。另外依据经验，客户一旦落入M4，事后转呆账几率非常高。</p><p>下面部分来自知乎<a href="https://www.zhihu.com/question/51583052/answer/194923434" target="_blank" rel="noopener">京东白条</a>的回复：</p><p>逾期率有两种方法：<strong>即期逾期率指标</strong>Coin(X)%和<strong>递延逾期率指标</strong>Lagged(X)%</p><p>这个指标分子 = 时点逾期余额，分母 = 时点透支余额。逾期率最直观，但也最容易被“操控”：</p><p>分子会受到统计粒度的影响（以客户/账户/贷款单/贷款分期单哪个粒度来计算差异很大，尤其是偏重分期的产品），也会受到核销等资产处置的影响（是否有核销处理、统计时是否包含）。</p><p>分母会受到当期时点规模的影响，季末/年末冲量或特殊的营销时点上，都会导致规模的激增，人为拉低时点的逾期率。</p><p>在产品高速发展时期，规模增长迅速，而风险滞后释放，导致对风险的低估和滞后判断；而在产品成熟和衰退期，导致对风险的高估，容易误导风险策略的制定。</p><p>由于上述原因的存在，一般逾期率只能说明累积的整体风险水平如何。如果根据时点的不良率判断近期风险水平，存在高估/低估的可能。-------------逾期率只能是整体一个粗略的观察，具体来说逾期的结构更重要。</p><p>如果一定要用时点余额来判断近期的风险，建议使用延滞率或逾期的净生成率：</p><p>Mi延滞率=当期Mi/i月前的M0</p><p>Mi净生成率=(当期Mi-i月前的Mi)/i月前的透支余额</p><p>这两个指标至少能在一定程度上排除当期时点规模、历史存量的影响，能更真实反映近期的风险水平。</p><h4><span id="xin-zeng-ke-hu-zi-chan-de-feng-xian-shui-ping-ru-he"> 新增客户/资产的风险水平如何？</span><a href="#xin-zeng-ke-hu-zi-chan-de-feng-xian-shui-ping-ru-he" class="header-anchor">#</a></h4><p>整体的逾期率并不一定能回答或甄别近期客户/资产的风险水平。需要通过VINTAGE拆解客户和资产，观察相同的表现期后不同客群/资产的逾期占比，例如激活或放款后1~24个月各月月末时点的0+/30+/90+贷款户数和金额或余额的占比。</p><p>通过对比不同激活月或放款月在相同的表现窗口后的逾期水平，能观察不同激活月/放款月（对应了不同的策略或人群）的风险走势，更合理评价不同时点人群/资产的情况和策略的效果。</p><p>如果运营是针对的客户的，按照激活时间划分客群统计VINTAGE更通用一些；如果是针对资产进行运营，按照贷款的放款月划分资产统计VINTAGE更通用一些。</p><h4><span id="cun-liang-zi-chan-de-qian-yi-qing-kuang"> 存量资产的迁移情况？</span><a href="#cun-liang-zi-chan-de-qian-yi-qing-kuang" class="header-anchor">#</a></h4><p>除了需要时刻关注新增的风险外，也需要掌握已经逾期资产的迁移/退出情况，也就是滚动率(或者迁徙率、迁移率)。</p><p>滚动率一方面体现了客群和资产的质量，也能反映催收运营的状况。</p><p>常见的滚动率一般是当期账龄余额与上一期上一账龄余额的比值，用百分比表示。账龄越高，滚动率越高，表示资产回收的可能性越低，进入下一期高账龄的概率越高。</p><p>滚动率也可以进一步细分为向上/向下滚动，一般默认的滚动率都是向上滚动，即从低账龄滚到高账龄。向上/向下滚动需要锁定月末时点某一账龄的客户/资产，在下月底观察锁定的这部分客户或资产，统计向上/向下滚动的占比，能排除统计粒度和分期带来的降期影响。</p><p>另外，滚动率与产品、前中后的运营等诸多因素有关，短期容易波动，可以计算复合滚动率，例如M0-&gt;M4的滚动率，能从长周期来观察资产质量和运营的稳定水平。</p><h3><span id="ji-qi-zhi-biao-coincidental"> <strong>即期指标（coincidental）：</strong></span><a href="#ji-qi-zhi-biao-coincidental" class="header-anchor">#</a></h3><p>计算延滞率时常用的两种方法之一，以当期各bucket延滞金额÷应收账款（AR）。</p><p>如逾期率Coin©%、Coin(M1)%、Coin(M2)%、Coin(M3)%等等：</p><p><strong>当月不同逾期期数的贷款余额/当月底总贷款余额</strong></p><p>例：</p><p>Coin©%=当月C贷款余额/当月底贷款余额(C-M6)-------------------正常用户余额占所有贷款余额</p><p><strong>Coin(M1)%=当月M1贷款余额/当月底贷款余额(C-M6)</strong></p><p>Coin(M1+)%=当月M1−M6贷款余额/当月底贷款余额(C-M6)------------------逾期M1以上的用户余额占所有贷款余额</p><h3><span id="di-yan-zhi-biao-lagged"> <strong>递延指标（lagged）：</strong></span><a href="#di-yan-zhi-biao-lagged" class="header-anchor">#</a></h3><p>计算延滞率时常用的两种方法之一，<strong>延滞金额÷上月应收账款</strong>。若单纯想了解各月资产质量结构，可使用coindental，但若想<strong>精准溯及逾放源头的话，建议采用lagged。</strong></p><p>与coincident相同也是计算延滞率的一个指标，区别是<strong>lagged的分母为产生逾期金额的那一期的应收账款。Lagged观察的是放贷当期所产生的逾期比率，所以不受本期应收账款的起伏所影响。</strong></p><p>逾期率Lagged(M1)%、Lagged(M2)%、Lagged(M3)%、Lagged(M4)%、Lagged(M5)%、Lagged(M6)%</p><p><strong>Lagged DPD30+   =    当前逾期&gt;=30天的客户的本金余额  /  30天前的累计放款本金</strong></p><p><strong>当月不同逾期期数的贷款余额/往前推N个月的总贷款余额</strong>可以提出当前时点的影响。</p><p>例:</p><p><strong>Lagged(M1)%=当月M1的贷款余额/上个月底时点的贷款余额</strong>  -----------------其实就是平台当月M1/1月前的M0</p><p>Lagged(M4)%=当月M4的贷款余额/往前推四期的总贷款余额</p><p>Lagged(M4+)%=当月M4的贷款余额/往前推四期的总贷款余额 + 当月M5的贷款余额/往前推五期的总贷款余额 + 当月M6的贷款余额/往前推六期的总贷款余额</p><h4><span id="yu-qi-jie-suan"> 逾期结算</span><a href="#yu-qi-jie-suan" class="header-anchor">#</a></h4><p>实际风险有两种结算方式：</p><p><strong>Month end</strong>：月底结算 （常用方式，主要以自然月月底的逾期指标为主）</p><p><strong>Cycle end</strong>：期末结算（单个借款人还款日时间不同，在月底结算的数据不准确，所以一般设置20日还款，留出10天给催收部门）</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525095234158.png" alt="image-20200525095234158"></p><p>早期逾期多数为借款人忘记还款，或短时间资金周转不周，这是<strong>与策略密切相关的。通过借款人债偿能力评估识别出借款人有足够资金，可以不做提醒，以获取滞纳金，对于借款人资产表现不好的，可以设置提前10天提醒还款。</strong></p><p>逾期天数90-119天，为资产M4阶段。<strong>M4-M6的阶段都称之为不良</strong>。M4是一个重要的节点，因为消金公司，上报给银监会，或上市公司披露财务数据、风险数据时，都会选择披露不良率。如果有些公司要在审计认可这个方法论时，会对M4做一些调整。</p><p>通常<strong>180天以上都作为坏账处理</strong>，坏账也是被披露的数据之一，还包含一些特别的计提。</p><h2><span id="zhang-ling-month-of-book-mob"> 账龄(Month of Book，MOB)</span><a href="#zhang-ling-month-of-book-mob" class="header-anchor">#</a></h2><p>指<strong>资产放款月份</strong>。放款日截止观察点的月数。如：</p><ul><li>MOB0：放款日至当月月底</li><li>MOB1：放款后第二个完整的月份</li><li>MOB2：放款后第三个完整的月份</li></ul><h2><span id="fpd-shou-yu-lu-fan-qi-zha-xiang-guan"> FPD 首逾率（反欺诈相关）</span><a href="#fpd-shou-yu-lu-fan-qi-zha-xiang-guan" class="header-anchor">#</a></h2><p>FPD是指首期逾期率，是说在某一个还款日，仅第一期到期的客户中有多少没有按时还款。与入催率的差别在于，入催率包含了第一期、第二期、第三期等等所有到期的M0。FPD一般用来做反欺诈，因为欺诈用户他第一期是根本不会还款的。</p><p>用户授信通过后，首笔需要还款的账单，在最后还款日后7天内未还款且未办理延期的客户比例即为FPD 7，分子为观察周期里下单且已发生7日以上逾期的用户数，分母为当期所有首笔下单且满足还款日后7天，在观察周期里的用户数。常用的FPD指标还有FPD 30。<br>举例：</p><p>假设用户在10.1日授信通过，在10.5日通过分期借款产生了首笔分3期的借款，且设置每月8日为还款日。则11.08是第一笔账单的还款日，出账日后，还款日结束前还款则不算逾期。如11.16仍未还款，则算入10.1-10.30周期的FPD7的分子内。通常逾期几天的用户可能是忘了还款或一时手头紧张，但FPD 7 指标可以用户来评价授信人群的信用风险，对未来资产的健康度进行预估。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525134714438.png" alt="image-20200525134714438"></p><p>与FPD 7 类似，FPD 30也是对用户首笔待还账单逾期情况进行观察的指标。对于逾期30天内的用户，可以通过加大催收力度挽回一些损失，对于逾期30天以上的用户，催收回款的几率就大幅下降了，可能进行委外催收。如果一段时间内的用户FPD 7较高，且较少催收回款大多落入了FPD 30 内，则证明这批用户群的non-starter比例高，借款时压根就没想还，反之则说明用户群的信用风险更严重。</p><h2><span id="ru-cui-lu"> 入催率</span><a href="#ru-cui-lu" class="header-anchor">#</a></h2><p>有了前面的铺垫，入催率就比较简单了。它指的是在某一个还款日，客户从M0变成M1的比例。比如说，今天，有N个M0客户到了还款日，里面有M个客户按时还款了，那么今天的入催率就是（N-M）/N。它与上面的FPD是有区别的。</p><h2><span id="yu-qi-shi-jian"> 逾期时间</span><a href="#yu-qi-shi-jian" class="header-anchor">#</a></h2><p>DPD、M0（未逾期）、M1（逾期一个月类）、M2（逾期两个月内）。。。</p><p>一般M3+就要委外了，M6+(180天以上)就要记为坏账了。</p><h1><span id="vintage-cheng-shou-qi"> <strong>vintage 成熟期</strong></span><a href="#vintage-cheng-shou-qi" class="header-anchor">#</a></h1><p>其实就是<code>逾期率</code>随着<code>账龄</code>变化的趋势图。常见的作用有：</p><ul><li><code>逾期率</code>：vintage的纵轴随着横轴账龄的增大肯定是变大的，最终的平稳后的逾期率（最大值）就是<code>逾期率</code>。（有资产逾期率、账户逾期率两种口径）</li><li><code>欺诈</code>：如果前两期逾期率陡增，短期风险没处理好，是欺诈（特别是第一期就违约的）</li><li><code>信用风险</code>：如果一直上升、很久不拐，说明信用风险控制不太好。</li><li><code>成熟期</code>：</li><li><code>因素判断</code>：风险策略变化、客群变化、市场环境、政策法规变化时，资产质量的变化。（看vintage曲线的波动）</li></ul><h2><span id="guan-cha-dian-yu-biao-xian-qi"> 观察点与表现期：</span><a href="#guan-cha-dian-yu-biao-xian-qi" class="header-anchor">#</a></h2><ul><li><p><code>观察点、观察期、表现期</code>：通常是在整个MOB中选取一个月份作为观察点，前面的期限是<code>观察期</code>，后面的期限是<code>表现期</code>。也就是在时间轴上选取一个点，这个点是观察点。前面的是观察期，后面的是表现期。</p></li><li><p>表现期越长，信用风险暴露将越彻底，但意味着观察期离当前越远，用以提取样本特征的历史<strong>数据将越陈旧</strong>，建模<strong>样本和未来样本的差异也越大</strong>。(模型PSI高)</p></li><li><p>反之，表现期越短，风险还<strong>未暴露完全，但好处是能用到更近的样本</strong>。（模型PSI低）</p></li></ul><h2><span id="vintage-ju-li"> vintage举例</span><a href="#vintage-ju-li" class="header-anchor">#</a></h2><p>下面是求是汪大佬的一个例子：</p><p>对于一个12期分期还款的信贷产品，理论上当用户在<strong>12期结束，并还清所有的钱后</strong>，我们才能定义为绝对的<strong>好客户</strong>；反之，我们只能说<strong>到目前为止是一个好客户</strong>，但并不能知道未来几期用户会不会逾期不还钱。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/v2-855513c1db679f5602e7a189fb9f6b0a_r.jpg" alt="preview"></p><p>汪大佬的这个图中可以看到：</p><ol><li>账龄最长为12个月，代表<strong>产品期限为12期</strong>。</li><li>根据2018年5月放贷的订单完全走完账龄生命周期，而2018年6月却没走完，说明<strong>数据统计时间为2019年6月初</strong>。</li><li>账龄MOB1、MOB2、MOB3的逾期率都为0，说明<strong>逾期指标为M4+（逾期超过90天）风险。</strong></li><li>由放贷月份从2018年1月～12月的账户的最终逾期率都在降低，说明<strong>资产质量在不断提升</strong>，可能是因为风控水平在不断提升。</li><li>2018年5月相对于2018年1～4月的逾期率大幅度下降，说明该阶段风控策略提升明显。</li><li>不同月份放款的M4+在经过9个MOB后开始趋于稳定（后面违约率不再大幅上升），说明<strong>账户成熟期是9个月</strong>。</li></ol><h1><span id="roll-rate-gun-dong-lu"> <strong>roll rate滚动率</strong></span><a href="#roll-rate-gun-dong-lu" class="header-anchor">#</a></h1><h2><span id="gun-dong-lu-ding-yi-zhuang-tai-bian-hua"> 滚动率定义—状态变化</span><a href="#gun-dong-lu-ding-yi-zhuang-tai-bian-hua" class="header-anchor">#</a></h2><p>滚动率：就是从某个观察点之前的一段时间**（观察期）<strong>的</strong>最坏<strong>的状态，向观察点之后的一段时间</strong>（表现期）<strong>的</strong>最坏的**状态的发展变化情况。（就是说从上一状态向下一状态发展的一个度量，说最坏是因为可能用户逾期多笔）</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200524234256482.png" alt="image-20200524234256482"></p><p>滚动率分析的具体操作步骤为：</p><ul><li><p><strong>step 1.</strong> 确定数据源。一般利用客户还款计划表（repayment schedule）。</p></li><li><p><strong>step 2.</strong> 选择观察点，以观察点为截止时间，统计客户在观察期（如过去6个月）的<strong>最长逾期期数</strong>，按最坏逾期状态将用户分为几个层次，如C（未逾期）、M1、M2、M3、M4+。</p></li><li><p><strong>step 3.</strong> 以观察点为起始时间，统计客户在表现期（如未来6个月）的最长逾期期数，按最坏逾期状态将用户分为几个层次，如C、M1、M2、M3、M4+。</p></li><li><p><strong>step 4.</strong> 交叉统计每个格子里的客户数，如图6中表1所示。</p></li><li><p><strong>step 5.</strong> 统计每个格子里的客户占比，如图6中表2所示。</p></li><li><p><strong>step 6.</strong> 为了排除观察点选择时的随机影响，一般会选择多个观察点。重复step1 ～5。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200524234716564.png" alt="image-20200524234716564"></p></li></ul><p>上面的图说明：</p><ol><li>逾期状态为M0的客户，在未来6个月里，有96%会继续保持正常状态，4%会恶化为M1和M2；</li><li>逾期状态为M1的客户，未来有81%会回到正常状态，即从良率为81%，有7%会恶化，13%会保持M1状态；</li><li>逾期状态为M2的客户，从良率为23%，有39%会恶化为M3和M4+；</li><li>逾期状态为M3的客户，从良率为14.7%，有60.7%会恶化为M4+；</li><li>逾期状态为M4+的客户，从良率仅为4%，有80%会继续保持此状态。</li><li>因此，我们认为历史逾期状态为M4+的客户已经坏透了，几乎不会从良。<strong>为了让风控模型有更好的区分能力，需要将客户好坏界限尽可能清晰</strong>(也就是从良率最剧烈减少的点开始)，可以定义：</li></ol>坏用户（bad）= 逾期状态为M4+（即逾期超过90天）<h1><span id="ru-he-que-ding-bad-he-good-biao-qian-de-zhang-ling"> <strong>如何确定bad和good标签的账龄</strong></span><a href="#ru-he-que-ding-bad-he-good-biao-qian-de-zhang-ling" class="header-anchor">#</a></h1><h2><span id="vintage-he-roll-rate-de-qu-bie"> vintage和roll rate的区别：</span><a href="#vintage-he-roll-rate-de-qu-bie" class="header-anchor">#</a></h2><ul><li>滚动率分析用于定义客户的<strong>好坏程度</strong>。(定义标签bad和good)</li><li>Vintage分析用于确定合适的<strong>表现期</strong>。（找到一个合适的观测点，前面的该逾期的已经逾期了，充分暴露了）</li></ul><p>定义目标客户到底是good还是bad的具体操作步骤为：</p><ul><li><strong>step 1.</strong> 利用滚动率分析定义坏客户（找到不会再从良的那个账龄点），例如上文案例中定义：<strong>M4+为坏客户</strong>。（先找到bad和good）</li><li><strong>step 2.</strong> 以M4+作为资产质量指标（上一步找到定义了bad还是good），统计Vintage数据表，绘制Vintage曲线。目的是<strong>分析账户成熟期</strong>（逾期率不再明显增加），例如上文案例确定：<strong>账户成熟期是9个月。</strong></li></ul><p>也有根据迁徙率确定bad还是good的，下面是FAL提到的一个例子：</p><p>由下表可以看出，M2以上的迁徙率将近90%，所以确定当前逾期31天以上为区分好坏客户的标准，及后续分析的目标变量。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525145244445.png" alt="image-20200525145244445"></p><h3><span id="roll-rate-yi-jing-que-ding-liao-bad-wei-shi-me-huan-xu-yao-tong-guo-vintage-fen-xi-lai-que-ding-biao-xian-qi"> roll rate已经确定了bad为什么还需要通过Vintage分析来确定表现期？</span><a href="#roll-rate-yi-jing-que-ding-liao-bad-wei-shi-me-huan-xu-yao-tong-guo-vintage-fen-xi-lai-que-ding-biao-xian-qi" class="header-anchor">#</a></h3><p>这是因为：虽然滚动率分析确定了M4+作为坏的程度（从良率最低），但是对于12期的产品，有些账户是在前4期MOB（也就是MOB1 ~ MOB4，经过4个表现期）就达到M4+，有些是在（观测点前）后几期才达到M4+。而这很重要。</p><h3><span id="vintage-li-suo-you-de-zhang-hu-wo-men-de-mu-de-shi-zhua-zhu-jin-ke-neng-duo-de-pi-ke-hu"> Vintage里所有的账户，我们的目的是抓住尽可能多的坏客户。</span><a href="#vintage-li-suo-you-de-zhang-hu-wo-men-de-mu-de-shi-zhua-zhu-jin-ke-neng-duo-de-pi-ke-hu" class="header-anchor">#</a></h3><p>现在进一步补充Vintage曲线的绘制过程：如图8所示，对于这10,000个账户，以MOB1为起点，把前N个MOB作为一个窗口，滑窗统计坏客户率，得到图5-表1中的Vintage数据，并绘制Vintage曲线。我们可以发现：经过9期，我们几乎能够抓住所有的坏客户。（也就是前9期该逾期的都逾期了，充分暴露了）</p><p>下图是每个用户逾期的不同起止情况举例：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525004119132.png" alt="image-20200525004119132"></p><p>因此，我们将两者结合起来，定义：</p><ul><li>Bad = 账户经过9期表现期后，逾期状态为M4+（逾期超过90天）。此时 <strong>Y=1</strong>。</li><li>Good = 经过9期表现期，但未达到M4+逾期状态。此时<strong>Y=0</strong>。</li><li>Intermediate = 未进入9期表现期，账户还未成熟，无法定义好坏，也就是不定样本。</li></ul><p><strong>有时候也考虑到这么干的话，bad用户会太少，会往上移动到M3,同时因为前面的good用户要和bad做一个截断。比如M1以内的都是good，m3+的都是bad，m2的忽略截断。</strong></p><h1><span id="flow-rate-qian-yi-lu"> <strong>Flow Rate迁移率</strong></span><a href="#flow-rate-qian-yi-lu" class="header-anchor">#</a></h1><p>展示客户贷款账户在整个生命周期中的变化轨迹，也是<strong>预测未来坏账损失</strong>的最常用的方法。</p><p>其<strong>核心假设</strong>为：处于某一逾期状态（如M2）的账户，一个月后，要么从良为M0账户，要么恶化为更坏的下一个逾期状态（如M3）。</p>迁移率 = 前一期逾期金额到下一期逾期金额的转化率<p>一般缩写为M0-M1、M4-M5等形式，例如：</p><ul><li>M0-M1 = 当月进入M1的贷款余额 / 上月末M0的贷款余额</li><li>M2-M3 = 当月进入M3的贷款余额 / 上月末M2的贷款余额</li></ul><p>迁移率分析的具体操作步骤为：</p><ul><li><strong>step 1.</strong> 定义逾期状态，如前文所述的M0、M1、M2等。</li><li><strong>step 2.</strong> 计算各逾期状态之间的迁移率，如M0-M1、M2-M3等。</li><li><strong>step 3.</strong> 计算不同月份（也可称为Vintage）的<strong>平均迁移率</strong>。目的是对本平台在不同时期的资产的迁移率有整体的认知。</li><li><strong>step 4.</strong> 根据<strong>平均迁移率</strong>和<strong>不良资产回收率</strong>，计算<strong>净坏账损失率</strong>。</li></ul><p>接下来，我们以数值案例（非真实业务数据）展示上述过程。</p><p>下面表1，每一列代表<strong>截止当月</strong>放款的总额M0一直到M6的情况，每一行代表1-7月的各个月对应周期的违约率,所以斜线是前后时间序列关系：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525005348841.png" alt="image-20200525005348841"></p><p>上图表2中，2月份的逾期M1资产只能从1月份的正常M0资产滚动而来（斜线迁移），因此从逾期M0资产向M1的转化率为:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>2</mn><mn>3</mn><mn>7</mn><mn>3</mn><mn>3</mn><mn>8</mn></mrow><mrow><mn>1</mn><mn>0</mn><mn>0</mn><mn>7</mn><mn>8</mn><mn>4</mn><mn>4</mn></mrow></mfrac><mo>=</mo><mn>2</mn><mn>3</mn><mi mathvariant="normal">.</mi><mn>5</mn><mn>5</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">\frac{237338}{1007844}=23.55\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.32144em;"></span><span class="strut bottom" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">7</span><span class="mord mathrm">8</span><span class="mord mathrm">4</span><span class="mord mathrm">4</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">3</span><span class="mord mathrm">7</span><span class="mord mathrm">3</span><span class="mord mathrm">3</span><span class="mord mathrm">8</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathrm">2</span><span class="mord mathrm">3</span><span class="mord mathrm">.</span><span class="mord mathrm">5</span><span class="mord mathrm">5</span><span class="mord mathrm">%</span></span></span></span></span></p><ul><li>截止1月末，正常M0资产为 1007844 元，这是起点。</li><li>截止2月末，1月末的正常M0资产中有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>2</mn><mn>3</mn><mn>7</mn><mn>3</mn><mn>3</mn><mn>8</mn></mrow><mrow><mn>1</mn><mn>0</mn><mn>0</mn><mn>7</mn><mn>8</mn><mn>4</mn><mn>4</mn></mrow></mfrac><mo>=</mo><mn>2</mn><mn>3</mn><mi mathvariant="normal">.</mi><mn>5</mn><mn>5</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">\frac{237338}{1007844}=23.55\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.845108em;"></span><span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="base textstyle uncramped"><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathrm">1</span><span class="mord mathrm">0</span><span class="mord mathrm">0</span><span class="mord mathrm">7</span><span class="mord mathrm">8</span><span class="mord mathrm">4</span><span class="mord mathrm">4</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.394em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord mathrm">2</span><span class="mord mathrm">3</span><span class="mord mathrm">7</span><span class="mord mathrm">3</span><span class="mord mathrm">3</span><span class="mord mathrm">8</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathrm">2</span><span class="mord mathrm">3</span><span class="mord mathrm">.</span><span class="mord mathrm">5</span><span class="mord mathrm">5</span><span class="mord mathrm">%</span></span></span></span> 恶化为逾期M1资产。【较低，因为有不小心逾期的】</li><li>截止3月末，2月末的逾期M1资产中有 \frac{55362}{237338}=23.33%恶化为逾期M2资产。【较低，因为有不小心逾期的】</li><li>截止4月末，3月末的逾期M2资产中有 \frac{25144}{55362}=45.32% 恶化为逾期M3资产。【翻倍上升了】</li><li>截止5月末，4月末的逾期M4资产中有83.38%恶化为逾期M5资产。此时已过催收黄金期（90天以内）。【大幅上升！】</li><li>截止6月末，5月末的逾期M5资产中有49.37% 恶化为逾期M6资产。这可能采用了<strong>委外催收、司法手段</strong>等催收策略，效果显著。【从80+%下降到49%】</li><li>截止7月末，6月末的逾期M5资产中有82.7% 恶化为逾期M7资产。此时将视为不良资产，打包转卖给第三方公司，这样就能回收部分不良资产，减少损失【没救了】</li></ul><p>我们从横向比较每个月的迁移率，发现不完全一样。这是因为随着<strong>时间推移、外在宏观经济环境、用户渠道、内部政策、资产质量</strong>等变化而产生一定的波动。我们可以利用这些数据：</p><ol><li>观察迁移率的发展轨迹，<strong>监控坏账的发展倾向和催收效果。</strong></li><li>通过对多个月份的迁移率计算平均值，从而使迁移率更加稳定。</li></ol><h1><span id="pi-zhang-zhun-bei-jin"> <strong>坏账准备金</strong></span><a href="#pi-zhang-zhun-bei-jin" class="header-anchor">#</a></h1><h2><span id="pi-zhang-zhun-bei-jin-de-gai-nian-ge-qi-yu-qi-yu-e-cheng-yi-ge-zi-zhun-bei-jin-lu"> 坏账准备金的概念----各期逾期余额乘以各自准备金率</span><a href="#pi-zhang-zhun-bei-jin-de-gai-nian-ge-qi-yu-qi-yu-e-cheng-yi-ge-zi-zhun-bei-jin-lu" class="header-anchor">#</a></h2><p>呆帐风险是信贷机构必须面对的风险，主要来源于信用风险和欺诈风险等。为了应对未来呆帐的可能，信贷机构一般都会设定一个储备资金，这就是**坏账准备金（Bad Debt Reserve）。**那么我们该如何计算坏账准备金？</p><p>一般做法是，把未清偿贷款余额乘以一定的**准备金比例（Reserve Ratio）**所得。可以理解，<strong>资产逾期等级越高（越差），准备金比例也应该越高</strong>，因为恶化为呆帐的可能性也更高。如图10所示，正常M0资产恶化为呆帐的可能性最低，因此我们预留的准备金比例也就最少。</p><p>我们总结下计算坏账准备金的步骤为：</p><ul><li><strong>step 1.</strong> 统计未清偿贷款金额的分布，也就是<strong>M0~M6状态分别对应的资产余额</strong>。</li><li><strong>step 2.</strong> 为每个逾期状态的资产分配一个<strong>准备金比例</strong>。</li><li><strong>step 3.</strong> 每个子项目的准备金金额 = 未清偿贷款余额 x 准备金比例。</li><li><strong>step 4.</strong> 每个子项目的准备金金额相加，得到最终的准备金。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525011045787.png" alt="image-20200525011045787"></p><h2><span id="zhun-bei-jin-bi-li"> 准备金比例</span><a href="#zhun-bei-jin-bi-li" class="header-anchor">#</a></h2><p>准备金比例是如何给出的？</p><p>由于坏账准备金是用来覆盖预期的未来呆帐损失的，<strong>准备金比例必须等于处于各个逾期状态的资产未来演变为呆帐的比例</strong>。</p><p>回到上一节的迁移率分析中，我们发现从正常M0资产迁移至逾期M7资产（呆帐）需经过7次迁移，如图11所示。那么，我们只要把各个状态之间的转化率相乘，不就得到准备金比例了？</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525011316858.png" alt="image-20200525011316858"></p><p>因此，我们定义<strong>正常M0资产对应的毛坏账损失率，<strong>也就是迁移到呆帐的转化率为</strong>：</strong></p>毛坏账损失率 = (M0-M1)×(M1-M2)×(M2-M3)...×(M6-M7)<p>也就是从M0一直到M7的平均迁移率的乘积。</p><p>在本案例中，正常M0资产对应的毛坏账损失率为上上图表2最左侧截止M6-M7的平均迁移率88.03%上面所有的乘起来：0.60%</p><p>在实际中，信贷机构会将不良资产打包转卖给第三方公司，这样就能回收部分不良资产，减少损失。因此，我们定义净坏账损失率为：</p><blockquote><p>净坏账损失率 = 毛坏账损失率 - 不良资产外卖回收率</p></blockquote><p>由于M7不良资产的平均回收率为 <strong>10.79%</strong>，则可计算<strong>净坏账损失率</strong>为：</p><blockquote><p>0.60%×(1-10.79%)=0.54%</p></blockquote><p>同理，我们可以计算正常资产到不同逾期状态资产的毛损失率和净损失率如下：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525012050344.png" alt="image-20200525012050344"></p><p>根据图12所示的损失率表，我们定义：</p><ul><li>当月应计拨备额 = SUM(净坏账损失率 * 月末应收账款余额)</li><li>拨备率 = 当月应计拨备额 / 总资产金额</li></ul><p>其中，拨备率是用来预防不良资产的发生而准备的金额的比例。拨备率应越低越好。<strong>拨备率越高说明风险越大，损失越大，利润越小。</strong></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525012132819.png" alt="image-20200525012132819"></p><p>在本案例中，当月应计拨备额为65421元，如图13所示。拨备率为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>6</mn><mn>5</mn><mn>4</mn><mn>2</mn><mn>1</mn></mrow><mrow><mn>2</mn><mn>6</mn><mn>2</mn><mn>5</mn><mn>0</mn><mn>9</mn><mn>1</mn></mrow></mfrac><mo>=</mo><mn>2</mn><mi mathvariant="normal">.</mi><mn>4</mn><mn>9</mn><mi mathvariant="normal">%</mi></mrow><annotation encoding="application/x-tex">\frac{65421}{2625091}=2.49\%</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.32144em;"></span><span class="strut bottom" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm">2</span><span class="mord mathrm">6</span><span class="mord mathrm">2</span><span class="mord mathrm">5</span><span class="mord mathrm">0</span><span class="mord mathrm">9</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">6</span><span class="mord mathrm">5</span><span class="mord mathrm">4</span><span class="mord mathrm">2</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathrm">2</span><span class="mord mathrm">.</span><span class="mord mathrm">4</span><span class="mord mathrm">9</span><span class="mord mathrm">%</span></span></span></span></span></p><h1><span id="zi-chan-zu-he-guan-li-xiang-guan"> 资产组合管理相关</span><a href="#zi-chan-zu-he-guan-li-xiang-guan" class="header-anchor">#</a></h1><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525100003972.png" alt="image-20200525100003972"></p><p>根据风控成因分类：信用风险、欺诈风险。信用风险主要是用户因为各种原因导致逾期而存在的风险，欺诈风险就是黑产欺诈团队的攻击对公司造成的风险，通过设置规则来拦截高风险用户。</p><p>生命周期分为三类：</p><ol><li>拓展客户期（学校刚成立时，既要招生，又要有教材支撑）</li><li>审批客户期（学习成绩、平时表现）</li><li>管理客户期（对学生进行管理）</li></ol><p><strong>拓展客户期</strong>需要三个方面的支持</p><ol><li><p>目标用户：</p><p>适用于拨备segment的风险分级或用户画像支持（拨备与财务挂钩）</p></li><li><p>目标产品：</p><p>风险分级对应期数、利率支持</p></li><li><p>资产配置有效性分析</p></li></ol><p>资金成本、获客成本、运营成本，在放贷还没开始的时候，就已经由资产管理部门估算确定下来了。后续需要技术来创造价值的，主要是风控的坏账成本，所以资产管理部会用拨备工具来给予支持。</p><p>在一个产品刚产生的时候，资产管理部门需要给出关于目标客户的年龄身份，期数，利率的建议；放款后，又需要从其他金融机构拉资金，债权转让等。每一个公司的要求都不一样，我们需要给出推荐，哪一些标的推荐给哪一些公司，如何进行资源组合配置。</p><p><strong>审批客户期</strong></p><p>主要由贷前策略实施，资产组合管理部门可提供<strong>盈利性测算支持，并做好监控、预测、预警系统，当准入用户风险状况超阈值，需提出干预。</strong></p><p><strong>资金成本、获客成本、运营成本</strong>，在<strong>放贷还没开始</strong>的时候，就已经由<strong>资产管理部门估算</strong>确定下来了。后续需要技术来创造价值的，主要是<strong>风控的坏账成本</strong>，所以资产管理部会用<strong>拨备工具</strong>来给予支持。</p><p>在一个产品刚产生的时候，**资产管理部门需要给出关于目标客户的年龄身份，期数，利率的建议；**放款后，又需要从其他金融机构拉资金，债权转让等。每一个公司的要求都不一样，我们需要给出推荐，<strong>哪一些标的推荐给哪一些公司，如何进行资源组合配置。</strong></p><p><strong>审批客户期</strong></p><p>主要由贷前策略实施，资产组合管理部门可提供盈利性测算支持，并做好监控、预测、预警系统，当准入用户风险状况超阈值，需提出干预。</p><p><strong>管理客户期</strong></p><p>1.指标方面：新增/存量、风险/规模指标</p><table><thead><tr><th></th><th>风险</th><th>规模</th></tr></thead><tbody><tr><td>新增</td><td>vintage、FPD</td><td>GMV</td></tr><tr><td>存量</td><td>roll rate、coincident dpd、lagging dpd、badrate</td><td>在贷余额</td></tr></tbody></table><p>2.策略方面：主要由贷中贷后策略实施，可提供盈利性测算支持，并做好监控、预测、预警系统，风险状况超阈值，需提出干预。</p><p><strong>资产组合管理作为支撑部门，支撑什么</strong>？</p><ol><li>风险计量</li><li>策略规则上线</li><li>模型效力验证</li><li>向CRO提供各种专题类或临时性分析</li><li>…</li></ol><p>风险计量主要是数据分析，报表，专题性报告，为了规避、减少风险，策略实施者和策略制定者需要分为2个部门。资产管理部门接到业务部门提交的需求，然后根据内容做一些空跑，监控。同时大的模型开发与模型验证也是两个部门，需要资产管理部对模型做持续的监控与评估。统筹贷前、贷中、贷后的数据给到CRO。</p><p><strong>资产组合管理方法？</strong></p><p>1.拨备准备金</p><p>思考：实际风险与名义风险的区别？</p><p>2.风险分级(用户画像)</p><p>思考：有了评分卡模型为什么还要做风险分级?</p><p>3.监控、预测、预警系统</p><p>思考：资产组合管理报表和业务部门（贷前、中、后）的不同点？</p><p><strong>本次分享总结</strong></p><p>1.资产组合管理部门不同于传统的风控业务部门，而是直属于CRO的信息整合部门；</p><p>2.资产组合管理贯穿于客户及产品的全生命周期，需要从业者极强的沟通能力；</p><p>3.作为支撑部门，资产组合管理部需要运用数据分析把控公司全局资产质量，除此之外还需要以降低作业风险的目的为模型或策略设置二次防线。</p><p>4.资产组合管理部门是小白进入金融风控核心岗位的捷径，可以快速的积累风控经验，之后如果转岗策略或模型，都比较容易。</p><h1><span id="can-kao-wen-zhang-lian-jie"> 参考文章链接：</span><a href="#can-kao-wen-zhang-lian-jie" class="header-anchor">#</a></h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/81027037/" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/81027037/</a></p><p><a href="https://blog.csdn.net/liulj_0803/article/details/52964473" target="_blank" rel="noopener">https://blog.csdn.net/liulj_0803/article/details/52964473</a></p><p><a href="https://www.zhihu.com/question/51583052" target="_blank" rel="noopener">https://www.zhihu.com/question/51583052</a>  这里也有很多干货</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;mu-lu&quot;&gt; 目录&lt;/span&gt;&lt;a href=&quot;#mu-lu&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="risk" scheme="https://blog.sofunnyai.com/categories/risk/"/>
    
    
      <category term="risk" scheme="https://blog.sofunnyai.com/tags/risk/"/>
    
      <category term="评分卡" scheme="https://blog.sofunnyai.com/tags/%E8%AF%84%E5%88%86%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud组件01---CAP、注册中心、Ribbon实践</title>
    <link href="https://blog.sofunnyai.com/article/springcloud-H-01-eureka-ribbon.html"/>
    <id>https://blog.sofunnyai.com/article/springcloud-H-01-eureka-ribbon.html</id>
    <published>2020-03-02T14:30:40.000Z</published>
    <updated>2020-06-02T06:36:58.717Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#cap-li-lun-kuai-su-jian-jie">CAP理论快速简介</a><ul><li><a href="#wei-fu-wu-de-tong-yong-ding-yi">微服务的通用定义：</a></li><li><a href="#ben-ci-ce-shi-ban-ben">本次测试版本：</a></li><li><a href="#fen-bu-shi-fu-wu-bao-gua-de-zu-jian">分布式服务包括的组件</a></li></ul></li><li><a href="#huan-jing-da-jian">环境搭建</a><ul><li><a href="#zhi-fu-zi-module-jian-li">支付子module建立：</a></li></ul></li><li><a href="#idea-zi-dong-re-bu-shu-pei-zhi-ke-xuan">IDEA自动热部署配置（可选）</a></li><li><a href="#guan-yu-resttemplate">关于RestTemplate</a></li><li><a href="#zhu-ce-zhong-xin">注册中心</a><ul><li><a href="#eureka-fu-wu-zhu-ce">EUREKA服务注册</a><ul><li><a href="#gong-zuo-liu-cheng">工作流程</a></li><li><a href="#server-pei-zhi">Server配置</a></li><li><a href="#client-pei-zhi">client配置</a></li><li><a href="#eureka-gao-ke-yong-ji-qun">EUREKA高可用集群</a></li><li><a href="#fu-wu-ji-qun">服务集群</a></li><li><a href="#zi-wo-bao-hu">自我保护</a></li></ul></li><li><a href="#discovery">Discovery</a></li><li><a href="#zookeeper-fu-wu-zhu-ce">Zookeeper服务注册</a><ul><li><a href="#zhu-ru-diao-yong-fang">注入调用方</a></li><li><a href="#zk-ke-hu-duan-he-server-jar-bao-chong-tu">zk客户端和server jar包冲突</a></li></ul></li><li><a href="#consul-fu-wu-zhu-ce">Consul服务注册</a><ul><li><a href="#jian-jie">简介</a></li><li><a href="#fu-wu-duan-zhu-ce">服务端注册</a></li><li><a href="#ke-hu-duan-zhu-ce">客户端注册</a></li></ul></li><li><a href="#eureka-zookeeper-consul-de-dui-bi">Eureka、Zookeeper、Consul的对比</a></li></ul></li><li><a href="#ribbon">Ribbon</a><ul><li><a href="#ribbon-jian-jie">Ribbon简介</a></li><li><a href="#ribbon-de-fu-zai-jun-heng-ce-lue">Ribbon的负载均衡策略</a><ul><li><a href="#qi-ta-fu-zai-jun-heng-suan-fa">其他负载均衡算法：</a></li></ul></li><li><a href="#zi-ding-yi-gui-ze">自定义规则</a><ul><li><a href="#zhu-yi-shi-xiang">注意事项：</a></li></ul></li><li><a href="#yuan-shi-de-lun-xun-gui-ze">原始的轮询规则</a></li><li><a href="#ding-yi-shou-dong-shi-xian-yi-ge-fu-zai-jun-heng">定义手动实现一个负载均衡</a></li><li><a href="#dong-shou-shi-xian-yi-ge-zi-ding-yi-ribbon-ce-lue">动手实现一个自定义ribbon策略</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="cap-li-lun-kuai-su-jian-jie"> CAP理论快速简介</span><a href="#cap-li-lun-kuai-su-jian-jie" class="header-anchor">#</a></h1><ul><li>CAP理论关注的是粒度是数据，而不是整体系统设计。</li><li>Consistency（强一致性）</li><li>Availability（高可用性）</li><li>Partition Tolerance（分区容错性）</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200531234138010.png" alt="image-20200531234138010"></p><ul><li>以上三个最多只能较好满足两个，一个系统不可能同时满足这三个需求。<ul><li>CA：单点集群，满足一致性和高可用，通常在可拓展性上不强大。</li><li>CP：满足一致性，分区容忍度。通常性能不太高。<ul><li>当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性。（违背A高可用）</li><li>Consul和Zk，更关注一致性，不在了很快就给干掉，但不是立刻。</li></ul></li><li>AP：满足可用性和分区容忍度，通常对一致性要求较低。<ul><li>当网络分区出现后，为了保证可用性，B系统可以返回旧的值，优先保证可用。（违背C一致性）</li><li>Eureka，不会立刻踢掉服务</li></ul></li></ul></li><li>分布式架构的P永远都要保证</li></ul><p>图例</p><ul><li>AP：如微博热门微博点赞数，后续柔性理论和base数据补充来保证一致性</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200531235033177.png" alt="image-20200531235033177"></p><ul><li>CP：</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200531235338672.png" alt="image-20200531235338672"></p><h2><span id="wei-fu-wu-de-tong-yong-ding-yi"> 微服务的通用定义：</span><a href="#wei-fu-wu-de-tong-yong-ding-yi" class="header-anchor">#</a></h2><p>是一种架构模式，提倡将单一应用划分成一组轻量级的微服务互相调用和配合，基于restful，并可以独立部署。</p><p>是一整套的较量，不是单个的组件。</p><h2><span id="ben-ci-ce-shi-ban-ben"> 本次测试版本：</span><a href="#ben-ci-ce-shi-ban-ben" class="header-anchor">#</a></h2><p>springboot 2.2.x+版本  spring cloud H版。如果cloud是G，boot对应2.1具体：</p><ul><li><p>boot 2.2.2.RELEASE：</p></li><li><p>CLOUD Hoxton.SR1</p></li><li><p>Cloud Alibaba 2.1.0.RELEASE</p></li></ul><h2><span id="fen-bu-shi-fu-wu-bao-gua-de-zu-jian"> 分布式服务包括的组件</span><a href="#fen-bu-shi-fu-wu-bao-gua-de-zu-jian" class="header-anchor">#</a></h2><ul><li>服务注册与发现：eureka，现在不维护了。zk、Consul(golang不推荐)、用alibaba的Nacos(推荐)</li><li>服务调用：Ribbon(维护状态)，后续LoadBalancer。Feign用OpenFeign。</li><li>服务熔断：hystrix(维护状态，但是大规模，思想需要学习)，resilience4j(海外，国内很少)，alibaba sentienl（推荐）</li><li>负载均衡：fegin</li><li>服务降级：hystrix</li><li>服务消息队列：</li><li>配置中心管理：config，推荐携程的阿波罗，或者alibaba的Nacos(推荐)</li><li>服务网关：zuul，现在用cloud gateway</li><li>服务监控</li><li>总线：bus—&gt;alibaba  Nacos</li><li>全链路监控</li><li>自动化部署</li><li>服务定时操作</li><li>分布式配置：cloud config</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200530223603142.png" alt="image-20200530223603142"></p><h1><span id="huan-jing-da-jian"> 环境搭建</span><a href="#huan-jing-da-jian" class="header-anchor">#</a></h1><ul><li>idea里面new-project-maven_architect_site</li><li>设置项目encoding  utf-8</li><li>设置项目 settings-annotation processor- 勾选 enable annotation prosessing</li><li>设置java-compile是1.8</li><li>设置pom：maven项目的的聚合、依赖、传递依赖<ul><li>父工程，project根目录下的pom文件修改maven，添加packaging标签为pom。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dependencyManagement用在父工程，子模块继承后，提供作用：锁定版本、子module都引用一个依赖，而不用写version。<br>dependencyManagement用在父工程只是声明版本依赖，并不真的引用。真正的是要子项目自己引用group和artifactid即可，不用指定版本号自动用父类的。</p><h2><span id="zhi-fu-zi-module-jian-li"> 支付子module建立：</span><a href="#zhi-fu-zi-module-jian-li" class="header-anchor">#</a></h2><ul><li>建module：在父工程右键新建module，新建完了之后父工程上会有<code>&lt;module&gt;</code>引入了</li><li>改pom</li><li>写yml</li><li>主动启动类</li><li>业务类</li></ul><h1><span id="idea-zi-dong-re-bu-shu-pei-zhi-ke-xuan"> IDEA自动热部署配置（可选）</span><a href="#idea-zi-dong-re-bu-shu-pei-zhi-ke-xuan" class="header-anchor">#</a></h1><ul><li><p>在子项目工程pom中添加devtools依赖包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加插件到父聚合项目的pom中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>开启自动编译</p></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200531140623420.png" alt="image-20200531140623420"></p><ul><li><p>更新值</p><p><code>ctrl+alt+shift+/-----registry</code>，勾选允许自动编译：</p><p>勾选下面两个选项</p></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200531141004199.png" alt="image-20200531141004199"></p><ul><li>重启idea</li></ul><h1><span id="guan-yu-resttemplate"> 关于RestTemplate</span><a href="#guan-yu-resttemplate" class="header-anchor">#</a></h1><ul><li>getForObjec：返回Json对象，或者Json字符串可以格式化为对象。</li><li>getForEntity：返回ResponseEntity，除了数据，还包括网络层面的状态码、响应头等东西。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601002520722.png" alt="image-20200601002520722"></p><p>RestTemplate已经被Springcloud深度定制，底层可以支持各种客户端负载均衡策略支持，也支持自定义负载均衡策略。</p><h1><span id="zhu-ce-zhong-xin"> 注册中心</span><a href="#zhu-ce-zhong-xin" class="header-anchor">#</a></h1><h2><span id="eureka-fu-wu-zhu-ce"> EUREKA服务注册</span><a href="#eureka-fu-wu-zhu-ce" class="header-anchor">#</a></h2><p>传统一对第一调用，太多的时候就是网状的，需要每个客户端都去维护对端服务信息。无法统一管理，非常乱。</p><ul><li>EUREKA作为一个注册中心的server，系统中其他services都向他链接注册并维持心跳。</li><li>这样EUREKA就能知晓所有的services的信息，就像一个电话号码本。其他service想互相调用可以来这里用service别名来询问当前可用的对端地址。</li><li>下面左边是SpringCloud，右边是Dubbo。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200531165250671.png" alt="image-20200531165250671"></p><ul><li>EUREKA分为Server和Client两个组件：<ul><li>Server提供一个监听，供给其他cloud所有service进来连接。</li><li>Client是一个Java客户端，简化与Server的交互，是一个内置、轮循的负载均衡器。默认30s向Server发送一次心跳。如果Server多伦没有收到心跳就把这个节点移除。(默认90s)</li></ul></li><li>EUREKA已经停止更新，后续需要迁移到别的技术栈，比如zk、consl、nacos。</li></ul><h3><span id="gong-zuo-liu-cheng"> 工作流程</span><a href="#gong-zuo-liu-cheng" class="header-anchor">#</a></h3><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200531183332365.png" alt="image-20200531183332365"></p><h3><span id="server-pei-zhi"> Server配置</span><a href="#server-pei-zhi" class="header-anchor">#</a></h3><p>pom.xml</p><p>2.2版本后，eureka分为server和client了，此处是server。</p><p>不用指定版本，因为父module中指定了版本。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka server--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment"># erureka</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 自己仅仅作为注册中心，不去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p>Server的main类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="client-pei-zhi"> client配置</span><a href="#client-pei-zhi" class="header-anchor">#</a></h3><p>pom.xml  同上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面的eureka-client会自动引入ribbon--&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment"># 是否注册到eureka server 默认true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># 是否从eureka抓取已注册的信息，true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p>Client的main类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="eureka-gao-ke-yong-ji-qun"> EUREKA高可用集群</span><a href="#eureka-gao-ke-yong-ji-qun" class="header-anchor">#</a></h3><p>高可用原理：<strong>相互注册，相互守望。</strong></p><p>比如7001和7002有两个EUREKA，会互相注册到对方那边去。互相心跳监控。</p><ul><li>两台EUREKA的yml配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># erureka另一个节点的ip，互相注册  如192.168.1.2:7001  &lt;---&gt;  192.168.1.3:7002,此处就应该写192.168.1.2</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 自己仅仅作为注册中心，不去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 下面应该注册到另外一台eureka，也就是http://192.168.1.3:7002/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment"># erureka另一个节点的ip，互相注册  如192.168.1.2:7001  &lt;---&gt;  192.168.1.3:7002,此处就应该写192.168.1.3</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 自己仅仅作为注册中心，不去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span>  <span class="comment"># 集群模式下，下面应该注册到另外一台eureka，也就是http://192.168.1.2:7001/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure><ul><li>客户端的yml配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span> <span class="comment"># 是否注册到eureka server 默认true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment"># 是否从eureka抓取已注册的信息，true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,eureka7002.com:7002/eureka</span>  <span class="comment"># EUREKA是集群</span></span><br></pre></td></tr></table></figure><h3><span id="fu-wu-ji-qun"> 服务集群</span><a href="#fu-wu-ji-qun" class="header-anchor">#</a></h3><p>当一个服务在多台机器上运行，注册到一个EUREKA中后，在EUREKA上可以看到服务的多个ip列表用逗号隔开的。</p><p>这时候假设客户端还是使用<code>restTemplate</code>请求的，不能写死对端服务的ip和端口，可以写EUREKA中的服务名。</p><p>这样<strong>消费端不再关注提供方的地址，而且有负载均衡功能</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    private String url = "http://localhost:8001";   // 单机</span></span><br><span class="line"><span class="keyword">private</span> String url = <span class="string">"http://CLOUD-PAYMENT-SERVICE"</span>;   <span class="comment">// cloud服务名，会UNKWNON HOST，需要给restTemplate开启LoadBalanced</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * post http://localhost:8080/customer/payment/add?serial=cus_lalala</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> payment</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/customer/payment/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(url+<span class="string">"/payment/add"</span>, payment, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;   <span class="comment">//</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是因为服务方是多个节点，所以需要<code>restTemplate</code>开启负载均衡功能去调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类似&lt;bean id="xxx", class="xxxx"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">//这个注解可以负载均衡，也可以把host地址由一个cloud的application-name去zookeeper转换为ip和端口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="zi-wo-bao-hu"> 自我保护</span><a href="#zi-wo-bao-hu" class="header-anchor">#</a></h3><ul><li>一句话描述：某时刻某个微服务不能用了，Eureka不会立刻清理，依旧会对该服务的信息进行保存。</li><li>为什么？防止Eureka Server网络不通，但是Eureka Client正常运行的时候，EurekaServer不会立刻把EurekaClient剔除。</li><li>详细：默认30s一次，当90s没收到心跳就该干掉，但是如果短时间内大量丢失客户端时，这个节点就会进入自我保护机制。（此时可能大量客户端都是正常的，很可能是网络分区故障）</li></ul><p>属于CAP里面的AP分支。（高可用、分区容错性）</p><p>server端关闭自我保护，修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我保护，客户端90s没心跳立马干掉</span></span><br><span class="line">  <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">60000</span></span><br></pre></td></tr></table></figure><h2><span id="discovery"> Discovery</span><a href="#discovery" class="header-anchor">#</a></h2><p>主启动类，开启Discovery的能力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//主启动类，开启Discovery的能力</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller，注入，获取服务和实例信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/discovery"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Object&gt; <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-------------Services--------------"</span>);</span><br><span class="line">        discoveryClient.getServices().forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">"-------------Instances--------------"</span>);</span><br><span class="line">        List&lt;String&gt; instances = discoveryClient.getInstances(<span class="string">"CLOUD-PAYMENT-SERVICE"</span>).stream().map(each-&gt;each.getInstanceId()+<span class="string">"/"</span>+each.getHost()+<span class="string">":"</span>+each.getPort()+<span class="string">"/"</span>+each.getUri()).collect(Collectors.toList());</span><br><span class="line">        instances.forEach(System.out::println);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"services"</span>, discoveryClient.getServices());</span><br><span class="line">        map.put(<span class="string">"instances"</span>, instances);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="string">"discovery"</span>,map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2><span id="zookeeper-fu-wu-zhu-ce"> Zookeeper服务注册</span><a href="#zookeeper-fu-wu-zhu-ce" class="header-anchor">#</a></h2><p>zookeeper使用临时节点存储服务的信息，一会儿心跳不出现就会干掉这个节点（不是立马干掉）。是CAP的CP，和EUREKA不太一样。</p><p>服务引入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--zookeeper client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml只有几行不一样，指定zookeeper的连接字符串即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span> <span class="comment"># 启动基于zookeeper的服务注册</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure><p>主启动类，使用DescoveryClient即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentZkMain8004</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于zk的服务提供方，访问/payment/zk即可看到测试效果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentZkMain8004<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 7] ls /</span><br><span class="line">[services, zookeeper]</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 8] ls /services</span><br><span class="line">[cloud-provider-service]</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 10] ls /services/cloud-provider-service</span><br><span class="line">[ba35208f-59ea-4d70-b75f-857c5a5b0a64]</span><br><span class="line"></span><br><span class="line">[zk: localhost:2181(CONNECTED) 11] get /services/cloud-provider-service/ba35208f-59ea-4d70-b75f-857c5a5b0a64</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"cloud-provider-service"</span>,<span class="string">"id"</span>:<span class="string">"ba35208f-59ea-4d70-b75f-857c5a5b0a64"</span>,<span class="string">"address"</span>:<span class="string">"192.168.1.10"</span>,<span class="string">"port"</span>:8004,<span class="string">"sslPort"</span>:null,<span class="string">"payload"</span>:&#123;<span class="string">"@class"</span>:<span class="string">"org.springframework.cloud.zookeeper.discovery.ZookeeperInstance"</span>,<span class="string">"id"</span>:<span class="string">"application-1"</span>,<span class="string">"name"</span>:<span class="string">"cloud-provider-service"</span>,<span class="string">"metadata"</span>:&#123;&#125;&#125;,<span class="string">"registrationTimeUTC"</span>:1590931922948,<span class="string">"serviceType"</span>:<span class="string">"DYNAMIC"</span>,<span class="string">"uriSpec"</span>:&#123;<span class="string">"parts"</span>:[&#123;<span class="string">"value"</span>:<span class="string">"scheme"</span>,<span class="string">"variable"</span>:<span class="literal">true</span>&#125;,&#123;<span class="string">"value"</span>:<span class="string">"://"</span>,<span class="string">"variable"</span>:<span class="literal">false</span>&#125;,&#123;<span class="string">"value"</span>:<span class="string">"address"</span>,<span class="string">"variable"</span>:<span class="literal">true</span>&#125;,&#123;<span class="string">"value"</span>:<span class="string">":"</span>,<span class="string">"variable"</span>:<span class="literal">false</span>&#125;,&#123;<span class="string">"value"</span>:<span class="string">"port"</span>,<span class="string">"variable"</span>:<span class="literal">true</span>&#125;]&#125;&#125;</span><br><span class="line">[zk: localhost:2181(CONNECTED) 12]</span><br></pre></td></tr></table></figure><h3><span id="zhu-ru-diao-yong-fang"> 注入调用方</span><a href="#zhu-ru-diao-yong-fang" class="header-anchor">#</a></h3><p>pom和application.yml和启动类一模一样，暂时用restTemplate调用，需要config一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">//这个注解可以负载均衡，也可以把host地址由一个cloud的application-name去zookeeper转换为ip和端口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestTemplate template = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>customer的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkCustomerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">"http://cloud-provider-service"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/customer/payment/zk"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">testZkCloud</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(URL+<span class="string">"/payment/zk"</span>, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后可以在zk看到双方：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 26] ls /services</span><br><span class="line">[cloud-customer-order, cloud-provider-service]</span><br></pre></td></tr></table></figure><h3><span id="zk-ke-hu-duan-he-server-jar-bao-chong-tu"> zk客户端和server jar包冲突</span><a href="#zk-ke-hu-duan-he-server-jar-bao-chong-tu" class="header-anchor">#</a></h3><p>有可能client和server的zk jar包不一致会报错，比如客户端太新，服务端太老。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200531213833705.png" alt="image-20200531213833705"></p><p>需要在cloud的zk的starter里面exclude掉zk的包，然后重新引入一个和zkServer版本一致的包即可。</p><h2><span id="consul-fu-wu-zhu-ce"> Consul服务注册</span><a href="#consul-fu-wu-zhu-ce" class="header-anchor">#</a></h2><h3><span id="jian-jie"> 简介</span><a href="#jian-jie" class="header-anchor">#</a></h3><ul><li><p>分布式的<strong>服务注册</strong>和<strong>配置管理</strong>中心(KV存储)，同时提供<strong>控制总线</strong>由golang开发。</p></li><li><p>基于Raft协议，比较简洁。支持健康检查、Http和DNS协议，支持跨数据中心的WAN集群，支持图形界面、跨平台。</p></li><li><p>功能：</p><ul><li>服务发现：Http和DNS两种方式</li><li>健康检查：多种方式，Http、TCP、Docker、Shell定制</li><li>KV存储：K-V存储，可以做配置管理</li><li>可视化界面</li></ul><p>官网下载解压，只有一个consul文件</p><blockquote><p><a href="https://www.consul.io/" target="_blank" rel="noopener">https://www.consul.io/</a></p></blockquote><p>启动参考video：</p></li></ul><blockquote><p><a href="https://learn.hashicorp.com/consul/getting-started/agent" target="_blank" rel="noopener">https://learn.hashicorp.com/consul/getting-started/agent</a></p></blockquote><p>比如<code>consul agent -dev</code>启动</p><p>访问<code>http://localhost:8500</code>查看信息，或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> curl localhost:8500/v1/catalog/nodes <span class="comment"># 获取消息</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"ID"</span>: <span class="string">"890e9cd0-322b-fafc-fe58-33728d41f305"</span>,</span><br><span class="line">        <span class="string">"Node"</span>: <span class="string">"treeMate"</span>,</span><br><span class="line">        <span class="string">"Address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"Datacenter"</span>: <span class="string">"dc1"</span>,</span><br><span class="line">        <span class="string">"TaggedAddresses"</span>: &#123;</span><br><span class="line">            <span class="string">"lan"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">            <span class="string">"lan_ipv4"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">            <span class="string">"wan"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">            <span class="string">"wan_ipv4"</span>: <span class="string">"127.0.0.1"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Meta"</span>: &#123;</span><br><span class="line">            <span class="string">"consul-network-segment"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"CreateIndex"</span>: 10,</span><br><span class="line">        <span class="string">"ModifyIndex"</span>: 11</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3><span id="fu-wu-duan-zhu-ce"> 服务端注册</span><a href="#fu-wu-duan-zhu-ce" class="header-anchor">#</a></h3><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Consul client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--MVC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--业务common类，引用当前项目的版本号--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sam.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--DEV-TOOLS--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentConsulMain8004</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentConsulMain8004<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span> <span class="comment"># 启动基于consul的服务注册</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">        <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure><p>controller只是一个简单的数据模拟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentConsulController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个随机payment即可</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/payment/consul"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">testConsulPayment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Payment payment = <span class="keyword">new</span> Payment();</span><br><span class="line">        payment.setId(RandomUtils.nextLong());</span><br><span class="line">        payment.setSerial(<span class="string">"这是一个模拟的随机payment，"</span>+ RandomStringUtils.randomAlphabetic(<span class="number">16</span>));</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="string">"I'm Consul Client on:"</span>+port,payment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后就可以在上面的ui中看到。</p><h3><span id="ke-hu-duan-zhu-ce"> 客户端注册</span><a href="#ke-hu-duan-zhu-ce" class="header-anchor">#</a></h3><p>pom  application 都一毛一样，config、主启动类、controller和上面zk的一毛一样（因为暂时没用openFeign和ribbon），没啥可写的。</p><h2><span id="eureka-zookeeper-consul-de-dui-bi"> Eureka、Zookeeper、Consul的对比</span><a href="#eureka-zookeeper-consul-de-dui-bi" class="header-anchor">#</a></h2><table><thead><tr><th>组件</th><th>CAP</th><th>对外接口</th></tr></thead><tbody><tr><td>Eureka</td><td>AP</td><td>Http</td></tr><tr><td>Consul</td><td>CP</td><td>Http/DNS</td></tr><tr><td>Zookeeper</td><td>CP</td><td>客户端</td></tr></tbody></table><p>C主要是数据一致，Eureka主要保证高可用。</p><h1><span id="ribbon"> Ribbon</span><a href="#ribbon" class="header-anchor">#</a></h1><h2><span id="ribbon-jian-jie"> Ribbon简介</span><a href="#ribbon-jian-jie" class="header-anchor">#</a></h2><p>是一套<strong>客户端的负载均衡工具</strong>，如链接超时、重试等，配置文件只用列出所有的节点，Ribbon自动基于规则（轮询、随机、响应时间加权等）去链接，也很容易自定义实现负载均衡。</p><p>官网在github，目前也是维护模式了。未来的趋势是Spring的LoadBalancer，但是还很不成熟。</p><ul><li>Ribbon：<ul><li>本地负载均衡，进程内。调用前从注册中心获取服务信息，缓存到JVM，本地负载均衡。</li><li>负载均衡+RestTemplate进行RPC，可以和多种客户端结合。Eureka只是其中之一。</li><li>工作时分两步：<ul><li>先选择注册中心，比如先从注册中心选择一个负担小的Eureka</li><li>根据用户指定的策略，从注册地址取到一个进行。</li></ul></li></ul></li><li>Nginx：是服务端的LB。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601000553582.png" alt="image-20200601000553582"></p><p>新版2.2.x的springcloud的eureka会自动引入ribbon：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--上面的eureka-client会自动引入ribbon--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="ribbon-de-fu-zai-jun-heng-ce-lue"> Ribbon的负载均衡策略</span><a href="#ribbon-de-fu-zai-jun-heng-ce-lue" class="header-anchor">#</a></h2><p>都是IRule的实现，策略模式。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601010519762.png" alt="image-20200601010519762"></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601010535970.png" alt="image-20200601010535970"></p><ol><li>RoundRobinRule： 默认轮询的方式</li><li>RandomRule： 随机方式</li><li>WeightedResponseTimeRule： 根据响应时间来分配权重的方式，响应的越快，分配的值越大。</li><li>BestAvailableRule： 选择并发量最小的方式</li><li>RetryRule： 在一个配置时间段内当选择server不成功，则一直尝试使用subRule的方式选择一个可用的server。</li><li>ZoneAvoidanceRule： 根据性能和可用性来选择。</li><li>AvailabilityFilteringRule： 过滤掉那些因为一直连接失败的被标记为circuit tripped的后端server，并过滤掉那些高并发的的后端server（active connections 超过配置的阈值）</li></ol><h3><span id="qi-ta-fu-zai-jun-heng-suan-fa"> 其他负载均衡算法：</span><a href="#qi-ta-fu-zai-jun-heng-suan-fa" class="header-anchor">#</a></h3><p><a href="http://dubbo.apache.org/zh-cn/docs/source_code_guide/loadbalance.html" target="_blank" rel="noopener">http://dubbo.apache.org/zh-cn/docs/source_code_guide/loadbalance.html</a></p><ul><li><p>LeastActiveLoadBalance：最小活跃数负载均衡算法</p><ul><li>活跃调用越少，说明server性能越高。优先给他。具体实现：每个服务者对应一个活跃数，init的时候大家都为0，收到一个请求+1，处理完毕-1。一段时间后性能最好的机器下降速度最快，优先给他新的请求。</li></ul></li><li><p>ConsistentHashLoadBalance：一致性hash算法</p><ul><li>如nginx的IP hash，把client的ip或者url等进行hash，对同一个client，相同的请求永远在一台机器。</li></ul></li></ul><h2><span id="zi-ding-yi-gui-ze"> 自定义规则</span><a href="#zi-ding-yi-gui-ze" class="header-anchor">#</a></h2><h3><span id="zhu-yi-shi-xiang"> 注意事项：</span><a href="#zhu-yi-shi-xiang" class="header-anchor">#</a></h3><p>自定义ribbon规则类，不能放在@ComponentsScan所能扫描的包和子包内(主启动类和以下所有包)。否则这个配置类会被所有的Ribbon客户端共享，达不到特殊定制化目的。</p><p>注意@ComponentScan 和@SpringBootApplication注解都不要扫描到。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601111454364.png" alt="image-20200601111454364"></p><h2><span id="yuan-shi-de-lun-xun-gui-ze"> 原始的轮询规则</span><a href="#yuan-shi-de-lun-xun-gui-ze" class="header-anchor">#</a></h2><ul><li>默认的那个轮询规则：<ul><li>discoveryClient拿到所有的Server实例，然后搞一个int计数，每次取模决定返回哪个Server。</li><li>里面有自旋锁、AQS，避免重量级锁。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AtomicInteger nextServerCyclicCounter;      <span class="comment">// 注意这里是一个原子型的Integer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">"no load balancer"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            List&lt;Server&gt; reachableServers = lb.getReachableServers();    <span class="comment">// 获取可用的server</span></span><br><span class="line">            List&lt;Server&gt; allServers = lb.getAllServers();   <span class="comment">//所有的server</span></span><br><span class="line">            <span class="keyword">int</span> upCount = reachableServers.size();</span><br><span class="line">            <span class="keyword">int</span> serverCount = allServers.size();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((upCount == <span class="number">0</span>) || (serverCount == <span class="number">0</span>)) &#123;</span><br><span class="line">                log.warn(<span class="string">"No up servers available from load balancer: "</span> + lb);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> nextServerIndex = incrementAndGetModulo(serverCount);           <span class="comment">// 注意，这里调用了下面，使用了一个自旋锁。传入服务器总数量。</span></span><br><span class="line">            server = allServers.get(nextServerIndex);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/* Transient. */</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Next.</span></span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">"No available alive servers after 10 tries from load balancer: "</span></span><br><span class="line">                    + lb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inspired by the implementation of &#123;<span class="doctag">@link</span> AtomicInteger#incrementAndGet()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modulo The modulo to bound the value of the counter.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The next value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> current = nextServerCyclicCounter.get();</span><br><span class="line">            <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">            <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2><span id="ding-yi-shou-dong-shi-xian-yi-ge-fu-zai-jun-heng"> 定义手动实现一个负载均衡</span><a href="#ding-yi-shou-dong-shi-xian-yi-ge-fu-zai-jun-heng" class="header-anchor">#</a></h2><p>步骤：</p><ul><li>ApplicationContextConfig对象上面去掉@LoadBalanced注解（restTemplate上面），否则就会使用ribbon自带的策略</li><li>写一个LoadBalanced接口</li><li>实现接口来一个choose方法，使用discoverClient去根据策略选择一个instance</li><li>在controller的请求时候注入这个负载均衡，choose一个insrance，拿到uri，拼装请求地址。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoadBalancer</span> <span class="keyword">implements</span> <span class="title">ICustomerLoadBalancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger integer = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInstance <span class="title">chooseInstance</span><span class="params">(List&lt;ServiceInstance&gt; instances)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instances == <span class="keyword">null</span> || instances.isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有可用的服务！！！！！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计数器线程安全得+1，对server数量取模</span></span><br><span class="line">        <span class="keyword">int</span> i = incrementAndGet() % instances.size();</span><br><span class="line">        <span class="keyword">return</span> instances.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自选增加，获取下一个值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> curr,next;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            curr = integer.get();</span><br><span class="line">            next = curr &gt; Integer.MAX_VALUE ? <span class="number">0</span> : curr+<span class="number">1</span>;  <span class="comment">// int不能超限</span></span><br><span class="line">            <span class="comment">// 只要没获取到真正的curr，就一直自旋</span></span><br><span class="line">        &#125;<span class="keyword">while</span> (!integer.compareAndSet(curr, next));  <span class="comment">// true之后就中断</span></span><br><span class="line">        System.out.println(<span class="string">"------------------next:"</span>+next);</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller，使用上面的loadbalancer手动获取instance地址url地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试使用自定义手动负载均衡的方式获取</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/customer/payment/lb/get/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getByIdByHanLoadBalancer</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>&#123;</span><br><span class="line">    List&lt;ServiceInstance&gt;instances = discoveryClient.getInstances(<span class="string">"CLOUD-PAYMENT-SERVICE"</span>);</span><br><span class="line">    <span class="comment">// 使用我们的自定义轮循负载均衡器</span></span><br><span class="line">    ServiceInstance instance = myLoadBalancer.chooseInstance(instances);</span><br><span class="line">    <span class="comment">// getForObject 返回Json数据，可以转化为对象</span></span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(instance.getUri()+<span class="string">"/payment/get/"</span>+id, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="dong-shou-shi-xian-yi-ge-zi-ding-yi-ribbon-ce-lue"> 动手实现一个自定义ribbon策略</span><a href="#dong-shou-shi-xian-yi-ge-zi-ding-yi-ribbon-ce-lue" class="header-anchor">#</a></h2><ul><li>自定义策略，实现<code>IRule</code>接口，或者继承自<code>AbstractLoadBalancerRule</code></li><li>在<code>@SpringBootApplication</code>扫描位置外定义一个Config，里面配置我们的自定义策略</li><li>在主启动类加上我们的自定义策略配置</li><li><code>RestTemplate</code>类加上<code>@LoadBalanced</code>注解</li><li>controller正常请求类似</li></ul><p>自定义Rule实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRibbonRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;  <span class="comment">// 获取服务实例用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人工实现一个轮询策略，在主启动类使用了下面的注解引用过来</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RibbonClient</span>(name = "CLOUD-PAYMENT-SERVICE", configuration = MyRibbonRule.class)  //为每个服务定制规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AtomicInteger integer = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义核心方法，挑选主机</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Server&gt; upList = lb.getReachableServers();</span><br><span class="line">            <span class="comment">//List&lt;Server&gt; allList = lb.getAllServers();</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = integer.getAndIncrement();</span><br><span class="line">            System.out.println(<span class="string">"MyRibbonRule----integer-cnt="</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i &gt; Integer.MAX_VALUE)&#123;</span><br><span class="line">                integer.set(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            server = upList.get(i%upList.size());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * The only time this should happen is if the server list were</span></span><br><span class="line"><span class="comment">                 * somehow trimmed. This is a transient condition. Retry after</span></span><br><span class="line"><span class="comment">                 * yielding.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 选了个挂的，重来</span></span><br><span class="line">            <span class="keyword">if</span> (server.isAlive()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Shouldn't actually happen.. but must be transient or a bug.</span></span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig iClientConfig)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        System.out.println(<span class="string">"--------------init rule-------------"</span>);</span><br><span class="line">        System.out.println(iClientConfig.getClientName());</span><br><span class="line">        System.out.println(iClientConfig.getProperties());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据一个key返回一个Server</span></span><br><span class="line">        <span class="keyword">return</span> choose(getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置实例化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类似&lt;bean id="xxx", class="xxxx"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//当调用服务方集群的时候，需要加上这个，然后restTemplate请求地址写cloud注册的服务名即可。</span></span><br><span class="line">    <span class="comment">// 自定义负载均衡策略的时候不用这个注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">getRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRibbonRule();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"CLOUD-PAYMENT-SERVICE"</span>, configuration = MyRibbonRule<span class="class">.<span class="keyword">class</span>)  //为每个服务定制规则</span></span><br><span class="line"><span class="class">@<span class="title">EnableDiscoveryClient</span> // 给自定义规则用，这里可以获取实例列表</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CustomerMyRibbonMain8083</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试使用自定义负载均衡策略的方式获取</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/customer/payment/rule/get/&#123;id&#125;"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getByIdByIRuleBalancer</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id)</span>&#123;</span><br><span class="line">     <span class="comment">// getForObject 返回Json数据，可以转化为对象</span></span><br><span class="line">     <span class="keyword">return</span> restTemplate.getForObject(url+<span class="string">"/payment/get/"</span>+id, CommonResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>参考链接：</p><blockquote><p><a href="https://blog.csdn.net/qq_41211642/article/details/104772140#comments" target="_blank" rel="noopener">https://blog.csdn.net/qq_41211642/article/details/104772140#comments</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cap-li-lun-kuai-su-jian-jie&quot;&gt;CAP理论快速简介&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#wei-fu-wu-de-t
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://blog.sofunnyai.com/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="https://blog.sofunnyai.com/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>基于贝叶斯优化的机器学习超参数优化（未完待续）</title>
    <link href="https://blog.sofunnyai.com/article/bayes_optimization.html"/>
    <id>https://blog.sofunnyai.com/article/bayes_optimization.html</id>
    <published>2019-07-16T03:26:32.000Z</published>
    <updated>2020-05-28T04:48:30.411Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="wrong password, try again!" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Password Here：" /><label>Password Here：</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="5e7467d5ed7fdbaca4eb59cebea7f9f5bf13fe802440dc00f39b470570a7f946"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      本文为加密的内容, 请输入密码后查看。
    
    </summary>
    
    
      <category term="ml" scheme="https://blog.sofunnyai.com/categories/ml/"/>
    
    
      <category term="risk" scheme="https://blog.sofunnyai.com/tags/risk/"/>
    
      <category term="机器学习" scheme="https://blog.sofunnyai.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>let&#39;s-encrypt配置网站免费SSL证书</title>
    <link href="https://blog.sofunnyai.com/article/lets-encrypt.html"/>
    <id>https://blog.sofunnyai.com/article/lets-encrypt.html</id>
    <published>2019-07-13T18:44:23.000Z</published>
    <updated>2020-05-24T12:08:50.002Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#qian-yan">前言</a></li><li><a href="#han-shang-xuan-ze">厂商选择</a></li><li><a href="#xia-zai-an-zhuang-cert-bot">下载安装cert-bot</a><ul><li><a href="#an-zhuang-cert-bot">安装cert-bot</a></li><li><a href="#huo-qu-zheng-shu">获取证书</a><ul><li><a href="#zhi-jie-an-zhuang-dao-nginx">直接安装到nginx</a></li><li><a href="#zhi-sheng-cheng-zheng-shu">只生成证书</a></li><li><a href="#ce-shi-zi-dong-geng-xin-zheng-shu">测试自动更新证书</a></li><li><a href="#chun-shou-dong-de-certonly">纯手动的certonly</a></li></ul></li></ul></li><li><a href="#can-kao-lian-jie">参考链接</a></li></ul><!-- tocstop --></div><h1><span id="qian-yan"> 前言</span><a href="#qian-yan" class="header-anchor">#</a></h1><p>相信看到这里的对SSL/TSL都有一定了解，链式信任、防劫持、防隐私泄露、安全可信，这些关键字大家脑海里都很熟悉。具体SSL细节就不啰嗦了，感兴趣可以去看看阮一峰的博客或者网上资料，本文主要是实操。</p><h1><span id="han-shang-xuan-ze"> 厂商选择</span><a href="#han-shang-xuan-ze" class="header-anchor">#</a></h1><p>除了域名统配的高端证书之外，一般我们的博客或者小型网站可以考虑使用免费厂商提供的证书。和大厂商的主要区别就是公信力了，不过理论上都是同等安全的。比如： <a href="https://letsencrypt.org/" target="_blank" rel="noopener">https://letsencrypt.org/</a> 在chrome等浏览器厂商的努力支持下，这些之前看起来小点的证书厂商现在兼容性也非常好了。</p><p>本文就以<code>let's encrypt</code>和nginx为例。</p><h1><span id="xia-zai-an-zhuang-cert-bot"> 下载安装cert-bot</span><a href="#xia-zai-an-zhuang-cert-bot" class="header-anchor">#</a></h1><p>废话少说，现在<code>let's encrypt</code>是推荐在server上使用<code>cert-bot</code>来安装、更新我们的证书，<a href="https://certbot.eff.org/" target="_blank" rel="noopener">https://certbot.eff.org/</a> 所以：</p><h2><span id="an-zhuang-cert-bot"> 安装cert-bot</span><a href="#an-zhuang-cert-bot" class="header-anchor">#</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install certbot python2-certbot-nginx</span><br></pre></td></tr></table></figure><h2><span id="huo-qu-zheng-shu"> 获取证书</span><a href="#huo-qu-zheng-shu" class="header-anchor">#</a></h2><ul><li><p>首先把我们的域名解析到当前机器的nginx上，80可以正常访问。</p></li><li><p>然后获取证书有两种方式：1.直接自动安装到nginx，并由cert-bot管理nginx配置文件。   2.获取证书，但手动修改nginx配置文件</p></li></ul><h3><span id="zhi-jie-an-zhuang-dao-nginx"> 直接安装到nginx</span><a href="#zhi-jie-an-zhuang-dao-nginx" class="header-anchor">#</a></h3><ul><li><p>配置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ln -s /main/server/nginx/sbin/nginx /usr/bin/nginx</span><br><span class="line">ln -s /main/server/nginx/conf/ /etc/nginx</span><br><span class="line">certbot --nginx</span><br></pre></td></tr></table></figure></li><li><p>会自动识别nginx配置文件，生成nginx的证书，并修改nginx文件。这是最简单的方式。</p></li></ul><h3><span id="zhi-sheng-cheng-zheng-shu"> 只生成证书</span><a href="#zhi-sheng-cheng-zheng-shu" class="header-anchor">#</a></h3><ul><li>只生成证书：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot certonly --nginx</span><br></pre></td></tr></table></figure><ul><li>会让你输入邮箱、域名等信息</li></ul><h3><span id="ce-shi-zi-dong-geng-xin-zheng-shu"> 测试自动更新证书</span><a href="#ce-shi-zi-dong-geng-xin-zheng-shu" class="header-anchor">#</a></h3><ul><li>配置自动更新</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew -q"</span> | sudo tee -a /etc/crontab &gt; /dev/null</span><br></pre></td></tr></table></figure><ul><li><p>测试一下：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot renew -q --dry-run</span><br></pre></td></tr></table></figure><p>如果报错一个ASCII错误问题，是因为nginx的配置文件有中文。。。所以还是建议只生成证书，手动去配置nginx比较好。</p></li><li><h3><span id="chun-shou-dong-de-certonly"> 纯手动的certonly</span><a href="#chun-shou-dong-de-certonly" class="header-anchor">#</a></h3></li><li><p>适用于上面的certonly报错的时候</p></li><li><pre class="highlight"><code class="bash"> certbot certonly --manual --email xxx@xxx.com -d *.domain.com </code></pre></li></ul><h1><span id="can-kao-lian-jie"> 参考链接</span><a href="#can-kao-lian-jie" class="header-anchor">#</a></h1><blockquote><p><a href="https://certbot.eff.org/lets-encrypt/centosrhel7-nginx" target="_blank" rel="noopener">https://certbot.eff.org/lets-encrypt/centosrhel7-nginx</a></p><p><a href="https://www.jianshu.com/p/6ea81a7b768f" target="_blank" rel="noopener">https://www.jianshu.com/p/6ea81a7b768f</a></p><p><a href="https://www.jianshu.com/p/a1cc68c7d916" target="_blank" rel="noopener">https://www.jianshu.com/p/a1cc68c7d916</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#qian-yan&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#han-shang-xuan-ze&quot;&gt;厂商选择&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="network" scheme="https://blog.sofunnyai.com/categories/network/"/>
    
    
      <category term="网络" scheme="https://blog.sofunnyai.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="hexo" scheme="https://blog.sofunnyai.com/tags/hexo/"/>
    
      <category term="运维" scheme="https://blog.sofunnyai.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>linux下mysql5.7安装备忘</title>
    <link href="https://blog.sofunnyai.com/article/linux-mysql5.7-install.html"/>
    <id>https://blog.sofunnyai.com/article/linux-mysql5.7-install.html</id>
    <published>2018-10-21T03:41:55.000Z</published>
    <updated>2020-06-02T03:47:11.759Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#xian-xia-zai">先下载</a></li><li><a href="#jie-ya-an-zhuang-yi-lai">解压，安装依赖</a></li><li><a href="#bian-ji-pei-zhi-wen-jian">编辑配置文件</a></li><li><a href="#she-zhi-huan-jing-bian-liang">设置环境变量</a></li><li><a href="#chuang-jian-mu-lu">创建目录</a></li><li><a href="#chuang-jian-yong-hu-shou-quan">创建用户，授权</a></li><li><a href="#chu-shi-hua">初始化</a></li><li><a href="#qi-dong-xiu-gai-mi-ma">启动，修改密码</a><ul><li><a href="#qi-dong">启动</a></li><li><a href="#xiu-gai-mi-ma">修改密码</a></li></ul></li><li><a href="#kai-ji-zi-qi-dong">开机自启动</a></li><li><a href="#fu-wu-ming-ling">服务命令</a></li></ul><!-- tocstop --></div><p>安装过多次，5.7略有变化，记录供日后参考。</p><h1><span id="xian-xia-zai"> 先下载</span><a href="#xian-xia-zai" class="header-anchor">#</a></h1><p>去https://dev.mysql.com/downloads/mysql/5.7.html下载，比如<code>wget mysql-5.7.30-linux-glibc2.12-x86_64.tar.gz</code></p><h1><span id="jie-ya-an-zhuang-yi-lai"> 解压，安装依赖</span><a href="#jie-ya-an-zhuang-yi-lai" class="header-anchor">#</a></h1><p><code>apt install libaio1</code>,否则会报一个libaio.so找不到的错。centos使用yum安装。</p><h1><span id="bian-ji-pei-zhi-wen-jian"> 编辑配置文件</span><a href="#bian-ji-pei-zhi-wen-jian" class="header-anchor">#</a></h1><p><code>vim /etc/my.cnf</code>然后编辑</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"><span class="attr">socket</span>=/var/run/mysqld/mysqld.sock</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="comment">#language=/usr/local/mysql/share/english</span></span><br><span class="line"><span class="attr">socket</span>=/var/run/mysqld/mysqld.sock</span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=/main/mysql5.<span class="number">7.30</span></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=/main/mysql5.<span class="number">7.30</span>/data</span><br><span class="line"><span class="attr">log-error</span>=/var/log/mysql/error.log</span><br><span class="line"><span class="attr">slow_query_log</span>=<span class="literal">ON</span></span><br><span class="line"><span class="attr">slow_query_log_file</span>=/var/log/mysql/slowquery.log</span><br><span class="line"><span class="attr">long_query_time</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">log-queries-not-using-indexes</span>=<span class="literal">ON</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB </span><br><span class="line"><span class="attr">lower_case_table_names</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">max_allowed_packet</span>=<span class="number">16</span>M</span><br><span class="line"><span class="attr">user</span>=mysql</span><br><span class="line"><span class="attr">default-time_zone</span> = <span class="string">'+8:00'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">socket</span> = /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure><h1><span id="she-zhi-huan-jing-bian-liang"> 设置环境变量</span><a href="#she-zhi-huan-jing-bian-liang" class="header-anchor">#</a></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/main/mysql5.7.30</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MYSQL_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h1><span id="chuang-jian-mu-lu"> 创建目录</span><a href="#chuang-jian-mu-lu" class="header-anchor">#</a></h1><p>5.7很弱智，上面配置文件中的那些目录都要人肉创建，否则会报错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /main/mysql5.7.30/data</span><br><span class="line">mkdir /var/<span class="built_in">log</span>/mysql</span><br><span class="line">mkdir /var/run/mysqld</span><br></pre></td></tr></table></figure><h1><span id="chuang-jian-yong-hu-shou-quan"> 创建用户，授权</span><a href="#chuang-jian-yong-hu-shou-quan" class="header-anchor">#</a></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql </span><br><span class="line">useradd -r -g mysql mysql </span><br><span class="line"></span><br><span class="line">chown -R mysql:mysql /main/mysql5.7.30</span><br><span class="line">chown -R mysql:mysql /var/<span class="built_in">log</span>/mysql</span><br><span class="line">chown -R mysql:mysql /var/run/mysqld</span><br></pre></td></tr></table></figure><h1><span id="chu-shi-hua"> 初始化</span><a href="#chu-shi-hua" class="header-anchor">#</a></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --user=mysql --basedir=/main/mysql5.7.30 --datadir=/main/mysql5.7.30/data --lc_messages_dir=/main/mysql5.7.30/share --lc_messages=en_US</span><br></pre></td></tr></table></figure><p>然后观察控制台的信息和<code>/var/log/mysql/error.log</code>里面的输出，缺少啥目录或者文件手动创建一下即可。</p><h1><span id="qi-dong-xiu-gai-mi-ma"> 启动，修改密码</span><a href="#qi-dong-xiu-gai-mi-ma" class="header-anchor">#</a></h1><h2><span id="qi-dong"> 启动</span><a href="#qi-dong" class="header-anchor">#</a></h2><p>初始化后，去到<code>/var/log/mysql/error.log</code>找到里面的临时密码，然后启动：</p><p><code>/main/mysql5.7.30/support-files/mysql.server start</code></p><p>正常启动后登录：</p><p><code>mysql -u root -p</code>然后输入刚才复制的临时密码</p><h2><span id="xiu-gai-mi-ma"> 修改密码</span><a href="#xiu-gai-mi-ma" class="header-anchor">#</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span>=<span class="keyword">password</span>(<span class="string">'新密码'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">use</span> mysql;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">UPDATE</span> <span class="string">`mysql`</span>.<span class="string">`user`</span> <span class="keyword">SET</span> <span class="string">`Host`</span>=<span class="string">'%'</span>, <span class="string">`User`</span>=<span class="string">'root'</span>, <span class="string">`Select_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Insert_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Update_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Delete_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Create_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Drop_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Reload_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Shutdown_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Process_priv`</span>=<span class="string">'Y'</span>, <span class="string">`File_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Grant_priv`</span>=<span class="string">'Y'</span>, <span class="string">`References_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Index_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Alter_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Show_db_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Super_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Create_tmp_table_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Lock_tables_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Execute_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Repl_slave_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Repl_client_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Create_view_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Show_view_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Create_routine_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Alter_routine_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Create_user_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Event_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Trigger_priv`</span>=<span class="string">'Y'</span>, <span class="string">`Create_tablespace_priv`</span>=<span class="string">'Y'</span>, <span class="string">`ssl_type`</span>=<span class="string">''</span>, <span class="string">`ssl_cipher`</span>=<span class="string">''</span>, <span class="string">`x509_issuer`</span>=<span class="string">''</span>, <span class="string">`x509_subject`</span>=<span class="string">''</span>, <span class="string">`max_questions`</span>=<span class="string">'0'</span>, <span class="string">`max_updates`</span>=<span class="string">'0'</span>, <span class="string">`max_connections`</span>=<span class="string">'0'</span>, <span class="string">`max_user_connections`</span>=<span class="string">'0'</span>, <span class="string">`password_lifetime`</span>=<span class="literal">NULL</span>, <span class="string">`account_locked`</span>=<span class="string">'N'</span> <span class="keyword">WHERE</span> (<span class="string">`User`</span>=<span class="string">'root'</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h1><span id="kai-ji-zi-qi-dong"> 开机自启动</span><a href="#kai-ji-zi-qi-dong" class="header-anchor">#</a></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> support-files</span><br><span class="line">cp mysql.server /etc/init.d/mysqld</span><br><span class="line">chkconfig --add mysqld</span><br></pre></td></tr></table></figure><h1><span id="fu-wu-ming-ling"> 服务命令</span><a href="#fu-wu-ming-ling" class="header-anchor">#</a></h1><p>使用的<code>support-files</code>目录下的文件管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql.server stop</span><br><span class="line">mysql.server start</span><br><span class="line">mysql.server restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#xian-xia-zai&quot;&gt;先下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#jie-ya-an-zhuang-yi-lai&quot;&gt;解压，安装依赖&lt;/a
      
    
    </summary>
    
    
      <category term="中间件" scheme="https://blog.sofunnyai.com/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="中间件" scheme="https://blog.sofunnyai.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="运维" scheme="https://blog.sofunnyai.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="mysql" scheme="https://blog.sofunnyai.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>IO基础-select、poll、epoll和TCP</title>
    <link href="https://blog.sofunnyai.com/article/io-basic-socket-tcp.html"/>
    <id>https://blog.sofunnyai.com/article/io-basic-socket-tcp.html</id>
    <published>2018-09-12T12:12:26.000Z</published>
    <updated>2020-06-14T10:58:15.967Z</updated>
    
    <content type="html"><![CDATA[<!--toc--><h1><span id="ji-suan-ji-zu-cheng-yuan-li"> 计算机组成原理</span><a href="#ji-suan-ji-zu-cheng-yuan-li" class="header-anchor">#</a></h1><ul><li>内核态与用户态：计算机刚开机的时候，硬盘的kernel内核程序先加载，然后才启动上层的各种app应用文件。</li><li>kernel启动的时候会先在内存中开启<code>内核空间</code>，或者<code>内核态</code>。剩余的部分给<code>用户态</code>、<code>用户空间</code></li><li><code>用户态</code>的应用程序无法直接访问内核态的内存，必须调用内核的“系统调用”才可以。(system call ，在man里面是2类)</li><li>应用程序去调用的“系统调用”需要通过【中断】的方式找到内核的方法实现，CPU切换到内核态，内核中断去访问硬件</li></ul><h2><span id="zhong-duan"> 中断</span><a href="#zhong-duan" class="header-anchor">#</a></h2><ul><li><p>背景：CPU内部有<code>晶振</code>元件，通电后在一定时间内振动固定的次数。当晶振一定次数后，产生“时间中断”，就产生了所谓CPU时间片。</p></li><li><p>1.内核启动的时候会产生一个<strong>进程调度的回调地址Callback</strong></p></li><li><p>2.CPU产生中断的时候会把缓存刷回程序内存，保护现场。</p></li><li><p>3.然后调用内核的callback，根据不同优先级调用的不同进程回调地址。（从主存里面把曾经刷过去的缓存再加载到CPU缓存）</p></li><li><p>4.下次晶振再重复上面的过程，就完成了进程切换的过程。</p></li><li><p>**缺点：**如果进程很多，切换成本很高，比如切换过去后发现在阻塞，其实是一种浪费。</p></li><li><p><code>软中断</code>：因为应用程序需要进行<code>系统调用</code>，调用内核态。会发生用户态到内核态的切换。CPU需要刷缓存，调用callback，传递参数，再回来。</p><ul><li>系统调用是一个软中断，中断号是0x80，它是上层应用程序与Linux系统内核进行交互通信的唯一接口。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200611004737711.png" alt="image-20200611004737711"></p></li></ul><p>我们有多个应用，应用IO的变化是由内核的变化来实现的。</p><h2><span id="ying-jian-zhong-duan"> 硬件中断</span><a href="#ying-jian-zhong-duan" class="header-anchor">#</a></h2><ul><li><p>我们有多个硬件设备，比如键盘、鼠标、网卡，当他们发生动作的时候如何让OS响应？也是通过调用中断。</p></li><li><p>比如鼠标点击的时候调用CPU中断，传递参数生成一个事件event。CPU去调用kernel（kernel启动的时候通过设备的驱动程序获取了中断号和callback。包括中断信号，和执行的方法）</p></li><li><p>然后kernel根据对应的callback程序做出正确的响应即可。</p></li><li><p>网卡为了避免频繁发送中断，使得降低CPU的浪费，会在内存中被分配极小一块缓存区域（DMA区域 直接内存），攒够了发一次中断。是一个<code>buffer</code>思想。</p></li></ul><p><img src="../../../../home/tree/.config/Typora/typora-user-images/image-20200611012918098.png" alt="image-20200611012918098"></p><h1><span id="io-sheng-ji-fa-zhan-zhi-lu"> IO 升级发展之路</span><a href="#io-sheng-ji-fa-zhan-zhi-lu" class="header-anchor">#</a></h1><h2><span id="jing-dian-cs-jia-gou-de-bio"> 经典CS架构的BIO</span><a href="#jing-dian-cs-jia-gou-de-bio" class="header-anchor">#</a></h2><ul><li>任何服务想要启动监听接受请求，需要进行以下步骤</li><li>1.调用kernel启动一个socket的文件描述符，假设叫fd3，监听</li><li>2.死循环去调用kernel的accept(fd3)方法，去不断获取最新的客户端文件描述符，假设获得一个客户端fd4</li><li>3.去调用kernel的read(fd4)方法读取客户端的消息，这是一个阻塞方法！！！</li><li>4.为了不阻塞，只能accept拿到每一个客户端之后，read去启动一个线程，线程里面去阻塞读取用户消息。</li></ul><p>弊端：有多少客户端连接，就要启动多少线程，资源浪费极大。而且多线程的数据共享、调度都很麻烦。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200611003327548.png" alt="image-20200611003327548"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    client_fd = accept(server监听的fd)  <span class="comment">// 获取客户端的监听，调用内核态</span></span><br><span class="line">        <span class="keyword">new</span> Thread(read(client_fd)).start() <span class="comment">// 单独启动线程去阻塞读取用户响应，阻塞调用内核态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【痛点】：kernel的read(fd)操作是阻塞的(在等待对端发消息)，会需要很多线程，但是多线程开销太大，kernel的调度也很费劲。</p><h3><span id="c10k-wen-ti"> C10K问题</span><a href="#c10k-wen-ti" class="header-anchor">#</a></h3><p>最初的服务器是基于进程/线程模型。新到来一个TCP连接，就需要分配一个进程/线程。假如有C10K也即是1W个客户端，就需要创建1W个进程/线程，可想而知单机是无法承受的。那么<strong>如何突破单机性能是高性能网络编程必须要面对的问题，进而这些局限和问题就统称为C10K问题</strong>，最早是由Dan Kegel进行归纳和总结的，并且他也系统的分析和提出解决方案。</p><p>【<strong>问题本质</strong>】：是操作系统的问题，创建的<strong>进程或线程多了，数据拷贝频繁</strong>（缓存I/O、内核将数据拷贝到用户进程空间、阻塞，<strong>进程/线程上下文切换消耗大</strong>， 导致操作系统崩溃，这就是C10K问题的本质。</p><p>【<strong>解决方案</strong>】：</p><p>同一个线程/进程同时处理多个连接---------------------多路复用。</p><p>​</p><h2><span id="kernel-de-fei-zu-sai-de-read-yu-duo-lu-fu-yong-qi-nio-shi-dai"> kernel的非阻塞的read与多路复用器（NIO时代）</span><a href="#kernel-de-fei-zu-sai-de-read-yu-duo-lu-fu-yong-qi-nio-shi-dai" class="header-anchor">#</a></h2><p>kernel进化了，支持了一个应用层面非阻塞的read接口，所以我们应用就可以同上类似：</p><ul><li><p>任何服务想要启动监听接受请求，需要进行以下步骤</p></li><li><p>1.调用kernel启动一个socket的文件描述符，假设叫fd3，监听</p></li><li><p>2.死循环去调用kernel的accept(fd3)方法，去不断获取最新的客户端文件描述符，假设获得一个客户端fd4</p></li><li><p>3.去调用kernel的非阻塞read(fd4)方法读取客户端的消息，这是一个非阻塞方法。有内容就给你，没有就给一个没有个的返回或者异常。调用后就该干嘛干嘛去，待会儿再来。</p></li><li><p>4.不用去开启线程，直接循环回到第2步骤，再去获取客户端。（截止这一轮2个客户端的话保存一个fd的数组）</p></li><li><p>5.上面的第3步循环这个客户端fd的数组，逐个去调用kernel的非阻塞read(each_fd)方法，拿到返回继续会到2…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    client_fd = accept(server监听的fd)  <span class="comment">// 获取客户端的监听，调用内核态</span></span><br><span class="line">    clients.add(client_df)   <span class="comment">// 存储一个新的客户端</span></span><br><span class="line">     <span class="keyword">for</span>(each_fd in clients)&#123;</span><br><span class="line">         msg = read(each_fd)  <span class="comment">// 非阻塞读取到消息，非阻塞调用内核态</span></span><br><span class="line">         <span class="comment">// 业务处理</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200611010419797.png" alt="image-20200611010419797"></p><p>或者可以启动2个线程，一个<code>Boss</code>线程去死循环专门获取客户端的连接，一个<code>Worker</code>线程去专门死循环所有的客户端非阻塞读取消息。----------是不是有Netty的感觉了？</p><p>【弊端】：工作线程的worker虽然都不是阻塞的，不用启动多线程。但是还是要进行<code>系统调用</code>，也就是调用内核。调用内核是通过<code>软中断</code>实现的。<code>用户态</code>到<code>内核态</code>的切换太频繁。</p><p><strong>比如10w的fd客户端，work线程每次循环需要调用10w次kernel的read方法，发生10w次用户态和内核态的切换。但是可能只有10个人发消息了，绝大部分的内核切换都浪费了。read的调用是O(n)的。</strong></p><p>现在的JDK的NIO包中已经使用了多路复用器解决，见下节。</p><h2><span id="duo-lu-fu-yong-qi-shi-xian-select-poll-he-epoll"> 多路复用器实现—select/poll和epoll</span><a href="#duo-lu-fu-yong-qi-shi-xian-select-poll-he-epoll" class="header-anchor">#</a></h2><p>kernel发生变化，我们才能突破。如果无法解决上面例子中10w个fd需要10w次调用才能传给kernel的问题，就无法改进。</p><h3><span id="di-yi-lei-duo-lu-fu-yong-qi-select-he-poll"> 第一类多路复用器—select和poll</span><a href="#di-yi-lei-duo-lu-fu-yong-qi-select-he-poll" class="header-anchor">#</a></h3><p><code>man 2 select</code>可以看到内核的select多路复用情况。</p><p><strong>【多路 复用】</strong>：假设10w个客户端fd，<strong>把原先需要调用10w次read(each_fd)读取消息，复用成select(fds)</strong>，返回有消息的fd集合。</p><p>select多路复用器带来的改变：</p><ul><li>任何服务想要启动监听接受请求，需要进行以下步骤</li><li>1.调用kernel启动一个socket的文件描述符，假设叫fd3，监听</li><li>2.死循环去调用kernel的accept(fd3)方法，去不断获取最新的客户端文件描述符，假设获得一个客户端fd4，多个积攒的客户端得到一个fd的集合fds</li><li>3.去调用<strong>一次</strong>kernel的select(fds)方法，kernel去把所有的fd进行检查，把发生消息变化的fd集合返回！<strong>【循环发生在kernel里面，没有用户态和内核态的切换】</strong></li><li>4.程序只用去调用上面有消息的一小部分fd的read(each_fd)方法，就能读取到消息</li><li>5.回到2循环…</li></ul><p><strong>【优势】</strong>：大大减少内核态和用户态的切换。例子中一次调用复用了10w次read，后续统一处理返回的个别有消息的fd。</p><p><strong>【弊端】</strong>：</p><ul><li>1.每次循环调用select的时候，都要copy 10w个fd的数据从用户态到内核态。（内核能记住之前的客户端多好？）</li><li>2.内核态还需要把这10w个fd每次都循环检查一遍。</li></ul><p>select支持的fd是有上限的，需要重新编译内核才行很费劲，默认只支持1024个fd的多路复用。</p><p>poll改进：使用一个链表结构突破限制，支持无上限的fd集合一起传输。只依赖于操作系统的<code>ulimites</code>设置</p><h3><span id="di-er-lei-duo-lu-fu-yong-qi-epoll-io-event-notifycation-facility"> 第二类多路复用器----epoll-IO/Event Notifycation facility</span><a href="#di-er-lei-duo-lu-fu-yong-qi-epoll-io-event-notifycation-facility" class="header-anchor">#</a></h3><p>epoll是一个多路复用的进阶版，改进了客户端fd频繁copy到内核态的问题。是同步非阻塞的。是C10K问题的进阶版。</p><ul><li><p>系统级同步：程序还是需要去主动调用kernel的read方法获取数据</p></li><li><p>系统级异步：程序给一个内核级别的callback，发生事件的时候直接到callback，接收到数据。------epoll做不到。</p></li></ul><h4><span id="epoll-gong-zuo-yuan-li"> epoll工作原理：</span><a href="#epoll-gong-zuo-yuan-li" class="header-anchor">#</a></h4><p>epoll不用去轮询监听所有文件句柄是否已经就绪。epoll只对发生变化的文件句柄感兴趣。</p><p>有<code>epoll_create(2)</code>、<code>epoll_ctl(2)</code>、<code>epoll_wait(2)</code>组成（2是系统调用）。</p><ul><li>其中<code>epoll_create</code>创建一个epoll实例，返回一个文件描述符，代表内核空间。</li><li><code>epoll_ctl</code>，将我们的client订阅关注的事件去丢到内核空间（每个client只用丢一次）</li><li><code>epoll_wait</code>去阻塞，或者超时查看发生状态变化的client的fd，拿到后去处理。</li></ul><p><strong>使用&quot;事件&quot;的就绪通知方式，通过epoll_ctl注册文件描述符fd，一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd, epoll_wait便可以收到通知, 并通知应用程序。</strong></p><p><code>man epoll</code> 看一眼帮助：</p><p>首先<code>EPOLL(7)</code>是一个杂项，由三个2类的<code>系统调用</code>组成：<code>epoll_create(2)</code>、<code>epoll_ctl(2)</code>、<code>epoll_wait(2)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">EPOLL(7)                   Linux Programmer<span class="string">'s Manual                  EPOLL(7)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NAME</span></span><br><span class="line"><span class="string">       epoll - I/O event notification facility</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SYNOPSIS</span></span><br><span class="line"><span class="string">       #include &lt;sys/epoll.h&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DESCRIPTION</span></span><br><span class="line"><span class="string">       The  epoll  API performs a similar task to poll(2): monitoring multiple</span></span><br><span class="line"><span class="string">       file descriptors to see if I/O is possible on any of them.   The  epoll</span></span><br><span class="line"><span class="string">       API can be used either as an edge-triggered or a level-triggered inter‐</span></span><br><span class="line"><span class="string">       face and scales well to large numbers of watched file descriptors.  The</span></span><br><span class="line"><span class="string">       following  system  calls  are  provided  to  create and manage an epoll</span></span><br><span class="line"><span class="string">       instance:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       *  epoll_create(2) creates a new epoll  instance  and  returns  a  file</span></span><br><span class="line"><span class="string">          descriptor  referring to that instance.  (The more recent epoll_cre‐</span></span><br><span class="line"><span class="string">          ate1(2) extends the functionality of epoll_create(2).)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       *  Interest in particular  file  descriptors  is  then  registered  via</span></span><br><span class="line"><span class="string">          epoll_ctl(2).   The  set of file descriptors currently registered on</span></span><br><span class="line"><span class="string">          an epoll instance is sometimes called an epoll set.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       *  epoll_wait(2) waits for I/O events, blocking the calling  thread  if</span></span><br><span class="line"><span class="string">          no events are currently available.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Level-triggered and edge-triggered</span></span><br><span class="line"><span class="string">       The  epoll event distribution interface is able to behave both as edge-</span></span><br><span class="line"><span class="string">       triggered (ET) and as level-triggered (LT).  The difference between the</span></span><br><span class="line"><span class="string">       two mechanisms can be described as follows.  Suppose that this scenario</span></span><br><span class="line"><span class="string">       happens:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       1. The file descriptor that represents the read side of a pipe (rfd) is</span></span><br><span class="line"><span class="string">          registered on the epoll instance.</span></span><br></pre></td></tr></table></figure><h4><span id="epoll-create-xi-tong-diao-yong"> epoll_create 系统调用</span><a href="#epoll-create-xi-tong-diao-yong" class="header-anchor">#</a></h4><p>可以去<code>man 2 epoll_create</code>看一眼这个系统调用（2类）的epoll的帮助，看他的返回：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">EPOLL_CREATE(2)           Linux Programmer<span class="string">'s Manual           EPOLL_CREATE(2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NAME</span></span><br><span class="line"><span class="string">       epoll_create, epoll_create1 - open an epoll file descriptor</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SYNOPSIS</span></span><br><span class="line"><span class="string">       #include &lt;sys/epoll.h&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       int epoll_create(int size);</span></span><br><span class="line"><span class="string">       int epoll_create1(int flags);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">DESCRIPTION</span></span><br><span class="line"><span class="string">       epoll_create()  creates  a  new epoll(7) instance.  Since Linux 2.6.8,</span></span><br><span class="line"><span class="string">       the size argument is ignored, but must be greater than zero; see NOTES</span></span><br><span class="line"><span class="string">       below.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       epoll_create()  returns  a  file descriptor referring to the new epoll</span></span><br><span class="line"><span class="string">       instance.  This file descriptor is used for all the  subsequent  calls</span></span><br><span class="line"><span class="string">       to  the epoll interface.  When no longer required, the file descriptor</span></span><br><span class="line"><span class="string">       returned by epoll_create() should be closed by using  close(2).   When</span></span><br><span class="line"><span class="string">       all  file descriptors referring to an epoll instance have been closed,</span></span><br><span class="line"><span class="string">       the kernel destroys the instance and releases the associated resources</span></span><br><span class="line"><span class="string">       for reuse.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">...........................</span></span><br><span class="line"><span class="string">RETURN VALUE</span></span><br><span class="line"><span class="string">       On  success,  these system calls return a nonnegative file descriptor.</span></span><br><span class="line"><span class="string">       On error, -1 is returned, and errno is set to indicate the error.</span></span><br></pre></td></tr></table></figure><p>他的返回是：<code>On success, these system calls return a nonnegative file descriptor. On error, -1 is returned, and errno is set to indicate the error.</code></p><p>这个返回是一个fd，它代表的是一个内核空间------------保存我们的客户端fd。这些客户端怎么放进去的呢？<code>epoll_ctl</code>可以往里面添加fd</p><h4><span id="epoll-ctl-zeng-shan-gai-fd-gei-dao-nei-he-kong-jian"> epoll_ctl-增删改fd给到内核空间</span><a href="#epoll-ctl-zeng-shan-gai-fd-gei-dao-nei-he-kong-jian" class="header-anchor">#</a></h4><p>一样我们看一下帮助<code>man 2 epoll_ctl</code>可以看到<code>int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</code>这是一个系统调用，<code>epfd</code>可以传递客户端的fd，<code>op</code>可以传递<code>EPOLL_CTL_ADD</code>、<code>EPOLL_CTL_MOD</code>、<code>EPOLL_CTL_DEL</code>去增删改。一个客户端只用放一次，以后再也不用放了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">EPOLL_CTL(<span class="number">2</span>)              Linux Programmer<span class="number">'</span><span class="function">s Manual              <span class="title">EPOLL_CTL</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">NAME</span></span><br><span class="line">       epoll_ctl - control interface for an epoll file descriptor</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       <span class="function">This  system call performs control operations on the <span class="title">epoll</span><span class="params">(<span class="number">7</span>)</span> instance</span></span><br><span class="line">       referred to by the file descriptor epfd.  It requests that the  opera‐</span><br><span class="line">       tion op be performed <span class="keyword">for</span> the target file descriptor, fd.</span><br><span class="line"></span><br><span class="line">       Valid values <span class="keyword">for</span> the op argument are:</span><br><span class="line"></span><br><span class="line">       EPOLL_CTL_ADD</span><br><span class="line">              Register  the  target  file descriptor fd on the epoll instance</span><br><span class="line">              referred to by the file descriptor epfd <span class="keyword">and</span> associate the event</span><br><span class="line">              event with the internal file linked to fd.</span><br><span class="line"></span><br><span class="line">       EPOLL_CTL_MOD</span><br><span class="line">              Change the event event associated with the target file descrip‐</span><br><span class="line">              tor fd.</span><br><span class="line"></span><br><span class="line">       EPOLL_CTL_DEL</span><br><span class="line">              Remove (deregister) the target  file  descriptor  fd  from  the</span><br><span class="line">              epoll  instance  referred to by epfd.  The event is ignored <span class="keyword">and</span></span><br><span class="line">              can be NULL (but see BUGS below).</span><br></pre></td></tr></table></figure><h4><span id="epoll-wait-rang-fd-deng-dai-shi-jian"> epoll_wait-让fd等待事件</span><a href="#epoll-wait-rang-fd-deng-dai-shi-jian" class="header-anchor">#</a></h4><p>同上类似<code>man 2 epoll_wait</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">EPOLL_WAIT(<span class="number">2</span>)             Linux Programmer<span class="number">'</span><span class="function">s Manual             <span class="title">EPOLL_WAIT</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">NAME</span></span><br><span class="line">       epoll_wait,  epoll_pwait  -  wait  for  an  I/O event on an epoll file</span><br><span class="line">       descriptor</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line">       <span class="function"><span class="keyword">int</span> <span class="title">epoll_pwait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">const</span> <span class="keyword">sigset_t</span> *sigmask)</span></span>;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       <span class="function">The <span class="title">epoll_wait</span><span class="params">()</span> system call waits <span class="keyword">for</span> events on the <span class="title">epoll</span><span class="params">(<span class="number">7</span>)</span> instance</span></span><br><span class="line">       referred  to  by the file descriptor epfd.  The memory area pointed to</span><br><span class="line">       by events will contain the events that will be <span class="built_in">available</span> <span class="keyword">for</span> the call‐</span><br><span class="line">       er.   Up  to  maxevents  are  returned by epoll_wait().  The maxevents</span><br><span class="line">       argument must be greater than zero.</span><br><span class="line"></span><br><span class="line">       The  timeout  argument  specifies  the  number  of  milliseconds  that</span><br><span class="line">       epoll_wait() will block.  Time is measured against the CLOCK_MONOTONIC</span><br><span class="line">       clock.  The call will block until either:</span><br><span class="line"></span><br><span class="line">       *  a file descriptor delivers an event;</span><br><span class="line"></span><br><span class="line">       *  the call is interrupted by a signal handler; <span class="keyword">or</span></span><br><span class="line"></span><br><span class="line">       *  the timeout expires.</span><br><span class="line"></span><br><span class="line">       Note that the timeout interval will be rounded up to the system  clock</span><br><span class="line">       granularity,  <span class="keyword">and</span>  kernel  scheduling  delays  mean  that the blocking</span><br><span class="line">       interval may overrun by a small amount.  Specifying a  timeout  of  <span class="number">-1</span></span><br><span class="line">       causes  epoll_wait() to block indefinitely, while specifying a timeout</span><br><span class="line">       equal to zero cause epoll_wait() to return  immediately,  even  if  no</span><br><span class="line">       events are <span class="built_in">available</span>.</span><br></pre></td></tr></table></figure><h4><span id="epoll-gong-zuo-liu-cheng"> epoll工作流程</span><a href="#epoll-gong-zuo-liu-cheng" class="header-anchor">#</a></h4><p><strong>【Epoll】</strong>：假设10w个客户端fd</p><ul><li>任何服务想要启动监听接受请求，需要进行以下步骤</li><li>1.调用kernel启动一个socket的文件描述符，假设叫fd3，监听</li><li>2.调用<code>epoll_create</code>,创建epoll实例，会在内核中开辟空间假设fd6。</li><li>3.调用<code>epoll_ctl(fd6, ADD , fd3, event_accept)</code>,把socket fd3加入内核空间fd6中，同时监听accept事件。</li><li>4.调用<code>epoll_wait(fd6,res)</code>,等待fd6中的所有fd返回，阻塞，也可以可以超时。传递一个res是接受返回的内存空间。</li><li>假设上面<code>epoll_wait</code>的时候，一个C1来了三次握手，制造事件中断。CPU回调，知道来了一个客户端，就把这个fd放到fd3上。fd3就放到上面给的res。（accept）</li><li>5.<code>epoll_wait</code>从res看到有fd3的accept了，把这个fd3给到程序去执行accept(fd3)，得到一个fd8.这时候fd8就代表下面的C1客户端了。</li><li>6.调用<code>epoll_ctl(fd6, ADD , fd8, event_read)</code>,把客户端fd8加入内核空间fd6中，同时监听read事件。（以后就不用监听了）</li><li>7.程序循环调用<code>epoll_wait(fd6,res)</code>,等待fd6中的所有fd返回，阻塞，也可以可以超时。传递一个res是接受返回的内存空间。拿出res里面的fd和事件去处理。</li><li>这时候C2如果来了，fd6里面监听了accept和read，都会触发中断。CPU会把fd3和fd8都放到res，注明有一个连接来了俩event。</li><li>这时候epoll_wait会返回两个fd，fd3里面的event拿出来会得到一个新的client，命名fd9，来代表C2.</li><li>然后把fd9也调用<code>epoll_ctl(fd6, ADD , fd9, event_read)</code>加进去，内核就多监听一个中断事件。</li></ul><p><img src="../../../../home/tree/.config/Typora/typora-user-images/image-20200611022733785.png" alt="image-20200611022733785"></p><p>多而两个系统调用</p><p>epoll空间开辟早期的时候用mmap（程序和内核都可以访问），后来系统调用不用这个实现了，因为多线程的时候mmap有点问题。</p><p>上层开辟线程，传递数据的时候还是用的mmap。内存直接访问。</p><p><strong>【优势】</strong>：压榨硬件资源到极致，规避了客户端fd的频繁拷贝。事件驱动。</p><p>【缺点】：epoll只完成了event的通知，需要拿到数据的时候还是需要去同步调用read。（可以非阻塞调用read，但是还是程序需要主动调用read，不会直接给到）</p><p>epoll不一定是最快的，根据client的特点？</p><p>也就是网卡把数据放到DMA区域，内核通过中断只知道DMA有数据，有事件。kernel知道是什么时间类型，会通过epoll_wait的res告诉程序，但是不会直接把消息读取出来。还是需要应用app去调用kernel的read（阻塞或者非阻塞）去拿回数据。</p><p>思想：事件到达了，会有event告诉内核。</p><p>​</p><h2><span id="select-poll-he-epoll-de-dui-bi"> select/poll和epoll的对比</span><a href="#select-poll-he-epoll-de-dui-bi" class="header-anchor">#</a></h2><p>select和poll是一类         epoll是另一类</p><table><thead><tr><th></th><th>支持一个进程所能打开的最大连接数</th><th>FD剧增后带来的IO效率问题</th><th>消息传递方式</th></tr></thead><tbody><tr><td><strong>select</strong></td><td>单个进程所能打开的最大连接数有FD_SETSIZE宏定义，其大小是32个整数的大小（在32位的机器上，大小就是32<em>32，同理64位机器上FD_SETSIZE为32</em>64），当然我们可以对进行修改，然后重新编译内核，但是性能可能会受到影响，这需要进一步的测试。</td><td>因为每次调用时都会对连接进行线性遍历，所以随着FD的增加会造成遍历速度慢的“线性下降性能问题”。</td><td>内核需要将消息传递到用户空间，都需要内核拷贝动作</td></tr><tr><td><strong>poll</strong></td><td>poll本质上和select没有区别，但是它没有最大连接数的限制，原因是它是基于链表来存储的</td><td>同上</td><td>同上</td></tr><tr><td><strong>epoll</strong></td><td>虽然连接数有上限，但是很大，1G内存的机器上可以打开10万左右的连接，2G内存的机器可以打开20万左右的连接</td><td>epoll内核中实现是根据每个fd上的callback函数来实现的，只有活跃的socket才会主动调用callback，所以在活跃socket较少的情况下，使用epoll没有前面两者的线性下降的性能问题，但是所有socket都很活跃的情况下，可能会有性能问题。</td><td>epoll通过内核和用户空间共享一块内存来实现的。</td></tr></tbody></table><h1><span id="aio"> AIO</span><a href="#aio" class="header-anchor">#</a></h1><p>aio  on linux比较费劲，因为linux希望更多的CPU运行在用户空间，内核空间保证安全。</p><p>如果AIO如何搞定系统级别异步？linux  kernel去执行应用定义的callback？在哪里启动callback的线程？这个callback在哪里执行？kernel执行的话安全性？</p><h1><span id="tcp-ji-chu"> TCP基础</span><a href="#tcp-ji-chu" class="header-anchor">#</a></h1><h2><span id="osi-ji-chu-mo-xing"> OSI基础模型</span><a href="#osi-ji-chu-mo-xing" class="header-anchor">#</a></h2><p>提到IO，首先是OSI参考模型，计算机网络基础，一共七层</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200521180941467.png" alt="image-20200521180941467"></p><p>这7层是一个虚的东西，是一个规范。TCP/IP协议给精简到4层，把上面的<code>应用层-表示层-会话层</code>统一归结到新的<code>应用层</code>是<code>用户称</code>，把下面<code>的传输控制层-网络层-链路层-物理层</code>视为<code>内核层</code>。</p><table><thead><tr><th>OSI七层网络模型</th><th>TCP/IP四层概念模型</th><th>对应网络协议</th></tr></thead><tbody><tr><td>应用层（Application）</td><td>应</td><td>HTTP、TFTP, FTP, NFS, WAIS、SMTP</td></tr><tr><td>表示层（Presentation）</td><td>用</td><td>Telnet, Rlogin, SNMP, Gopher</td></tr><tr><td>会话层（Session）</td><td>层</td><td>SMTP, DNS</td></tr><tr><td>传输层（Transport）</td><td>传输层</td><td>TCP, UDP</td></tr><tr><td>网络层（Network）</td><td>网络层</td><td>IP, ICMP, ARP, RARP, AKP, UUCP</td></tr><tr><td>数据链路层（Data Link）</td><td>数据</td><td>FDDI, Ethernet, Arpanet, PDN, SLIP, PPP</td></tr><tr><td>物理层（Physical）</td><td>链路层</td><td>IEEE 802.1A, IEEE 802.2到IEEE 802.11</td></tr></tbody></table><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200521181257025.png" alt="image-20200521181257025"></p><h2><span id="linux-ming-ling-ce-shi-jiang-jie-tcp"> linux命令测试讲解TCP</span><a href="#linux-ming-ling-ce-shi-jiang-jie-tcp" class="header-anchor">#</a></h2><h3><span id="chuang-jian-yi-ge-dao-baidu-de-wen-jian-miao-shu-fu-nei-he-ceng"> 创建一个到baidu的文件描述符（内核层）</span><a href="#chuang-jian-yi-ge-dao-baidu-de-wen-jian-miao-shu-fu-nei-he-ceng" class="header-anchor">#</a></h3><ul><li>linux一切皆文件，每一个程序都有自己的IO流。程序里面的IO流也会被描述成文件（数字）。没一个程序都有3个自带的文件描述符：<ul><li>0：<a href="http://system.in" target="_blank" rel="noopener">system.in</a></li><li>1:   system.out</li><li>2:   system.err</li><li>用户创建的IO就从3开始</li></ul></li></ul><p>**【举例】**执行一个bash命令创建一个到baidu的socket，IO流重定向到当前进程的8号文件描述符中：</p><ul><li><p><code>exec 8&lt;&gt; /dev/tcp/www.baidu.com/80</code></p></li><li><p>上面面创建了一个文件描述符“8”，是一个socket指向了百度，</p></li><li><p>8是文件描述符fd(就像代码的变量)，&lt;&gt;是一个双向输入输出流，可以看到</p></li><li><pre class="highlight"><code class="bash"><span class="hljs-built_in">echo</span> $$  <span class="hljs-comment"># 打印当前命令行的进程号</span>16199<span class="hljs-comment"># 也可以ps -ef 然后grep出来</span>tree     16199  9368  0 4月15 pts/1   00:00:01 /bin/bash<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">- 可以去当前进程的目录看一眼</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;bash</span><br><span class="line">  cd &#x2F;proc&#x2F;16199&#x2F;fd # 进入当前进程的fd目录</span><br><span class="line">  ls # 看一眼</span><br><span class="line">  lrwx------ 1 tree tree 64 5月  21 18:31 0 -&gt; &#x2F;dev&#x2F;pts&#x2F;1</span><br><span class="line">  lrwx------ 1 tree tree 64 5月  21 18:31 1 -&gt; &#x2F;dev&#x2F;pts&#x2F;1</span><br><span class="line">  lrwx------ 1 tree tree 64 5月  21 18:31 2 -&gt; &#x2F;dev&#x2F;pts&#x2F;1</span><br><span class="line">  lrwx------ 1 tree tree 64 5月  21 18:31 255 -&gt; &#x2F;dev&#x2F;pts&#x2F;1</span><br><span class="line">  lrwx------ 1 tree tree 64 5月  21 18:31 8 -&gt; &#39;socket:[1037956]&#39;</span><br><span class="line">  # 每个进程都有0,1,2三个fd文件描述符。分别是stdin、stdout、stderr</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3><span id="xiang-wen-jian-miao-shu-fu-zhong-xie-dong-xi-tong-xin-yong-hu-ceng-tai"> 向文件描述符中写东西通信（用户层态）</span><a href="#xiang-wen-jian-miao-shu-fu-zhong-xie-dong-xi-tong-xin-yong-hu-ceng-tai" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"GET / HTTP/1.0\n"</span> 1&gt;&amp; 8  </span><br><span class="line"><span class="comment"># 打印一个字符串到标准输出（所以是1）重定向&gt;到文件描述符(所以是&amp;，重定向到文件不用&amp;)8中</span></span><br><span class="line"></span><br><span class="line">cat 0&lt;&amp; 8</span><br><span class="line"><span class="comment"># 从文件描述符(所以是&amp;，文件的话不用&amp;)8中标准输入&lt;</span></span><br><span class="line"><span class="comment"># 。。。。。下面打印一大堆百度的html</span></span><br></pre></td></tr></table></figure><h2><span id="chuan-shu-kong-zhi-ceng-tcp-xie-yi"> 传输控制层TCP协议</span><a href="#chuan-shu-kong-zhi-ceng-tcp-xie-yi" class="header-anchor">#</a></h2><p>TCP和UDP是传输控制层协议。</p><h4><span id="shi-me-shi-socket-tao-jie-zi"> 什么是socket套接字？</span><a href="#shi-me-shi-socket-tao-jie-zi" class="header-anchor">#</a></h4><ul><li><p><code>ip+port &lt;---------&gt; ip+port</code> 是一【套】，客户端和服务端的ip+port 4个要素决定唯一的一个socket</p></li><li><p>客户端的ip是B，可以和baidu建立多少个链接？65535个</p></li><li><p>此时客户端B还能继续和163建立链接吗？也可以继续再次建立65535个，因为socket是【一套】4个要素，server换了就是另外一个socket了。</p></li><li><p>对于类似如下<code>netstat -anp</code>出来的socket链接，每一个<code>established</code>都有一个文件描述符(fd目录下)数字和他对应并交给一个进程。程序只用和这个文件描述符进行读写就可以进行socket通信了。<strong>【如果多个socket对应一个进程：就是多路复用器selector或者epoll】</strong></p><p>下面的<code>192.168.150.12:22</code>建立了两个到<code>192.168.150.1</code>的<code>socket</code>：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200521191000694.png" alt="image-20200521191000694"></p></li></ul><h3><span id="shi-me-shi-tcp-xie-yi"> 什么是TCP协议？</span><a href="#shi-me-shi-tcp-xie-yi" class="header-anchor">#</a></h3><p>是一个<strong>面向连接</strong>的<strong>可靠的</strong>传输协议。因为三次握手保证了可靠传输。</p><p><strong>连接</strong>：不是物理连接，是三次握手实现的逻辑连接，完成双向确认。</p><p>为啥<strong>可靠</strong>：通信前三次握手双方分配资源，为未来的通讯做好了准备。所有数据包发送的时候有个确认机制保证了可靠。</p><p><strong>DDOS</strong>：发握手包，但是不回。造成服务器有一大堆接受TCP的等待队列。使得真正想进来的连接进不来。</p><h3><span id="san-ci-wo-shou-de-xi-jie"> 三次握手的细节？</span><a href="#san-ci-wo-shou-de-xi-jie" class="header-anchor">#</a></h3><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200521185513169.png" alt="image-20200521185513169"></p><p>C-----------syn-----------&gt;S   # “我要跟你连接了，标识是syn”</p><p>C&lt;----------syn+ack-------S # “好的，我知道了” 让客户端知道Server已经响应了</p><p>C------------ack-----------&gt;S # 好的，我知道你知道了。让Server知道发出的消息客户端收到了</p><p>然后双方开始开辟资源（内存，结构体，线程），建立连接。</p><h3><span id="shui-hong-fa-san-ci-wo-shou-mu-de"> 谁触发三次握手？目的？</span><a href="#shui-hong-fa-san-ci-wo-shou-mu-de" class="header-anchor">#</a></h3><p>应用层的程序先告诉内核，我要和一个地址建立连接。内核去尝试三次握手。</p><p>三次握手成功后会在双方服务器开辟资源（线程、内存结构体等等）来为对方提供响应服务。</p><p>三次握手完毕后，双方才有资源开辟，才能开始传输。</p><h3><span id="tcpdump-cha-kan-san-ci-wo-shou"> tcpdump 查看三次握手</span><a href="#tcpdump-cha-kan-san-ci-wo-shou" class="header-anchor">#</a></h3><p><code>tcpdump</code>   -nn 显示ip断开   -i 显示哪个网卡接口 port 显示哪个端口</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200521194049682.png" alt="image-20200521194049682"></p><h3><span id="si-ci-fen-shou-de-xi-jie-wei-sha-yao-si-ci"> 四次分手的细节，为啥要四次？</span><a href="#si-ci-fen-shou-de-xi-jie-wei-sha-yao-si-ci" class="header-anchor">#</a></h3><p>因为握手是三次，开辟了资源。<strong>分手是双方一起释放资源，对对方有义务的</strong>，所以是四次（双方都要同时释放，不能轻易单方面释放了）</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200521192102157.png" alt="image-20200521192102157"></p><p>分手的C只是先说断开的人</p><p>C-----------fin-----------&gt;S   # “我要跟你分手了，标识是fin”给Server一个结束标识</p><p>C&lt;----------fin+ack-------S # “好的，我知道了” 让客户端知道Server已经响应了（但是我要确认一下真的没事儿了）</p><p>C&lt;-----------fin------------S   # “好吧，分吧，标识是fin”确认真的没事儿了，给客户端一个结束标识</p><p>C------------ack-----------&gt;S #  “好的，”让Server知道发出的消息客户端收到了</p><p>然后双方把给对方准备的资源都释放了。</p><h3><span id="san-ci-wo-shou-he-si-ci-fen-shou-shi-bu-ke-fen-ge-de-zui-xiao-li-du"> 三次握手和四次分手是不可分割的最小粒度</span><a href="#san-ci-wo-shou-he-si-ci-fen-shou-shi-bu-ke-fen-ge-de-zui-xiao-li-du" class="header-anchor">#</a></h3><ul><li><p>LVS作为一个工作在四层的负载均衡，是无法知晓数据包的具体内容的！</p></li><li><p>LVS是否可以随意把数据给后端进行负载？-可以负载，但是受制于协议约束！</p><ul><li>C  ----- lvs   ----- S1/S2 的时候，LVS必须要把握手的三次给到一对C—S，不能给到另外一个S，否则无法建立连接。</li></ul></li></ul><h2><span id="wang-luo-he-lu-you"> 网络和路由</span><a href="#wang-luo-he-lu-you" class="header-anchor">#</a></h2><p>上面的TCP协议只管<strong>传输和控制</strong>，也就是发什么内容，怎么发。但是发送的路径不管，是下层寻址ARP协议管理的。</p><p>网络设置要<code>ip</code>、<code>gateway</code>、<code>mask</code>、<code>dns</code>4个东西</p><ul><li>如果几个设备ip：<code>192.168.1.10</code>、<code>192.168.1.11</code>，他们只要成功联网，肯定知道他们的下一跳路由器地址（静态或者DHCP），如<code>192.168.1.1</code></li><li>客户端向发送一个ARP广播包，带着路由器的ip和全<code>FFFFFFFFFF</code>的mac地址，路由器收到后看到是自己的ip，就把自己的mac地址返回给客户机。</li><li>然后客户端才知道路由器的mac，包装后就能往百度发了三次握手的包了。</li><li>通过路由表往下一跳发</li></ul><p>【测试】``</p><p>下面会先去请求ARP，收到路由器返回mac后，包装三次握手的包发出去。最后四次分手。</p><p>每次发送的包和接受的包都有一个seq和seq+1的关系，保证了不会错乱。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200610234329384.png" alt="image-20200610234329384"></p><h1><span id="qi-ta"> 其他：</span><a href="#qi-ta" class="header-anchor">#</a></h1><h2><span id="guan-yu-directbuffer"> 关于DirectBuffer</span><a href="#guan-yu-directbuffer" class="header-anchor">#</a></h2><p>每个进程都有堆内存，JVM是C写的，启动的时候有堆空间。我们可以堆外分配空间直接给JVM访问。这个堆外空间除了内核共享，还可以接到磁盘文件上。</p><p>RandomAccessFile里面有<code>direct</code>分配空间和<code>map(4096)</code>：可以使用RandomAccessFile打开文件，对着这个文件对象调用map。JVM就有堆外空间接到磁盘上了。map返回一个buffer，JVM直接把文件存到磁盘上了。不用调用kernel的write，减少一次<code>系统调用</code>。</p><h2><span id="mmap"> mmap</span><a href="#mmap" class="header-anchor">#</a></h2><p>内核和应用共同访问的共享内存。mmap是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。这样直接对内存的读写就完成了之前的系统调用<code>read</code>、<code>write</code>，速度更快，<strong>而且内核空间也可以对这个文件直接修改，可以完成进程间文件共享</strong>。</p><p>mongoDB （3.0以前版本） 、rocketMQ 都用到了 mmap</p><blockquote><p><a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html" target="_blank" rel="noopener">https://www.cnblogs.com/huxiao-tee/p/4660352.html</a></p></blockquote><h2><span id="kafka-de-io-you-hua"> Kafka的IO优化？</span><a href="#kafka-de-io-you-hua" class="header-anchor">#</a></h2><p>kafka是基于JVM的消息队列，读取消息的时候Client到Kernel调用系统调用<code>read</code>，再到kafka去解析。kafka优化对这个文件开启mmap映射，写文件的时候就像写buffer一样，越过系统调用直接落到磁盘。少了一次write系统调用。</p><p>kafka启动的时候有一个segment01段文件，就是mmap开辟的内存映射的大小，默认1G。对这1G的内存哪个位置放了，就会出现在文件的哪个位置。</p><p>segment把1G文件填满之后移动，再创建一个segment，再mmap一下得到第二个文件。</p><p>读：正常是程序调动kernel，kernel去读取文件到文件偏移量，拷贝到用户空间。用户空间把数据再发出去的时候又要调用kernel，多copy了一次。</p><p><strong>如果数据是不需要kafka再加工的</strong>，就可以触发<strong>零拷贝</strong>：</p><p>程序调用sendfile，把输入输出的fd传进去，sendfile是在内核里实现的，所以直接零拷贝了。</p><p><code>man 2 sendfile</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">SENDFILE(<span class="number">2</span>)               Linux Programmer<span class="number">'</span><span class="function">s Manual               <span class="title">SENDFILE</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">NAME</span></span><br><span class="line">       sendfile - transfer data between file descriptors</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sendfile.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">ssize_t</span> <span class="title">sendfile</span><span class="params">(<span class="keyword">int</span> out_fd, <span class="keyword">int</span> in_fd, <span class="keyword">off_t</span> *offset, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       sendfile()  copies  data  between  one  file  descriptor  <span class="keyword">and</span> another.</span><br><span class="line">       Because <span class="keyword">this</span> copying is done within the  kernel,  sendfile()  is  more</span><br><span class="line">       efficient  than  the  combination of read(2) and write(2), which would</span><br><span class="line">       require transferring data to <span class="keyword">and</span> from user space.</span><br><span class="line"></span><br><span class="line">       in_fd should be a file descriptor opened <span class="keyword">for</span> reading <span class="keyword">and</span> out_fd should</span><br><span class="line">       be a descriptor opened <span class="keyword">for</span> writing.</span><br><span class="line"></span><br><span class="line">       If  offset  is <span class="keyword">not</span> <span class="literal">NULL</span>, then it points to a variable holding the file</span><br><span class="line">       offset from which sendfile() will start reading data from in_fd.  When</span><br><span class="line">       sendfile()  returns,  <span class="keyword">this</span>  variable  will be <span class="built_in">set</span> to the offset of the</span><br><span class="line">       <span class="keyword">byte</span> following the last <span class="keyword">byte</span> that was <span class="built_in">read</span>.  If offset  is  <span class="keyword">not</span>  <span class="literal">NULL</span>,</span><br><span class="line">       <span class="function">then  <span class="title">sendfile</span><span class="params">()</span>  does  <span class="keyword">not</span> modify the file offset of in_fd</span>; otherwise</span><br><span class="line">       the file offset is adjusted to reflect the number of bytes  <span class="built_in">read</span>  from</span><br><span class="line">       in_fd.</span><br><span class="line"></span><br><span class="line">       If  offset  is <span class="literal">NULL</span>, then data will be <span class="built_in">read</span> from in_fd starting at the</span><br><span class="line">       file offset, <span class="keyword">and</span> the file offset will be updated by the call.</span><br><span class="line"></span><br><span class="line">       count is the number of bytes to copy between the file descriptors.</span><br><span class="line"></span><br><span class="line">       The  in_fd  argument  must  correspond  to  a  file   which   supports</span><br><span class="line">       mmap(2)-like operations (i.e., it cannot be a socket).</span><br><span class="line"></span><br><span class="line">       In  Linux kernels before <span class="number">2.6</span><span class="number">.33</span>, out_fd must refer to a socket.  Since</span><br><span class="line">       Linux <span class="number">2.6</span><span class="number">.33</span> it can be any file.  If it is a regular file, then  send‐</span><br><span class="line">       file() changes the file offset appropriately.</span><br><span class="line"></span><br><span class="line">RETURN VALUE</span><br><span class="line">       If  the <span class="built_in">transfer</span> was successful, the number of bytes written to out_fd</span><br><span class="line">       is returned.  <span class="function">Note that a successful  call  to  <span class="title">sendfile</span><span class="params">()</span>  may  <span class="built_in">write</span></span></span><br><span class="line"><span class="function">       fewer bytes than requested</span>; the caller should be prepared to retry the</span><br><span class="line">       call <span class="keyword">if</span> there were unsent bytes.  See also NOTES.</span><br></pre></td></tr></table></figure><p>所以kafka用到mmap、零拷贝、epoll，性能高。redis底层也是epoll.</p><p>nginx也是epoll，还有sendfile的零拷贝，配置文件里面就有sendfile。</p><p>参考资料</p><blockquote><p><a href="https://www.cnblogs.com/jjzd/p/6540148.html" target="_blank" rel="noopener">https://www.cnblogs.com/jjzd/p/6540148.html</a></p><p><a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html" target="_blank" rel="noopener">https://www.cnblogs.com/huxiao-tee/p/4660352.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--toc--&gt;
&lt;h1&gt;&lt;span id=&quot;ji-suan-ji-zu-cheng-yuan-li&quot;&gt; 计算机组成原理&lt;/span&gt;&lt;a href=&quot;#ji-suan-ji-zu-cheng-yuan-li&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="IO" scheme="https://blog.sofunnyai.com/categories/IO/"/>
    
    
      <category term="网络" scheme="https://blog.sofunnyai.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="基础" scheme="https://blog.sofunnyai.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>7_note</title>
    <link href="https://blog.sofunnyai.com/article/7_note.html"/>
    <id>https://blog.sofunnyai.com/article/7_note.html</id>
    <published>2018-07-15T10:01:12.000Z</published>
    <updated>2020-05-28T10:13:15.758Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="wrong password, try again!" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Password Here：" /><label>Password Here：</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="4f467d26ce3a9d09da9bb030732f344b9f34e76867c3d3b0df2aca1f9f7a06a4"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      本文为加密的内容, 请输入密码后查看。
    
    </summary>
    
    
      <category term="interview" scheme="https://blog.sofunnyai.com/categories/interview/"/>
    
    
      <category term="risk" scheme="https://blog.sofunnyai.com/tags/risk/"/>
    
      <category term="private" scheme="https://blog.sofunnyai.com/tags/private/"/>
    
      <category term="note" scheme="https://blog.sofunnyai.com/tags/note/"/>
    
      <category term="interview" scheme="https://blog.sofunnyai.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>CacheLine和伪共享</title>
    <link href="https://blog.sofunnyai.com/article/cacheline-contended.html"/>
    <id>https://blog.sofunnyai.com/article/cacheline-contended.html</id>
    <published>2018-03-11T01:44:53.000Z</published>
    <updated>2020-06-15T03:12:53.309Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#cacheline-jian-jie">CacheLine简介</a></li><li><a href="#wei-shi-me-cacheline-bing-fa-man">为什么CacheLine并发慢？</a><ul><li><a href="#mesi-huan-cun-yi-zhi-xing-xie-yi">MESI缓存一致性协议</a></li></ul></li><li><a href="#falsesharing-wei-gong-xiang-wen-ti"><strong>FalseSharing</strong>伪共享问题</a></li><li><a href="#wei-gong-xiang-de-jie-jue-fang-an">伪共享的解决方案</a><ul><li><a href="#yuan-shi-you-huan-cun-xing-jing-zheng-de-wen-ti">原始有缓存行竞争的问题</a></li><li><a href="#jdk8-yi-qian-ren-rou-jie-jue">JDK8以前人肉解决：</a></li><li><a href="#jdk8-yi-hou-contended-jie-jue">JDK8以后@Contended解决：</a></li></ul></li><li><a href="#que-ren-nei-cun-bu-ju">确认内存布局</a></li><li><a href="#xiao-guo-ce-shi">效果测试</a><ul><li><a href="#ce-shi-yuan-shi-wen-ti-ren-rou-you-hua-contended-you-hua">测试原始问题、人肉优化、<code>@Contended</code>优化。</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="cacheline-jian-jie"> CacheLine简介</span><a href="#cacheline-jian-jie" class="header-anchor">#</a></h1><p>CPU缓存系统中是以缓存行（cache line）为单位存储的。缓存行是2的整数幂个连续字节，目前主流的CPU Cache的Cache Line大小都是64Bytes（和操作系统、CPU有关）。**当多线程修改互相独立的变量时，如果这些变量共享同一个缓存行，就会无意中影响彼此的性能，这就是伪共享。**缓存行上的写竞争是运行在SMP系统中并行线程实现可伸缩性最重要的限制因素。</p><p>由于共享变量在CPU缓存中的存储是以缓存行为单位，一个缓存行可以存储多个变量（存满当前缓存行的字节数）；而CPU对缓存的修改又是以缓存行为最小单位的，如果多线程同时修改同一缓存行上的两个变量，那么就会出现上诉的伪共享问题。</p><p>伪共享是无声的性能杀手，因为从代码中很难看清楚是否会出现伪共享。对于多线程编程来说，<strong>特别是多线程处理列表和数组的时候</strong>，要非常注意伪共享的问题。否则不仅无法发挥多线程的优势，还可能比单线程性能还差。</p><h1><span id="wei-shi-me-cacheline-bing-fa-man"> 为什么CacheLine并发慢？</span><a href="#wei-shi-me-cacheline-bing-fa-man" class="header-anchor">#</a></h1><ul><li>下面的图中，X和Y在同一缓存行中，读取的时候只能一起从“内存–L3–L2–L1–寄存器”去加载。使用的时候反着从“寄存器-L1-L2-L3-主存”去拿，走得越远越慢。</li><li>所以如果你在做一些很频繁的事，你要尽量确保数据在L1缓存中。另外，线程之间共享一份数据的时候，需要一个线程把数据写回主存，而另一个线程访问主存中相应的数据。</li><li>但是当core1修改X的时候，把这个CacheLine读取进来修改完毕，根据MESI缓存一致性协议，缓存行会失效。需要从下级Cache或者其他核心的Cache，甚至主存重新load。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615095526972.png" alt="image-20200615095526972"></p><h2><span id="mesi-huan-cun-yi-zhi-xing-xie-yi"> MESI缓存一致性协议</span><a href="#mesi-huan-cun-yi-zhi-xing-xie-yi" class="header-anchor">#</a></h2><p>是多种一致性协议中的一种实现，规定缓存在同一时间只有一种状态：</p><p>在MESI协议中，每个Cache line有4个状态，可用2个bit表示，它们分别是：<br>M(Modified)：这行数据有效，数据被修改了，和内存中的数据不一致，数据只存在于本Cache中；<br>E(Exclusive)：这行数据有效，数据和内存中的数据一致，数据只存在于本Cache中；<br>S(Shared)：这行数据有效，数据和内存中的数据一致，数据存在于很多Cache中；<br>I(Invalid)：这行数据无效。</p><p>那么，假设有一个变量i=3（应该是包括变量i的缓存块，块大小为缓存行大小）；</p><p>已经加载到多核（a,b,c）的缓存中，此时该缓存行的状态为S(Share共享有效)；</p><p>此时其中的一个核a改变了变量i的值，那么在核a中的当前缓存行的状态将变为M（有效但修改了，和内存不一致），b,c核中的当前缓存行状态将变为I（无效）。如下图：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615104347330.png" alt="image-20200615104347330"></p><h1><span id="falsesharing-wei-gong-xiang-wen-ti"> <strong>FalseSharing</strong>伪共享问题</span><a href="#falsesharing-wei-gong-xiang-wen-ti" class="header-anchor">#</a></h1><p>在上面的情况下a核心修改后缓存状态变为M，b和c核心的缓存变为I无效，去重新load（从其他核心的缓存中同步，或者从主存同步，看CPU实现了）。</p><p>此时在核b上运行的线程，正好想要修改变量Y，那么就会出现相互竞争，相互失效的情况，这就是伪共享啦。</p><h1><span id="wei-gong-xiang-de-jie-jue-fang-an"> 伪共享的解决方案</span><a href="#wei-gong-xiang-de-jie-jue-fang-an" class="header-anchor">#</a></h1><p>下面使用一个带有long类型的简单对象来测试（使用一个long数组测试也行，略不直观）</p><h2><span id="yuan-shi-you-huan-cun-xing-jing-zheng-de-wen-ti"> 原始有缓存行竞争的问题</span><a href="#yuan-shi-you-huan-cun-xing-jing-zheng-de-wen-ti" class="header-anchor">#</a></h2><p>如下，假设一个数组有多个Obj1对象。我们多线程需要对不同位置的Obj1的x进行并发赋值，在修改的时候会因为一次load了多个Obj1到内存中，就会产生缓存行互相失效的竞争问题。这就是原始的伪共享问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象一个父类，为了完成缓存行通用测试，无意义。</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Obj</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通未进行缓存行优化的对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj1</span> <span class="keyword">extends</span> <span class="title">Obj</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> x;  <span class="comment">// 假设一个数组有多个Obj1对象，我们多线程需要对不同位置的Obj1的x进行赋值，在修改的时候会因为一次load了多个Obj1到内存中，就会产生缓存行竞争</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="jdk8-yi-qian-ren-rou-jie-jue"> JDK8以前人肉解决：</span><a href="#jdk8-yi-qian-ren-rou-jie-jue" class="header-anchor">#</a></h2><p>前后各加8个long（64位）来规避缓存行竞争，在诸如Disruptor等追求极致性能的地方会见到这种代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存行优化对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Obj2</span> <span class="keyword">extends</span> <span class="title">Obj</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> p1,p2,p3,p4,p5,p6,p7;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  因为对象前7个long+x是64个字节，正好一个缓存行。后面也是。</span></span><br><span class="line"><span class="comment">     *  所以多线程写的时候，两个线程永远不在一个缓存行中，效率更高。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">long</span> x;</span><br><span class="line">    <span class="keyword">long</span> p8,p9,p10,p11,p12,p13,p14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="jdk8-yi-hou-contended-jie-jue"> JDK8以后@Contended解决：</span><a href="#jdk8-yi-hou-contended-jie-jue" class="header-anchor">#</a></h2><p>使用@Contended注解自动进行缓存行填充，防止多线程竞争缓存行。JVM会给我们前后各加128bit的padding，保证规避了缓存行竞争。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用<span class="doctag">@Contended</span>注解自动进行缓存行填充，防止多线程竞争缓存行</span></span><br><span class="line"><span class="comment"> * 执行时，必须加上虚拟机参数-XX:-RestrictContended，<span class="doctag">@Contended</span>注释才会生效。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Contended</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Obj3</span> <span class="keyword">extends</span> <span class="title">Obj</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><span id="que-ren-nei-cun-bu-ju"> 确认内存布局</span><a href="#que-ren-nei-cun-bu-ju" class="header-anchor">#</a></h1><p>我们的两种优化是不是真的有效呢？JOL看一下这三个对象的内存布局：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Obj1 obj1 = <span class="keyword">new</span> Obj1();</span><br><span class="line">Obj2 obj2 = <span class="keyword">new</span> Obj2();</span><br><span class="line">Obj3 obj3 = <span class="keyword">new</span> Obj3();</span><br><span class="line">System.out.println(ClassLayout.parseInstance(obj1).toPrintable());</span><br><span class="line">System.out.println(ClassLayout.parseInstance(obj2).toPrintable());</span><br><span class="line">System.out.println(ClassLayout.parseInstance(obj3).toPrintable());</span><br></pre></td></tr></table></figure><p>可以看到：</p><ul><li>没加缓存行优化的Obj1：我们的核心属性，前后没有缓存行对齐，直接多线程修改它是有伪共享问题的（两个Obj1的x在同一个缓存行中）</li><li>使用人肉8个long进行缓存行优化的Obj2：我们的核心属性，前后都有64位的填充，多线程竞争也不会使得两个Obj2对象的x在同一个缓存行中</li><li>使用JDK自带@Contended修饰的Obj3：前后各有一个长达128字节的填充，多线程竞争也不会使得两个Obj2对象的x在同一个缓存行中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没加缓存行优化的简单extends的Obj1：</span></span><br><span class="line">com.xxxx.Obj1 object internals:</span><br><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4        (object header)                           81 c1 00 f8 (10000001 11000001 00000000 11111000) (-134168191)</span><br><span class="line">     12     4        (alignment/padding gap)                  </span><br><span class="line">     16     8   long Obj.x                                     0</span><br><span class="line">     24     8   long Obj1.x                                    0 <span class="comment"># 我们的核心属性，前后没有缓存行对齐，直接多线程修改它是有伪共享问题的（两个Obj1的x在同一个缓存行中）</span></span><br><span class="line">Instance size: 32 bytes</span><br><span class="line">Space losses: 4 bytes internal + 0 bytes external = 4 bytes total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 人肉使用了一堆long进行占位</span></span><br><span class="line">com.xxxx.Obj2 object internals:</span><br><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4        (object header)                           bf c1 00 f8 (10111111 11000001 00000000 11111000) (-134168129)</span><br><span class="line">     12     4        (alignment/padding gap)                  </span><br><span class="line">     16     8   long Obj.x                                     0 <span class="comment"># 这个是继承的，不用管</span></span><br><span class="line">     24     8   long Obj2.p1                                   0</span><br><span class="line">     32     8   long Obj2.p2                                   0</span><br><span class="line">     40     8   long Obj2.p3                                   0</span><br><span class="line">     48     8   long Obj2.p4                                   0</span><br><span class="line">     56     8   long Obj2.p5                                   0</span><br><span class="line">     64     8   long Obj2.p6                                   0</span><br><span class="line">     72     8   long Obj2.p7                                   0</span><br><span class="line">     80     8   long Obj2.x                                    0 <span class="comment"># 我们的核心属性，前后都有64位的填充，多线程竞争也不会使得两个Obj2对象的x在同一个缓存行中</span></span><br><span class="line">     88     8   long Obj2.p8                                   0</span><br><span class="line">     96     8   long Obj2.p9                                   0</span><br><span class="line">    104     8   long Obj2.p10                                  0</span><br><span class="line">    112     8   long Obj2.p11                                  0</span><br><span class="line">    120     8   long Obj2.p12                                  0</span><br><span class="line">    128     8   long Obj2.p13                                  0</span><br><span class="line">    136     8   long Obj2.p14                                  0</span><br><span class="line">Instance size: 144 bytes</span><br><span class="line">Space losses: 4 bytes internal + 0 bytes external = 4 bytes total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用JDK的@Contended修饰的class</span></span><br><span class="line">com.xxxx.Obj3 object internals:</span><br><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4        (object header)                           05 c2 00 f8 (00000101 11000010 00000000 11111000) (-134168059)</span><br><span class="line">     12     4        (alignment/padding gap)                  </span><br><span class="line">     16     8   long Obj.x                                     0</span><br><span class="line">     24   128        (alignment/padding gap)                  <span class="comment"># 前面有一个长达128字节的填充</span></span><br><span class="line">    152     8   long Obj3.x                                    0 <span class="comment"># 我们的核心对象</span></span><br><span class="line">    160   128        (loss due to the next object alignment) <span class="comment"># 后面也有一个长达128的填充</span></span><br><span class="line">Instance size: 288 bytes</span><br><span class="line">Space losses: 132 bytes internal + 128 bytes external = 260 bytes total</span><br></pre></td></tr></table></figure><h1><span id="xiao-guo-ce-shi"> 效果测试</span><a href="#xiao-guo-ce-shi" class="header-anchor">#</a></h1><p>下面是工具方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试缓存行工具方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testCacheLine</span><span class="params">(Obj[] arr)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        StopWatch watch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">        watch.start();</span><br><span class="line">        <span class="comment">// 一亿次</span></span><br><span class="line">        <span class="keyword">long</span> times = <span class="number">1_0000_0000l</span>;</span><br><span class="line"></span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 启动2个线程，对数组的两个位置进行竞争修改</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (Long i = <span class="number">0l</span>; i &lt; times; i++) &#123;</span><br><span class="line">                arr[<span class="number">0</span>].x = i;</span><br><span class="line">            &#125;</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (Long i = <span class="number">0l</span>; i &lt; times; i++) &#123;</span><br><span class="line">                arr[<span class="number">1</span>].x = i;</span><br><span class="line">            &#125;</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">// 等待两个线程都执行完毕，计时</span></span><br><span class="line">        latch.await();</span><br><span class="line">        watch.stop();</span><br><span class="line">        System.out.println(watch.getTime());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3><span id="ce-shi-yuan-shi-wen-ti-ren-rou-you-hua-contended-you-hua"> 测试原始问题、人肉优化、<code>@Contended</code>优化。</span><a href="#ce-shi-yuan-shi-wen-ti-ren-rou-you-hua-contended-you-hua" class="header-anchor">#</a></h3><p>注意<code>@Contended</code>需要运行的时候加上<code>-XX:-RestrictContended</code>参数才生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 结果很慢，因为对象里只有一个long是8个字节，缓存行64个字节。</span></span><br><span class="line"><span class="comment">             * 多个线程并发写的时候，必然需要进行缓存行同步。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Obj [] arr1 = <span class="keyword">new</span> Obj1[<span class="number">2</span>];</span><br><span class="line">            arr1[<span class="number">0</span>] = <span class="keyword">new</span> Obj1();</span><br><span class="line">            arr1[<span class="number">1</span>] = <span class="keyword">new</span> Obj1();</span><br><span class="line">            <span class="comment">// 缓存行伪共享测试</span></span><br><span class="line">            testCacheLine(arr1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 快，因为对象前7个long+x是64个字节，正好一个缓存行。后面也是。</span></span><br><span class="line"><span class="comment">             * 所以多线程写的时候，两个线程永远不在一个缓存行中，效率更高。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Obj [] arr2 = <span class="keyword">new</span> Obj2[<span class="number">2</span>];</span><br><span class="line">            arr2[<span class="number">0</span>] = <span class="keyword">new</span> Obj2();</span><br><span class="line">            arr2[<span class="number">1</span>] = <span class="keyword">new</span> Obj2();</span><br><span class="line">            <span class="comment">// 缓存行伪共享优化测试</span></span><br><span class="line">            testCacheLine(arr2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 快，因为<span class="doctag">@Contended</span>会自动填充，正好一个缓存行。后面也是。</span></span><br><span class="line"><span class="comment">             * 所以多线程写的时候，两个线程永远不在一个缓存行中，效率更高。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@Contended</span> 需要加上-XX:-RestrictContended才生效</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Obj [] arr3 = <span class="keyword">new</span> Obj3[<span class="number">2</span>];</span><br><span class="line">            arr3[<span class="number">0</span>] = <span class="keyword">new</span> Obj3();</span><br><span class="line">            arr3[<span class="number">1</span>] = <span class="keyword">new</span> Obj3();</span><br><span class="line">            testCacheLine(arr3);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>多次运行可以发现未优化的速度明显慢于后两者优化后的：</p><p>后两者优化后的差异不大，通常都很接近。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1802</span><br><span class="line">674</span><br><span class="line">874</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cacheline-jian-jie&quot;&gt;CacheLine简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#wei-shi-me-cacheline-
      
    
    </summary>
    
    
      <category term="并发" scheme="https://blog.sofunnyai.com/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="多线程" scheme="https://blog.sofunnyai.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发" scheme="https://blog.sofunnyai.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>AQS原理</title>
    <link href="https://blog.sofunnyai.com/article/aqs.html"/>
    <id>https://blog.sofunnyai.com/article/aqs.html</id>
    <published>2018-03-02T05:24:15.000Z</published>
    <updated>2020-06-15T08:53:51.485Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#suo-de-qian-shi-jin-sheng">锁的前世今生</a><ul><li><a href="#le-guan-suo-yu-bei-guan-suo">乐观锁与悲观锁</a></li></ul></li><li><a href="#aqs">AQS</a><ul><li><a href="#aqs-shi-sha">AQS是啥</a></li><li><a href="#tong-bu-de-chou-xiang-yu-ge-chong-shi-xian">同步的抽象与各种实现：</a></li></ul></li><li><a href="#cong-reentrantlock-shuo-qi">从ReentrantLock说起</a><ul><li><a href="#reentrantlock-de-yuan-ma">ReentrantLock的源码</a></li><li><a href="#aqs-de-nei-bu">AQS的内部</a></li><li><a href="#shuang-xiang-lian-biao-shi-xian-de-tong-bu-dui-lie">双向链表实现的同步队列</a></li><li><a href="#aqs-jia-suo-de-yuan-ma">AQS加锁的源码</a><ul><li><a href="#acquire-ru-kou-he-xin-fang-fa">acquire入口—核心方法</a></li><li><a href="#tryacquire-zi-lei-shi-xian-de-mo-ban">tryAcquire子类实现的模板</a></li><li><a href="#addwaiter-xian-cheng-ru-he-pai-dui-zi-xuan-tian-jia-dao-wei-bu-zhi-dao-cheng-gong-wei-zhi">addWaiter-线程如何排队— 自旋添加到尾部，直到成功为止</a></li><li><a href="#suo-yi-reentrantlock-pai-dui-de-guo-cheng-shi">所以ReentrantLock排队的过程是：</a></li><li><a href="#acquirequeued-wei-ru-dui-huo-qu-suo">acquireQueued—尾入队获取锁</a></li><li><a href="#shouldparkafterfailedacquire-pan-duan-huo-qu-suo-shi-bai-hou-shi-fou-ying-gai-park-zu-duan">shouldParkAfterFailedAcquire 判断获取锁失败后是否应该park阻断</a></li><li><a href="#gong-ping-suo-he-fei-gong-ping-suo-de-ti-xian">公平锁和非公平锁的体现</a></li></ul></li></ul></li><li><a href="#aqs-suo-shi-fang-de-yuan-ma">AQS锁释放的源码</a></li><li><a href="#aqs-de-conditionobject">AQS的ConditionObject</a></li><li><a href="#reentrantreadwritelock-du-xie-suo-gong-xiang-suo">ReentrantReadWriteLock读写锁（共享锁）</a><ul><li><a href="#du-xie-suo-de-status-she-ji">读写锁的status设计</a></li><li><a href="#xie-suo-de-dai-ma">写锁的代码</a></li><li><a href="#jie-zhao-shi-du-suo-de-dai-ma">接着是读锁的代码：</a></li></ul></li><li><a href="#can-kao">参考</a></li></ul><!-- tocstop --></div><h1><span id="suo-de-qian-shi-jin-sheng"> 锁的前世今生</span><a href="#suo-de-qian-shi-jin-sheng" class="header-anchor">#</a></h1><p>先来一个镇楼图，来自美团技术：</p><p>锁的升级过程可以参见<a href="../volatile-and-synchronized.html">《多线程之volatile和synchronized》</a></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615024301986.png" alt="image-20200615024301986"></p><h2><span id="le-guan-suo-yu-bei-guan-suo"> 乐观锁与悲观锁</span><a href="#le-guan-suo-yu-bei-guan-suo" class="header-anchor">#</a></h2><ul><li>悲观锁：对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候<strong>一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。<strong>Java中，synchronized关键字和Lock的实现类都是悲观锁。（不能并发修改，只能排队顺序）-------适合</strong>写操作多</strong>的场景，先加锁可以保证<strong>写操作时数据正确</strong>。</li><li>乐观锁：而乐观锁认为自己在使用数据时<strong>不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</strong> （可能并发修改，如果真并发修改了，再议）--------------适合读操作多(写少)的场景，不加锁的特点能够使其<strong>读操作的性能大幅提升</strong>。(没有加锁开销)</li><li>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</li></ul><h1><span id="aqs"> AQS</span><a href="#aqs" class="header-anchor">#</a></h1><h2><span id="aqs-shi-sha"> AQS是啥</span><a href="#aqs-shi-sha" class="header-anchor">#</a></h2><p>如果从来没有听说过AQS的同学要知道这个，可以先看下<code>ReentrantLock</code>，<code>ReentrantLock</code>实现了一个<code>Lock</code>接口，并持有一个私有抽象静态<code>Sync</code>对象，这个抽象<code>Sync</code>又有两个实现，分别是公平锁<code>FairLock</code>和非公平锁<code>NonFiarLock</code>。缺省是非公平锁。</p><ul><li><strong>公平锁</strong>：多个线程按照申请锁的顺序去获得锁，后申请锁的线程需要排队，等它之前的线程获得锁并释放后，它才能获得锁；</li><li><strong>非公平锁</strong>：线程获得锁的顺序于申请锁的顺序无关，申请锁的线程可以直接尝试获得锁，谁抢到就是谁的；</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200614222312482.png" alt="image-20200614222312482"></p><p>具体的结构代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7373984872572414699L</span>;</span><br><span class="line">    <span class="comment">/** Synchronizer providing all implementation mechanics */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;   <span class="comment">// 实际ReentrantLock到底是公平还是非公平是new的时候指定的实现类。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base of synchronization control for this lock. Subclassed</span></span><br><span class="line"><span class="comment">     * into fair and nonfair versions below. Uses AQS state to</span></span><br><span class="line"><span class="comment">     * represent the number of holds on the lock.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5179523762034025860L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Performs &#123;<span class="doctag">@link</span> Lock#lock&#125;. The main reason for subclassing</span></span><br><span class="line"><span class="comment">         * is to allow fast path for nonfair version.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>而抽象类<code>Sync</code>继承的<code>AbstractQueuedSynchronizer</code>类（简称AQS，抽象队列同步器）是是一个可以用来实现线程同步的基础工具。也就是说我们常用的<code>ReentrantLock</code>底层是由<code>AQS</code>实现的。</p><p>也就是说：AQS是一个提供了同步功能的<strong>基础设施</strong>，可以用它来完成锁同步等功能。在Java的并发包中大量使用。</p><h2><span id="tong-bu-de-chou-xiang-yu-ge-chong-shi-xian"> 同步的抽象与各种实现：</span><a href="#tong-bu-de-chou-xiang-yu-ge-chong-shi-xian" class="header-anchor">#</a></h2><p><strong>器AQS是公共逻辑，各种Lock的实现算是自定义的业务逻辑：</strong></p><p>AQS和Sync、FairSync、NonfairSync都是公共的抽象逻辑，而Lock、ReadLock、ReentrantLock都算是业务逻辑。这些业务逻辑是有各个场景的特点，给予我们的公共抽象逻辑基础设施来实现的。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200608153944872.png" alt="image-20200608153944872"></p><p>比如CountdownLatch里面也是有AQS和实现的。</p><p>此外<code>ReentrantLock</code>底层的Lock接口还保证了<code>ReentrantLock</code>的行为具有以下方法实现：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200607134100117.png" alt="image-20200607134100117"></p><h1><span id="cong-reentrantlock-shuo-qi"> 从ReentrantLock说起</span><a href="#cong-reentrantlock-shuo-qi" class="header-anchor">#</a></h1><p>ReentrantLock作为JUC包提供的可重入锁，和Synchronized关键字的区别如下：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615023855502.png" alt="image-20200615023855502"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// **************************Synchronized的使用方式**************************</span></span><br><span class="line"><span class="comment">// 1.用于代码块</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 2.用于对象</span></span><br><span class="line"><span class="keyword">synchronized</span> (object) &#123;&#125;</span><br><span class="line"><span class="comment">// 3.用于方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 4.可重入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// **************************ReentrantLock的使用方式**************************</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> throw Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1.初始化选择公平锁、非公平锁</span></span><br><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 2.可用于代码块</span></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 3.支持多种加锁方式，比较灵活; 具有可重入特性</span></span><br><span class="line"><span class="keyword">if</span>(lock.tryLock(<span class="number">100</span>, TimeUnit.MILLISECONDS))&#123; &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 4.手动释放锁</span></span><br><span class="line">lock.unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html" target="_blank" rel="noopener">https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html</a></p></blockquote><h2><span id="reentrantlock-de-yuan-ma"> ReentrantLock的源码</span><a href="#reentrantlock-de-yuan-ma" class="header-anchor">#</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br><span class="line">    <span class="comment">// 继承AQS，有一些默认实现</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">      <span class="comment">//......  一些AQS的抽象方法实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一些Sync抽象方法的实现（主要是非公平加锁和公平加锁，这里以非公平为例）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))  <span class="comment">// CAS修改爷爷类AQS的state，去加锁--------------保证原子性</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());  <span class="comment">// 修改成功的话去设置AQS当前锁的独占线程是我</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                acquire(<span class="number">1</span>);  <span class="comment">// 修改失败的就去AQS执行aquire尝试获得锁，看下面AQS</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实现AQS报错的源码获取一次锁，公平和非公平是两个实现，此处是非公平</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nonfairTryAcquire(acquires);   <span class="comment">// nonfairTryAcquire的实现：判断状态为0，独占是当前线程就重入+1返回true。不是重入的话就CAS抢占锁并设置AQS独占线程是我返回true，state=1或者没抢到返回false。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ReentrantLock内部使用了一个AQS的模板实现Sync，这个Sync又针对公平锁和非公平锁有两种实现。</li><li>非公平锁一上来就先CAS去修改AQS的锁状态state（unsafe用内存偏移量去修改，保证原子性），再去<code>acquire(1)</code></li><li>公平的是上来就去<code>acquire(1)</code></li><li><code>acquire(1)</code>可以看下面AQS的部分</li></ul><h2><span id="aqs-de-nei-bu"> AQS的内部</span><a href="#aqs-de-nei-bu" class="header-anchor">#</a></h2><p>开门见山：</p><ul><li>AQS内部有一个双向链表实现一个FIFO的同步队列来维护当前获取锁失败的线程。</li><li>使用一个<strong>volatile的int类型的同步状态state</strong>和一系列方法实现同步。（state的各个值什么含义是给子类去实现的）</li><li>AQS内部还有一个当前独占线程，来标识谁在占用同步状态</li></ul><p><code>AbstractQueuedSynchronizer</code>使用了模板方法的设计模式，把大部分的流程都实现了，但关键步骤使用抽象方法、抛异常的方式，交给子类去强制实现个性化定制。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 独占地获取锁和释放锁(非共享读写锁)</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有更多，见下图</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200607143948752.png" alt="image-20200607143948752"></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200607144001939.png" alt="image-20200607144001939"></p><p><code>AQS</code>提供的模板方法主要分为三类：</p><ul><li>独占式地获取和释放锁；</li><li>共享式地获取和释放锁；</li><li>查询<code>AQS</code>的同步队列中正在等待的线程情况；</li></ul><h2><span id="shuang-xiang-lian-biao-shi-xian-de-tong-bu-dui-lie"> 双向链表实现的同步队列</span><a href="#shuang-xiang-lian-biao-shi-xian-de-tong-bu-dui-lie" class="header-anchor">#</a></h2><ul><li>AQS里面有一个volatile int类型的锁状态<code>state</code>，多线程CAS竞争修改。</li><li>AQS同步器内部有一个同步队列，每次线程获取锁失败就会增加一个Node到队尾，释放锁成功就会唤起队列最前面的Node中的线程，这个线程再去尝试。</li><li>队列中的头节点<code>head</code>就是当前已经获取了锁，正在执行的线程对应的节点；而之后的这些节点，则对应着获取锁失败，正在排队的线程。</li><li>AQS持有链表的<code>head</code>和<code>tail</code>节点，每个Node节点里面除了<code>pre</code>和<code>next</code>还有当前的线程。</li><li>当一个线程获取锁失败，它会被封装成一个<code>Node</code>，加入同步队列的尾部排队，同时线程会进入阻塞状态。</li><li>而当头节点对应的线程释放锁时，它会唤醒它的下一个节点。</li><li>被唤醒的节点对应的线程开始尝试获取锁，若获取成功，它就会将自己置为<code>head</code>，然后将原来的<code>head</code>移出队列。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200607152436844.png" alt="image-20200607152436844"></p><h2><span id="aqs-jia-suo-de-yuan-ma"> AQS加锁的源码</span><a href="#aqs-jia-suo-de-yuan-ma" class="header-anchor">#</a></h2><h3><span id="acquire-ru-kou-he-xin-fang-fa"> acquire入口—核心方法</span><a href="#acquire-ru-kou-he-xin-fang-fa" class="header-anchor">#</a></h3><p><code>ReentrantLock</code>的<code>lock()</code>方法调用了<code>AQS</code>的下面方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原文注释说：这是一个独占模式、忽略被打断。通过至少一次成功的tryAcquire就能拿到锁。</span></span><br><span class="line"><span class="comment">// 否则线程入队，反复调用tryAcquire被阻塞、解阻塞，直到返回true。</span></span><br><span class="line"><span class="comment">// 这个方法可以用来实现Lock.lock()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;    <span class="comment">// FiarSync这里直接传了1进来调用</span></span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;   <span class="comment">// tryAcquire成功则啥也没干地结束，失败继续，公平锁实现的时候如果有等的更久的会不去抢--------只有自己的时候不会排队</span></span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))  <span class="comment">// 先包装Node，addWriter续尾，再acquireQueued去阻塞</span></span><br><span class="line">            selfInterrupt();  <span class="comment">// 如果里面在队列等待锁的过程中，被别人interrupt了是无法响应的。解锁后这里要继续处理响应interruput方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先调用<code>tryAcquire</code>尝试获取一次锁，若返回<code>true</code>，表示获取成功，则<code>acquire</code>方法将直接返回（没有构建同步队列）；若返回<code>false</code>，则会继续向后执行<code>acquireQueued</code>方法；-------公平和非公平此处tryAcquire的实现有差异，非公平先去CAS竞争state了一次再去判断重入，公平的直接判断没有等待的(hasQueuedPredecessors)的线程才acquire。</li><li><code>tryAcquire</code>返回<code>false</code>后，将执行<code>acquireQueued</code>，但是这个方法传入的参数调用了<code>addWaiter</code>方法；</li><li><code>addWaiter</code>方法的作用是将当前线封装成同步队列的节点，然后加入到同步队列的尾部进行排队，并返回此节点；（CAS去设置head、tail，失败则for死循环再来一轮。第一个head是一个空节点）</li><li><code>addWaiter</code>方法执行完成后，将它的返回值作为参数，调用<code>acquireQueued</code>方法。<code>acquireQueued</code>方法的作用是让当前线程在同步队列中阻塞，然后在被其他线程唤醒时去获取锁；-----这里会阻塞park</li><li>若线程被唤醒并成功获取锁后，将从<code>acquireQueued</code>方法中退出，同时返回一个<code>boolean</code>值表示当前线程是否被中断，若被中断，则会执行下面的<code>selfInterrupt</code>方法，响应中断；</li></ul><h3><span id="tryacquire-zi-lei-shi-xian-de-mo-ban"> tryAcquire子类实现的模板</span><a href="#tryacquire-zi-lei-shi-xian-de-mo-ban" class="header-anchor">#</a></h3><p><code>tryAcquire</code>是一个模板方法，留给子类的公平锁、非公平锁按场景去实现。不同的场景根据这个arg去修改state字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板方法，留给子类去实现</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公平锁实现的时候如果有等的更久的会不去抢，非公平锁上来就CAS抢state从0为1。成功就返回，没成功判断重入，重入返回true，否则false。</p><p>如果tryAcquire没竞争到锁，下面开始排队：</p><h3><span id="addwaiter-xian-cheng-ru-he-pai-dui-zi-xuan-tian-jia-dao-wei-bu-zhi-dao-cheng-gong-wei-zhi"> addWaiter-线程如何排队— 自旋添加到尾部，直到成功为止</span><a href="#addwaiter-xian-cheng-ru-he-pai-dui-zi-xuan-tian-jia-dao-wei-bu-zhi-dao-cheng-gong-wei-zhi" class="header-anchor">#</a></h3><p>获取锁失败后到达<code>addWaiter</code>添加一个等待者：</p><p>将当前线程new 一个Node放到队列尾部，如果队列为空创建一个傀儡节点再添加尾部（傀儡节点就代表现在正在运行的那个线程）。如果加入失败就自旋(enq)直到添加成功，最后返回此节点。</p><p>（CAS去setTail一遍，失败的话后面<code>enq</code>循环一遍一遍CAS保证成功入队续上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">        Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">        <span class="comment">// 拿出尾，作为前序节点，第一次是null</span></span><br><span class="line">        Node pred = tail;</span><br><span class="line">        <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;  <span class="comment">// 如果有尾，说明不是第一次，否则是第一次队列未初始化执行下面enq循环再试</span></span><br><span class="line">            node.prev = pred;      <span class="comment">// 新节点的前指针，指向上一个尾</span></span><br><span class="line">            <span class="comment">// CAS将新节点node设置为新尾节点</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">                pred.next = node;   <span class="comment">// 设置成功，前尾的后指针指向当前新尾</span></span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;  <span class="comment">// 尾为空，执行下面enq初始化队列</span></span><br><span class="line">        &#125;</span><br><span class="line">        enq(node);   <span class="comment">// 初始化并CAS续尾（CAS设置head、tail）</span></span><br><span class="line">        <span class="keyword">return</span> node;  <span class="comment">// 返回</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没初始化则初始化，然后入队尾，注意初始化的时候new了一个空的傀儡节点作为header，然后再来一轮for循环CAS续上的。（如果没抢到就再来for循环，直到CAS抢到再返回）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts node into queue, initializing if necessary  一次入队，需要的时候进行初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node the node to insert</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> node's predecessor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Node t = tail;   <span class="comment">// 拿出尾</span></span><br><span class="line">            <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize   没有尾，说明是第一次，需要初始化一个空的head再往后排</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))   <span class="comment">// head使用CAS初始化了一个虚拟的傀儡节点！这里是重点！！！！此时多线程的锁会竞争</span></span><br><span class="line">                    tail = head; <span class="comment">// 初始化首尾都是同一个，然后重新来for一次添加尾</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  <span class="comment">//第二轮以上for，初始化过，往最后排</span></span><br><span class="line">                node.prev = t;  <span class="comment">// 当前节点的前一个设置为前尾</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;   <span class="comment">// CAS去看前尾变化没，没变化就变更新尾，此时多线程的锁会竞争</span></span><br><span class="line">                    t.next = node;   <span class="comment">// 前尾的next指向新尾，尾巴成功修改</span></span><br><span class="line">                    <span class="keyword">return</span> t;   <span class="comment">// CAS续成功才会返回，否则永远来续-----------------------唯一出口</span></span><br><span class="line">                &#125;<span class="comment">// CAS失败，说明前尾变更，被别的线程抢先续尾了，重新来入队续尾</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3><span id="suo-yi-reentrantlock-pai-dui-de-guo-cheng-shi"> 所以ReentrantLock排队的过程是：</span><a href="#suo-yi-reentrantlock-pai-dui-de-guo-cheng-shi" class="header-anchor">#</a></h3><ul><li>AQS使用一个双向链表来代表线程的先后顺序，head永远是空。AQS内部有status，0-free，&gt;0-lock。Node内部有线程信息和waitStatus(CANCLE/SIGNAL/CONDITION/和共享锁的PROPAGATE)。</li><li>初始状态（也就是锁未被任何线程占用的时候）线程A申请锁<strong>此时，成功获取到锁，无排队线程</strong>（tryAcquire直接拿到true并返回）</li><li>线程B申请该锁，且上一个线程未释放：enq方法的for循环先创建一个<strong>空的Head(只有next指向)初始化队列</strong>，<strong>再来一个for循环添加当前Node</strong>（包含自身线程信息，和pre指向，模式独占或者共享）。</li><li>再来一个线程C申请该锁，且占有该锁的线程未释放：CAS来续尾成功就返回，失败的话去enq里面for的CAS续尾到成功为止。(成功后修改pre和自己的互相指向)</li></ul><p>上面加入到队尾后，返回节点，传入下面的方法去获取锁。</p><h3><span id="acquirequeued-wei-ru-dui-huo-qu-suo"> acquireQueued—尾入队获取锁</span><a href="#acquirequeued-wei-ru-dui-huo-qu-suo" class="header-anchor">#</a></h3><p>acquireQueued方法就是把获取锁失败的Node放入队列中，让这个线程不断进行“获锁”,直到它**“成功获锁”**或者“<strong>不再需要锁（如被中断）</strong>”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 对队列里的节点node进行独占的、不可打断的获取锁。</span></span><br><span class="line"><span class="comment">    *  acquire()中和condition对象的各种await方法中被使用。</span></span><br><span class="line"><span class="comment">     * Acquires in exclusive uninterruptible mode for thread already in</span></span><br><span class="line"><span class="comment">     * queue. Used by condition wait methods as well as acquire.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node the node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arg the acquire argument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if interrupted while waiting</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;  <span class="comment">// acquire方法传入了刚刚加入队尾的一个节点，await方法传入的是一个节点</span></span><br><span class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;   <span class="comment">// 是否被打断的标识</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">final</span> Node p = node.predecessor();   <span class="comment">// 拿到当前Node的前序节点</span></span><br><span class="line">                <span class="comment">// 如果前序是head才会去CAS抢占锁。(现在这个线程解锁后也成为新的head了)</span></span><br><span class="line">                <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;   <span class="comment">//(tryAcquire是模板方法，子类FairSync等实现的，去尝试CAS修改state获取锁后，下面再来把自己变成head)</span></span><br><span class="line">                    <span class="comment">// 到这里就是已经获取到锁了，旧头换新头（上面是CAS的，这里没有线程安全问题）</span></span><br><span class="line">                    setHead(node);   <span class="comment">// 这个是把当前节点设置为傀儡节点头，删除里面的thread等信息（已经拿到锁了，放thread没有意义，无助于GC）</span></span><br><span class="line">                    p.next = <span class="keyword">null</span>; <span class="comment">// help GC   释放之前的傀儡头引用，帮助回收</span></span><br><span class="line">                    failed = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span> interrupted;   <span class="comment">//----------------------------唯一出口。 返回打断标识</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 自己不是老二（前序不是head）或者老二获取锁tryAcquire失败了，踏踏实实的先看是否应该park</span></span><br><span class="line">                <span class="comment">// 如果可以的话park等待，然后阻塞检查是否打断。打断了进入if内，没打断就结束这一轮获取。（不可能让一直死循环for来判断，CPU该爆炸了）</span></span><br><span class="line">                <span class="comment">// 不应该park的话就继续下一轮for再来抢占</span></span><br><span class="line">                </span><br><span class="line">            <span class="comment">// shouldParkAfterFailedAcquire方法判断当前线程是否能够进入等待状态，</span></span><br><span class="line">            <span class="comment">// 若当前线程的节点不是头节点的下一个节点，则需要进入等待状态，</span></span><br><span class="line">            <span class="comment">// 在此方法内部，当前线程会找到它的前驱节点中，第一个还在正常等待或执行的节点，</span></span><br><span class="line">            <span class="comment">// 让其作为自己的直接前驱，然后在需要时将自己唤醒（因为其中有些线程可能被中断），</span></span><br><span class="line">            <span class="comment">// 若找到，则返回true，表示自己可以进入等待状态了；</span></span><br><span class="line">            <span class="comment">// 则继续调用parkAndCheckInterrupt方法，当前线程在这个方法中等待，</span></span><br><span class="line">            <span class="comment">// 直到被其他线程唤醒，或者被中断后返回，返回时将返回一个boolean值，</span></span><br><span class="line">            <span class="comment">// 表示这个线程是否被中断，若为true，则将执行下面一行代码，将中断标志置为true</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;  <span class="comment">// 前面节点是SIGNAL，返回true可以阻塞自己</span></span><br><span class="line">                    parkAndCheckInterrupt()) <span class="comment">// 阻塞等待被唤醒，使用LockSupport.park()------------------------------------此时外面lock.lock()会阻塞，业务代码等待。</span></span><br><span class="line">                    interrupted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 上面代码中只有一个return语句，且return的前一句就是failed = false;</span></span><br><span class="line">        <span class="comment">// 所以只有当异常发生时，failed才会保持true的状态运行到此处；</span></span><br><span class="line">        <span class="comment">// 异常可能是线程被中断，也可能是其他方法中的异常，</span></span><br><span class="line">        <span class="comment">// 比如我们自己实现的tryAcquire方法</span></span><br><span class="line">        <span class="comment">// 此时将取消线程获取锁的动作，将它从同步队列中移除</span></span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>方法的主流程如下：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615014513513.png" alt="image-20200615014513513"></p><h3><span id="shouldparkafterfailedacquire-pan-duan-huo-qu-suo-shi-bai-hou-shi-fou-ying-gai-park-zu-duan"> shouldParkAfterFailedAcquire 判断获取锁失败后是否应该park阻断</span><a href="#shouldparkafterfailedacquire-pan-duan-huo-qu-suo-shi-bai-hou-shi-fou-ying-gai-park-zu-duan" class="header-anchor">#</a></h3><p>首先记着这个方法是在一个死循环中，获取锁失败就来执行一遍。为了方式for死循环大量占用CPU，可以想象绝大部分节点必然是返回true，然后park的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 检查并更新无法获取锁的节点的状态。在所有循环里返回true就阻塞。要求传入的pred 就是node的前序Node.pre指向的那个</span></span><br><span class="line"><span class="comment">     * Checks and updates status for a node that failed to acquire.</span></span><br><span class="line"><span class="comment">     * Returns true if thread should block. This is the main signal</span></span><br><span class="line"><span class="comment">     * control in all acquire loops.  Requires that pred == node.prev.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pred node's predecessor holding status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node the node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if thread should block</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ws = pred.waitStatus; <span class="comment">// 前序节点等待状态</span></span><br><span class="line">        <span class="comment">// Node的WaitStatus，这里的SIGNAL是release方法写入的，下面再说</span></span><br><span class="line">        <span class="keyword">if</span> (ws == Node.SIGNAL)   <span class="comment">// 前序节点已经release，发出信号了，返回true标识可以park阻塞---------------这是唯一一个可以阻塞的true返回</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * This node has already set status asking a release</span></span><br><span class="line"><span class="comment">             * to signal it, so it can safely park.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;   <span class="comment">// 前序节点是取消状态，一直往前反向找到一个非取消的，这些Cancelled都被删掉了</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class="line"><span class="comment">             * indicate retry.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                node.prev = pred = pred.prev;</span><br><span class="line">            &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">            pred.next = node;         <span class="comment">//--------------其实是删掉了所有中途取消的节点，继续外面的for死循环来进下一轮</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 前一节点是0或者传播状态，我们需要一个信号，但是还没park阻塞，此轮CAS设置把前一节点为SIGNAL状态，让调用者重新再来一遍就会阻塞他。</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class="line"><span class="comment">             * need a signal, but don't park yet.  Caller will need to</span></span><br><span class="line"><span class="comment">             * retry to make sure it cannot acquire before parking.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);   <span class="comment">// pre设置为SIGNAL，下一轮来入口返回true，会阻塞</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  <span class="comment">//-----------删掉了cancel节点，或者SIGNAL了0或者传播节点，下一轮来阻塞</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面方法的流程图如下：</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/54297968" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/54297968</a></p></blockquote><p><img src="https://gitee.com/radio/pics/raw/master/img/v2-a9f87db22807c9c435b61975055b3d58_r.jpg" alt="preview"></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200608160739853.png" alt="image-20200608160739853"></p><h3><span id="gong-ping-suo-he-fei-gong-ping-suo-de-ti-xian"> 公平锁和非公平锁的体现</span><a href="#gong-ping-suo-he-fei-gong-ping-suo-de-ti-xian" class="header-anchor">#</a></h3><p>“不管<strong>公平</strong>还是<strong>非公平</strong>模式下，ReentrantLock对于排队中的线程都能保证，排在前面的一定比排在后面的线程优先获得锁”<strong>但是</strong>，非公平模式<strong>不保证</strong>“队列中的第一个线程一定就比新来的（未加入到队列）的线程优先获锁”因为队列中的第一个线程尝试获得锁时，可能刚好来了一个线程也要获取锁，而这个刚来的线程都还未加入到等待队列，此时两个线程同时随机竞争，很有可能，队列中的第一个线程竞争失败（而该线程等待的时间其实比这个刚来的线程等待时间要久）。</p><p>因为非公平锁上来就CAS开抢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                acquire(<span class="number">1</span>);  <span class="comment">//AQS,会调用下面的方法，直接开枪，可能和队列最前面那个一起竞争。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>而公平锁<code>hasQueuedPredecessors()</code>返回false，没有排在自己前面的才能去抢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Fair version of tryAcquire.  Don't grant access unless</span></span><br><span class="line"><span class="comment">         * recursive call or no waiters or is first.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;       <span class="comment">// 没有排在自己前面的，才能抢</span></span><br><span class="line">                    compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                    setExclusiveOwnerThread(current);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">                <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                setState(nextc);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** Marker to indicate a node is waiting in shared mode */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="comment">/** Marker to indicate a node is waiting in exclusive mode */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  线程的等待被取消</span></span><br><span class="line">        <span class="comment">/** waitStatus value to indicate thread has cancelled */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// SIGNAL后继节点即将被唤醒（表示该线程一切都准备好了,就等待锁空闲出来给我）</span></span><br><span class="line">        <span class="comment">/** waitStatus value to indicate successor's thread needs unparking */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 线程在等待某一个条件（Condition）被满足</span></span><br><span class="line">        <span class="comment">/** waitStatus value to indicate thread is waiting on condition */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//下一个共享获取应该是 无条件传播（当线程处在“SHARED”模式时，该字段才会被使用上，EXCLUSIVE独占模式不会）</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * waitStatus value to indicate the next acquireShared should</span></span><br><span class="line"><span class="comment">         * unconditionally propagate</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Status field, taking on only the values</span></span><br><span class="line"><span class="comment">             后继节点正在被park block，所以当前节点释放锁或者取消的时候必须要unpark唤醒后继。</span></span><br><span class="line"><span class="comment">             为了避免竞争，获取方法必须首先表明他们需需要一个信号，</span></span><br><span class="line"><span class="comment">             然后会尝试原子性的获取锁，如果失败才会block。</span></span><br><span class="line"><span class="comment">         *   SIGNAL:     The successor of this node is (or will soon be)</span></span><br><span class="line"><span class="comment">         *               blocked (via park), so the current node must</span></span><br><span class="line"><span class="comment">         *               unpark its successor when it releases or</span></span><br><span class="line"><span class="comment">         *               cancels. To avoid races, acquire methods must</span></span><br><span class="line"><span class="comment">         *               first indicate they need a signal,</span></span><br><span class="line"><span class="comment">         *               then retry the atomic acquire, and then,</span></span><br><span class="line"><span class="comment">         *               on failure, block.</span></span><br><span class="line"><span class="comment">         这个节点因为超时或者打断被取消，节点再也不会离开这个状态</span></span><br><span class="line"><span class="comment">         特别是一个线程取消后再也不会block</span></span><br><span class="line"><span class="comment">         *   CANCELLED:  This node is cancelled due to timeout or interrupt.</span></span><br><span class="line"><span class="comment">         *               Nodes never leave this state. In particular,</span></span><br><span class="line"><span class="comment">         *               a thread with cancelled node never again blocks.</span></span><br><span class="line"><span class="comment">         条件：这个节点正在一个条件队列中，他不会用作同步队列的节点，直到被transfer，这时候状态会被设置为0</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">         *   CONDITION:  This node is currently on a condition queue.</span></span><br><span class="line"><span class="comment">         *               It will not be used as a sync queue node</span></span><br><span class="line"><span class="comment">         *               until transferred, at which time the status</span></span><br><span class="line"><span class="comment">         *               will be set to 0. (Use of this value here has</span></span><br><span class="line"><span class="comment">         *               nothing to do with the other uses of the</span></span><br><span class="line"><span class="comment">         *               field, but simplifies mechanics.)</span></span><br><span class="line"><span class="comment">         传播：一个释放锁应该被传播到其他节点，在doReleaseShared中被设置来保证连续传播，除非其他操作介入。</span></span><br><span class="line"><span class="comment">         *   PROPAGATE:  A releaseShared should be propagated to other</span></span><br><span class="line"><span class="comment">         *               nodes. This is set (for head node only) in</span></span><br><span class="line"><span class="comment">         *               doReleaseShared to ensure propagation</span></span><br><span class="line"><span class="comment">         *               continues, even if other operations have</span></span><br><span class="line"><span class="comment">         *               since intervened.</span></span><br><span class="line"><span class="comment">         *   0:          None of the above</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         waitStatus以数值型排列以简化使用，非负数代表节点不需要signal</span></span><br><span class="line"><span class="comment">         大多数代码不想要检查特定的数值（只用判断符号）</span></span><br><span class="line"><span class="comment">         * The values are arranged numerically to simplify use.</span></span><br><span class="line"><span class="comment">         * Non-negative values mean that a node doesn't need to</span></span><br><span class="line"><span class="comment">         * signal. So, most code doesn't need to check for particular</span></span><br><span class="line"><span class="comment">         * values, just for sign.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         正常同步代码初始化为0，contidion节点的时候设置为CONDITION(-2),使用CAS修改。</span></span><br><span class="line"><span class="comment">         * The field is initialized to 0 for normal sync nodes, and</span></span><br><span class="line"><span class="comment">         * CONDITION for condition nodes.  It is modified using CAS</span></span><br><span class="line"><span class="comment">         * (or when possible, unconditional volatile writes).</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br></pre></td></tr></table></figure><p>Node 的类注释机翻</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">等待队列是“ CLH”（Craig，Landin和Hagersten）锁定队列的变体。 </span><br><span class="line">CLH锁通常用于自旋锁。相反，我们将它们用于阻塞同步器，但是使用相同的基本策略，将有关线程的某些控制信息保存在其节点的前身中。</span><br><span class="line">每个节点中的“状态”字段将跟踪线程是否应阻塞。</span><br><span class="line">节点的前任释放时会发出信号。</span><br><span class="line">否则，队列的每个节点都充当一个特定通知样式的监视器，其中包含一个等待线程。虽然状态字段不控制是否授予线程锁等。</span><br><span class="line">线程可能会尝试获取它是否在队列中的第一位。</span><br><span class="line">但是先行并不能保证成功。它只赋予了抗辩的权利。</span><br><span class="line">因此，当前发布的竞争者线程可能需要重新等待。</span><br><span class="line"></span><br><span class="line">&lt;p&gt;要加入CLH锁，您可以自动将其作为新尾部拼接。</span><br><span class="line">要出队，您只需设置头字段。</span><br><span class="line"></span><br><span class="line">&lt;p&gt;插入到CLH队列中，只需要对“ tail”执行一次原子操作，因此有一个从非排队到排队的简单原子分界点。</span><br><span class="line">同样，出队仅涉及更新“头”。但是，节点需要花费更多的精力来确定其后继者是谁，部分原因是要处理由于超时和中断而可能导致的取消。</span><br><span class="line">&lt;p&gt;“ prev”链接（在原始CLH锁中未使用）主要用于处理取消。</span><br><span class="line">如果取消某个节点，则其后继节点（通常）会重新链接到未取消的前任节点。有关自旋锁情况下类似机制的解释，请参见Scott和Scherer的论文，网址为http:&#x2F;&#x2F;www.cs.rochester.edu&#x2F;u&#x2F;scott&#x2F;synchronization&#x2F;。&lt;p&gt;</span><br><span class="line"></span><br><span class="line">我们还使用“下一个”链接来实现阻止机制。</span><br><span class="line">每个节点的线程ID保留在其自己的节点中，因此，前任通过遍历下一个next以确定它是哪个线程，来发信号给下一个节点唤醒。</span><br><span class="line">确定后继者必须避免与新排队的节点竞争以设置其前任节点的“ next”字段。----？ Determination of  successor must avoid races with newly queued nodes to set the &quot;next&quot; fields of their predecessors.</span><br><span class="line"></span><br><span class="line">    在必要时，可以通过在节点的后继者似乎为空时从原子更新的“尾部”反向检查来解决此问题。 </span><br><span class="line">（或者换句话说，next是一种优化，因此我们通常不需要反向扫描。）</span><br><span class="line">&lt;p&gt;Cancellation  对基本算法引入了一些保守性。由于我们必须轮询其他节点的取消，因此我们可能会遗漏没有注意到已取消的节点在我们前面还是后面。要解决此问题，必须始终在取消时取消后继者，使他们能够稳定在新的前任者身上，除非我们能确定一个未取消的前任者将承担这一责任。 &lt;p&gt; CLH队列需要一个虚拟标头节点才能开始。但是，我们不会在构建过程中创建它们，因为如果没有争执，那将是浪费时间。取而代之的是，构造节点，并在第一次争用时设置头和尾指针。 &lt;p&gt;等待条件的线程使用相同的节点，但是使用附加的链接。条件只需要在简单（非并行）链接队列中链接节点，因为仅当它们专用时才可以访问它们。等待时，将节点插入条件队列。收到信号后，该节点将转移到主队列。状态字段的特殊值用于标记节点所在的队列。 &lt;p&gt;感谢Dave Dice，Mark Moir，Victor Luchangco，Bill Scherer和Michael Scott以及JSR-166专家组的成员，对本课程的设计提供了有益的想法，讨论和批评。</span><br></pre></td></tr></table></figure><h1><span id="aqs-suo-shi-fang-de-yuan-ma"> AQS锁释放的源码</span><a href="#aqs-suo-shi-fang-de-yuan-ma" class="header-anchor">#</a></h1><p><code>AbstractQueuedSynchronizer#release()</code> 释放锁的方法，是底层释放锁的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unlock的实现,就一行代码调用这个AQS的release</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tryRelease(arg)) &#123;  <span class="comment">// 尝试释放锁，子类ReentrantLock实现了，如见下面（就是看独占线程ok，state-1，清除独占线程，返回free==0。）</span></span><br><span class="line">            Node h = head; <span class="comment">// 拿到head，head不为空，而且不是刚初始化</span></span><br><span class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>) <span class="comment">// waitStatus != 0 说明刚刚释放的过程中，又有一个新的来了，被后代把自己的waitStatus改成了SIGNAL</span></span><br><span class="line">                unparkSuccessor(h); <span class="comment">// 解除后继的阻塞</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>ReentrantLock#tryRelease(1)</code>释放锁，不用CAS，因为线程不一样释放不了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> c = getState() - releases; <span class="comment">// 锁的总数-释放数量    0的话就释放完了，&gt;0的话说明有重入没释放完</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())  <span class="comment">// 解锁线程不是当前正在独占的线程就抛异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            <span class="keyword">boolean</span> free = <span class="keyword">false</span>; </span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123; <span class="comment">// 释放完了，清空独占线程</span></span><br><span class="line">                free = <span class="keyword">true</span>;</span><br><span class="line">                setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            setState(c); <span class="comment">// 给stat设置剩余量，返回是否释放完了</span></span><br><span class="line">            <span class="keyword">return</span> free;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>解锁时唤醒后代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解锁时唤醒后代</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If status is negative (i.e., possibly needing signal) try</span></span><br><span class="line"><span class="comment">         * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class="line"><span class="comment">         * fails or if status is changed by waiting thread.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">        <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)  <span class="comment">// SIGNAL的，修改自己的wait状态为0</span></span><br><span class="line">            compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Thread to unpark is held in successor, which is normally</span></span><br><span class="line"><span class="comment">         * just the next node.  But if cancelled or apparently null,</span></span><br><span class="line"><span class="comment">         * traverse backwards from tail to find the actual</span></span><br><span class="line"><span class="comment">         * non-cancelled successor.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node s = node.next;</span><br><span class="line">    <span class="comment">// 后代为空（可能是队列从前往后唤醒到最后一个了，或者后代被取消）</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            s = <span class="keyword">null</span>;   <span class="comment">// 从尾巴反向往前走，如果队列是右边这种，就一直往前捋到一个正常的为止(head--cancle---cancle--...---node---tail)</span></span><br><span class="line">            <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">                <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                    s = t;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 后代不为空，解除park</span></span><br><span class="line">        <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">            LockSupport.unpark(s.thread);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>后继节点唤醒之后，又回到上面的<code>acquireQueued()</code>方法，去进行下一轮死循环，判断pre是不是head，是不是已经解锁了，CAS抢占锁。</p><p>抢到后：head的next置为null，GC回去干掉head。把唤起的自己这个node变成新head，清理新head里面的thread信息和head里的pre信息。</p><p>然后当前唤起节点获取到锁的线程开始继续执行后面的业务方法。。。</p><h1><span id="aqs-de-conditionobject"> AQS的ConditionObject</span><a href="#aqs-de-conditionobject" class="header-anchor">#</a></h1><h1><span id="reentrantreadwritelock-du-xie-suo-gong-xiang-suo"> ReentrantReadWriteLock读写锁（共享锁）</span><a href="#reentrantreadwritelock-du-xie-suo-gong-xiang-suo" class="header-anchor">#</a></h1><p><strong>独享锁</strong>：也叫排他锁，是指该<strong>锁一次只能被一个线程所持有。<strong>如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的</strong>synchronized</strong>和JUC中<strong>Lock</strong>的实现类就是互斥锁。</p><p><strong>共享锁</strong>：是指该锁可被多个线程所持有。如果<strong>线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁</strong>。获得<strong>共享锁的线程只能读数据，不能修改</strong>数据。</p><p>下面是JDK的读写分离锁代码实现：</p><p>读写分离锁,在读比较多(耗时)的场合比常规的重入锁更加有效率。</p><ul><li>读-读线程互不阻塞,多少各线程都可以并行一起读。</li><li>但是当<code>读-写</code>或者<code>写-写</code>线程相互竞争的时候会阻塞获取锁才可以操作</li></ul><p><strong>ReentrantReadWriteLock内部：</strong></p><ul><li><p>持有一个int类型的status锁状态。</p></li><li><p>一个Sync同步器，同步器继承自AQS，并有公平非公平两种实现。</p></li><li><p>持有一个共享的ReadLock，一个独占的WriteLock。</p></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615143328743.png" alt="image-20200615143328743"></p><p>可以看到ReentrantReadWriteLock有两把锁：<strong>ReadLock和WriteLock</strong>，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现ReadLock和WriteLock是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、ReentrantLock、Semaphore里面也都存在。</p><p>在ReentrantReadWriteLock里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。<strong>读锁是共享锁</strong>，<strong>写锁是独享锁</strong>。<strong>读锁的共享锁可保证并发读非常高效</strong>，<strong>而读写、写读、写写的过程互斥，因为读锁和写锁是分离的</strong>。所以ReentrantReadWriteLock的并发性<strong>相比一般的互斥锁有了很大提升。</strong></p><p>类图如下：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615150705528.png" alt="image-20200615150705528"></p><h2><span id="du-xie-suo-de-status-she-ji"> 读写锁的status设计</span><a href="#du-xie-suo-de-status-she-ji" class="header-anchor">#</a></h2><p>AQS的时候我们也提到了state字段（int类型，32位），该字段用来描述有多少线程获持有锁。</p><ul><li>在<strong>独享锁中这个值通常是0或者1（如果是重入锁的话state值就是重入的次数）</strong>，在<strong>共享锁中state就是持有锁的数量</strong>。</li><li>但是在ReentrantReadWriteLock中有读、写两把锁，所以需要在一个整型变量state上分别描述读锁和写锁的数量（或者也可以叫状态）。</li><li>于是将state变量“按位切割”切分成了两个部分，高16位表示读锁状态（读锁个数），低16位表示写锁状态（写锁个数）。如下图所示：</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615151414084.png" alt="image-20200615151414084"></p><p>代码中搞了一个<code>EXCLUSIVE_MASK</code>，是2^16-1。</p><p>通过和state求&amp;可以拿到低16位的数据。</p><p>通过和state&gt;&gt;16位拿到高16位的读锁数据。</p><h2><span id="xie-suo-de-dai-ma"> 写锁的代码</span><a href="#xie-suo-de-dai-ma" class="header-anchor">#</a></h2><p>了解了概念之后我们再来看代码，先看<strong>写锁</strong>的加锁源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Walkthrough:</span></span><br><span class="line"><span class="comment">             * 1. If read count nonzero or write count nonzero  and owner is a different thread, fail.   //读锁非0，写锁非0，或线程非当前，返回失败</span></span><br><span class="line"><span class="comment">             * 2. If count would saturate, fail. (This can only happen if count is already nonzero.)         // 数据超max，返回失败（max是2^16-1，因为status的int劈成两半一半给读，一半给写了）</span></span><br><span class="line"><span class="comment">             * 3. Otherwise, this thread is eligible for lock if   // 其他情况则可以获取锁并设置占有线程</span></span><br><span class="line"><span class="comment">             *    it is either a reentrant acquire or</span></span><br><span class="line"><span class="comment">             *    queue policy allows it. If so, update state</span></span><br><span class="line"><span class="comment">             *    and set owner.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">int</span> c = getState();                                                                                <span class="comment">// 获得锁的个数</span></span><br><span class="line">            <span class="keyword">int</span> w = exclusiveCount(c);                                                              <span class="comment">// 获取写锁的个数</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;                                                                                              <span class="comment">// 已经有线程获取锁了</span></span><br><span class="line">                <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line">                <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())         <span class="comment">// 写锁为0，即读锁不为0. 或 非当前线程持有写锁，就返回失败</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)              <span class="comment">// 超过2^16-1个写线程最大数量，失败</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                <span class="comment">// Reentrant acquire</span></span><br><span class="line">                setState(c + acquires);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="comment">// w=0，且当前线程需要阻塞，返回失败false（非公平writerShouldBlock永远返回false不用阻塞，公平锁看队列有没有排队，有就true排队）</span></span><br><span class="line">            <span class="keyword">if</span> (writerShouldBlock() ||                                                                  </span><br><span class="line">                !compareAndSetState(c, c + acquires))                                   <span class="comment">// 否则CAS增加写线程数量失败也返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            setExclusiveOwnerThread(current);                                             <span class="comment">// c=0,w=0 或者 c&gt;0,w&gt;0重入，设置当前线程占有，返回true</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>这段代码首先取到当前锁的个数c（这个数可能很大，是由高16位和低16位组合起来的），然后再通过c来获取写锁的个数w。：<ul><li>因为写锁是低16位，所以取低16位的最大值与当前的c做与运算（ int w = exclusiveCount©; <code>return c &amp; EXCLUSIVE_MASK;</code>这个EXCLUSIVE_MASK是2^16-1，是全1 ），高16位和0与运算后是0，剩下的就是低位运算的值，同时也是持有写锁的线程数目。</li></ul></li><li>在取到写锁线程的数目后，首先判断是否已经有线程持有了锁。如果已经有线程持有了任何锁（c!=0），则查看当前写锁线程的数目，如果写线程数为0（即此时存在读锁）或者持有写锁的线程不是当前线程就返回失败（涉及到公平锁和非公平锁的实现）。</li><li>如果本轮写后，写入锁的地位数量大于最大数（65535，2的16次方-1）就抛出一个Error。</li><li>如果当前写线程数为0（那么读线程也应该为0，因为上面已经处理c!=0的情况），并且当前线程需要阻塞那么就返回失败；（非公平writerShouldBlock永远返回false，公平锁看队列有没有排队，有就true）如果通过CAS增加写线程数失败也返回失败。</li><li>如果c=0，w=0或者c&gt;0，w&gt;0（重入），则设置当前线程或锁的拥有者，返回成功！</li></ul><p>后面的添加队列阻塞和唤醒与ReentrantLock相同。</p><p>上面可以看到<strong>tryAcquire()除了重入条件（当前线程为获取了写锁的线程）之外，增加了一个读锁是否存在的判断。如果存在读锁，则写锁不能被获取</strong>，原因在于：<strong>必须确保写锁的操作对读锁可见</strong>，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。</p><p>因此，<strong>只有等待其他读线程都释放了读锁，写锁才能被当前线程获取</strong>，而<strong>写锁一旦被获取，则其他读写线程的后续访问均被阻塞</strong>。写锁的释放与ReentrantLock的释放过程基本类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放，然后等待的读写线程才能够继续访问读写锁，同时前次写线程的修改对后续的读写线程可见。</p><h2><span id="jie-zhao-shi-du-suo-de-dai-ma"> 接着是读锁的代码：</span><a href="#jie-zhao-shi-du-suo-de-dai-ma" class="header-anchor">#</a></h2><p>读锁的lock()方法调用了这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)  <span class="comment">// 上来先去try获取共享锁一下</span></span><br><span class="line">            doAcquireShared(arg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面是获取一次共享锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Walkthrough:</span></span><br><span class="line"><span class="comment">             * 1. If write lock held by another thread, fail.                 写锁再用，fail</span></span><br><span class="line"><span class="comment">             * 2. Otherwise, this thread is eligible for                         写锁没用，就直接去看队列是否应该排队阻塞。不用的话直接CAS改读锁数量。</span></span><br><span class="line"><span class="comment">             *    lock wrt state, so ask if it should block</span></span><br><span class="line"><span class="comment">             *    because of queue policy. If not, try</span></span><br><span class="line"><span class="comment">             *    to grant by CASing state and updating count.</span></span><br><span class="line"><span class="comment">             *    Note that step does not check for reentrant           没有检查重入，推迟到后面的全版本doAcquireShared中</span></span><br><span class="line"><span class="comment">             *    acquires, which is postponed to full version</span></span><br><span class="line"><span class="comment">             *    to avoid having to check hold count in</span></span><br><span class="line"><span class="comment">             *    the more typical non-reentrant case.</span></span><br><span class="line"><span class="comment">             * 3. If step 2 fails either because thread                           如果写锁占有，或者CAS失败，就去doAcquireShared里面轮循加锁</span></span><br><span class="line"><span class="comment">             *    apparently not eligible or CAS fails or count</span></span><br><span class="line"><span class="comment">             *    saturated, chain to version with full retry loop.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">                getExclusiveOwnerThread() != current)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;                                                                                 <span class="comment">// 其他线程占用写锁，返回-1</span></span><br><span class="line">            <span class="keyword">int</span> r = sharedCount(c);</span><br><span class="line">            <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;                                                 </span><br><span class="line">                r &lt; MAX_COUNT &amp;&amp;</span><br><span class="line">                compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    firstReader = current;</span><br><span class="line">                    firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                    firstReaderHoldCount++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    HoldCounter rh = cachedHoldCounter;</span><br><span class="line">                    <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                        cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                        readHolds.set(rh);</span><br><span class="line">                    rh.count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看到在tryAcquireShared(int unused)方法中，如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态。如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠CAS保证）增加读状态，成功获取读锁。读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是“1&lt;&lt;16”。所以读写锁才能实现读读的过程共享，而读写、写读、写写的过程互斥。</p><p>获取一次读锁失败，进入下面进入队列阻塞，循环获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acquires in shared uninterruptible mode.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arg the acquire argument</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);   <span class="comment">// 添加节点</span></span><br><span class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">final</span> Node p = node.predecessor();  </span><br><span class="line">                <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                    <span class="keyword">int</span> r = tryAcquireShared(arg);              <span class="comment">// 前一个是头，获取一次</span></span><br><span class="line">                    <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;                                                       <span class="comment">// 成功了</span></span><br><span class="line">                        setHeadAndPropagate(node, r);      <span class="comment">// 从前往后叫醒所有的节点</span></span><br><span class="line">                        p.next = <span class="keyword">null</span>; <span class="comment">// help GC                        // 删掉头</span></span><br><span class="line">                        <span class="keyword">if</span> (interrupted)                                          <span class="comment">// 响应park时候的interrupt</span></span><br><span class="line">                            selfInterrupt();</span><br><span class="line">                        failed = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">return</span>;                                                           <span class="comment">// 返回</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 前一个SIGNAL了才true阻塞，否则删掉前面所有CANCLE的，CAS修改pre的状态为SIGNAL，返回false再来一轮阻塞</span></span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;      </span><br><span class="line">                    parkAndCheckInterrupt())   <span class="comment">// 阻塞</span></span><br><span class="line">                    interrupted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此时，我们再回头看一下互斥锁ReentrantLock中公平锁和非公平锁的加锁源码：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615164128985.png" alt="image-20200615164128985"></p><p>我们发现在ReentrantLock虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。</p><p>根据源码所示，当某一个线程调用lock方法获取锁时，如果同步资源没有被其他线程锁住，那么当前线程在使用CAS更新state成功后就会成功抢占该资源。</p><p>而如果公共资源被占用且不是被当前线程占用，那么就会加锁失败。所以可以确定ReentrantLock无论读操作还是写操作，添加的锁都是都是独享锁。</p><h1><span id="can-kao"> 参考</span><a href="#can-kao" class="header-anchor">#</a></h1><blockquote><p>《Java并发编程的艺术》</p><p><a href="https://www.cnblogs.com/tuyang1129/p/12670014.html" target="_blank" rel="noopener">https://www.cnblogs.com/tuyang1129/p/12670014.html</a></p><p>美团技术公众号的共享锁部分</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#suo-de-qian-shi-jin-sheng&quot;&gt;锁的前世今生&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#le-guan-suo-yu-bei-
      
    
    </summary>
    
    
      <category term="多线程" scheme="https://blog.sofunnyai.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://blog.sofunnyai.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发编程" scheme="https://blog.sofunnyai.com/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CAS比较并交换的原理和ABA问题</title>
    <link href="https://blog.sofunnyai.com/article/cas-and-aba.html"/>
    <id>https://blog.sofunnyai.com/article/cas-and-aba.html</id>
    <published>2018-03-01T05:05:11.000Z</published>
    <updated>2020-06-15T01:14:54.825Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#bei-jing">背景</a></li><li><a href="#cas-jian-jie">CAS简介</a><ul><li><a href="#atomic-xiu-shi-de-lei-wei-sha-shi-xian-cheng-an-quan-de-ru-atomicinteger">Atomic修饰的类为啥是线程安全的？如AtomicInteger</a></li><li><a href="#unsafe-java-di-ceng-shi-xian">unsafe.java底层实现：</a></li><li><a href="#compareandswapint-de-di-ceng-cpu-yuan-yu-shi-xian-lock-cmpxchg"><code>compareAndSwapInt</code>的底层CPU源语实现—lock cmpxchg：</a></li><li><a href="#cas-que-dian">CAS缺点</a></li><li><a href="#xiao-jie">小结</a><ul><li><a href="#cas-ying-yong">CAS应用</a></li></ul></li></ul></li><li><a href="#aba-wen-ti-shi-shi-me-yuan-zi-geng-xin-yin-yong-shi-shi-me">ABA问题是什么？原子更新引用是什么？</a><ul><li><a href="#cas-dao-zhi-aba-wen-ti">CAS导致ABA问题</a></li><li><a href="#aba-wen-ti">ABA问题</a></li><li><a href="#yuan-zi-yin-yong-atomicreference">原子引用AtomicReference</a></li></ul></li><li><a href="#dai-ban-ben-de-yuan-zi-yin-yong-jie-jue-aba-wen-ti-atomicstampedreference">带版本的原子引用解决ABA问题 AtomicStampedReference</a></li><li><a href="#longadder-cas-ji-zhi-you-hua">LongAdder（CAS机制优化）</a><ul><li><a href="#wei-shi-me-you-liao-atomiclong-huan-yao-xin-zeng-yi-ge-longadder-ni">为什么有了AtomicLong还要新增一个LongAdder呢</a></li></ul><ul><li><a href="#can-kao">参考</a></li></ul></li></ul><!-- tocstop --></div><p><strong>文章主线:</strong></p><p><strong>CAS----&gt;Unsafe----&gt;CAS底层实现和思想----&gt;ABA问题----&gt;原子引用更新----&gt;如何规避ABA问题</strong></p><p>这篇博客还不错</p><blockquote><p><a href="https://blog.csdn.net/javazejian/article/details/72772470" target="_blank" rel="noopener">https://blog.csdn.net/javazejian/article/details/72772470</a></p></blockquote><h1><span id="bei-jing"> 背景</span><a href="#bei-jing" class="header-anchor">#</a></h1><ul><li>在以前没有CAS的时候，对一个多线程修改i++是有线程安全问题的，因为<code>i++</code>操作底层是三个指令，不是原子的。</li><li>使用AtomicInteger替代Integer即可线程安全。AtomicInteger底层就是CAS支持的。</li></ul><h1><span id="cas-jian-jie"> CAS简介</span><a href="#cas-jian-jie" class="header-anchor">#</a></h1><ul><li>CompareAndSet，比较并交换思想，底层是<strong>CPU并发源语言</strong>。功能是判断某个内存是为是否是预期的值，true则更新，false放弃。过程是原子的（线程安全）。</li><li>CAS是一种轻量级锁，在没有线程阻塞的情况下实现变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁(读多场景被修改后重试或者报错)。</li><li>CPU原语音硬件实现，执行必须连续，所以天生就是原子的。线程安全。</li><li>底层通过<code>Unsafe</code>类实现，Unsafe中的<code>CAS</code>方法JVM会生成汇编指令。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601133439289.png" alt="image-20200601133439289"></p><h2><span id="atomic-xiu-shi-de-lei-wei-sha-shi-xian-cheng-an-quan-de-ru-atomicinteger"> Atomic修饰的类为啥是线程安全的？如AtomicInteger</span><a href="#atomic-xiu-shi-de-lei-wei-sha-shi-xian-cheng-an-quan-de-ru-atomicinteger" class="header-anchor">#</a></h2><ul><li><code>AtomicInteger.java</code> 的 <code>getAndIncrement</code>方法，获取值并+1，底层借助了JDK的rt.jar中的<code>unsafe</code>类的native方法。</li><li>unsafe类是<code>sun.misc.Unsafe</code>，使用本地方法帮Java操纵底层。如读写操纵特定内存位置的数据。----直接操纵操作系统执行任务</li><li>下面代码里直接用<strong>unsafe去操纵内存偏移位置上的对象</strong>，是不允许中断的连续的指令，是线程安全的，所以没有并发问题。</li><li>变量value使用volatile修饰，保证多线程的可见性</li></ul><p>AtomicInteger.java 节选：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;  <span class="comment">// 当前AtomicInteger内部使用了一个volatile修饰的int存储值。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Atomically increments by one the current value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the previous value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>);   <span class="comment">// 传入当前AtomicInteger对象，在内存的地址偏移量对应对象，加1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2><span id="unsafe-java-di-ceng-shi-xian"> unsafe.java底层实现：</span><a href="#unsafe-java-di-ceng-shi-xian" class="header-anchor">#</a></h2><p>使用了<code>compareAndSwapInt</code>自旋：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unsafe类的  getAndAddInt 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;            </span><br><span class="line">    <span class="comment">// var1 是上面的this对象，就是当前的那个Integer，var2是unsafe找到的内存地址，var4是要新增的值</span></span><br><span class="line">        <span class="keyword">int</span> var5;  <span class="comment">// var5 是内存快照里面的值</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);   <span class="comment">// 当前这个var1（上面this对象）在内存地址var2上去取到volatile的快照值放到var5中</span></span><br><span class="line">        &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));    </span><br><span class="line">           <span class="comment">// var1对象在var2内存地址上的值和快照值var5比较，相同就给var5+var4，结束do...while。如果拿出来的快照值不相等，继续do...while，上面去继续</span></span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getIntVolatile  和  compareAndSwapInt是当前unsafe类中的native方法，借助CPU源语实现线程安全。（后面有个JVM native方法的源码）</span></span><br></pre></td></tr></table></figure><p>var5：就是我们从主内存volatile中拷贝到工作内存中的值操作的时候，需要比较工作内存中的值，和主内存中的值进行比较</p><p>假设执行 compareAndSwapInt返回false，那么就一直执行 while方法，直到期望的值和真实值一样</p><ul><li>val1：AtomicInteger对象本身</li><li>var2：该对象值的引用内存地址</li><li>var4：需要修改变动的数量</li><li>var5：用var1和var2找到的内存中的真实值<ul><li>用该对象当前的值与var5比较</li><li>如果相同，更新var5 + var4 并返回true，结束循环。</li><li>如果不同，继续取volatile值然后再比较，直到更新完成</li></ul></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601212926046.png" alt="image-20200601212926046"></p><p>这里没有用synchronized，而用CAS，这样提高了并发性，也能够实现一致性，是因为每个线程进来后，进入的do while循环，然后不断的获取内存中的值，判断是否为最新，然后在进行更新操作。</p><p>假设线程A和线程B同时执行getAndAddInt操作（分别跑在不同的CPU上）</p><ol><li>AtomicInteger里面的value原始值为3，即主内存中AtomicInteger的 value 为3，根据JMM模型，线程A和线程B各自持有一份价值为3的副本，分别存储在各自的工作内存</li><li>线程A通过getIntVolatile(var1 , var2) 拿到value值3，这是线程A被挂起（该线程失去CPU执行权）</li><li>线程B也通过getIntVolatile(var1, var2)方法获取到value值也是3，此时刚好线程B没有被挂起，并执行了compareAndSwapInt方法，比较内存的值也是3，成功修改内存值为4，线程B打完收工，一切OK</li><li>这是线程A恢复，执行CAS方法，比较发现自己手里的数字3和主内存中的数字4不一致，说明该值已经被其它线程抢先一步修改过了，那么A线程本次修改失败，只能够重新读取后在来一遍了，也就是在执行do while</li><li>线程A重新获取value值，因为变量value被volatile修饰，所以其它线程对它的修改，线程A总能够看到，线程A继续执行compareAndSwapInt进行比较替换，直到成功。</li></ol><h2><span id="compareandswapint-de-di-ceng-cpu-yuan-yu-shi-xian-lock-cmpxchg"> <code>compareAndSwapInt</code>的底层CPU源语实现—lock cmpxchg：</span><a href="#compareandswapint-de-di-ceng-cpu-yuan-yu-shi-xian-lock-cmpxchg" class="header-anchor">#</a></h2><p>汇编语言<code>cmpxchg</code>指令，也是compareAndSwapInt的实现。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601214101655.png" alt="image-20200601214101655"></p><p>多核情况下最终的实现：<code>lock cmpxchg</code></p><ul><li>lock指令是锁总线，所以<code>lock cmpxchg</code></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200606184153528.png" alt="image-20200606184153528"></p><p>Unsafe类 + CAS思想： 也就是自旋，自我旋转</p><p>CAS这里不需要经过操作系统的线程管理，所以是轻量级的，synchronized是需要操作系统进行线程管理是总量级的。</p><h2><span id="cas-que-dian"> CAS缺点</span><a href="#cas-que-dian" class="header-anchor">#</a></h2><p>和synchronized比较，没有加锁每个线程都可以同时竞争并发计算，但是也有以下缺点：</p><ul><li>循环太多的时候，自旋太多。do…while太多，CPU开销大。（没有锁，需要大量比较）</li><li>只能保证一个变量的原子性，不像synchronized可以对多个变量进行原子性操作。</li><li>引出了ABA问题，两个线程在执行CAS竞争的时候，一个线程T1很慢，另一个T2很快。初始的时候快照变量都是A，在拿到线程内存中后，T2修改为B并CAS写回成功。然后T2再来一次CAS把变量从B改为A，后来T1才回来，一看主内存还是A，CAS成功改成C。但这时候的A和刚才的A虽然值一样，但是可能业务发生了变化。造成问题。具体见下一章。</li></ul><h2><span id="xiao-jie"> 小结</span><a href="#xiao-jie" class="header-anchor">#</a></h2><h3><span id="cas-ying-yong"> CAS应用</span><a href="#cas-ying-yong" class="header-anchor">#</a></h3><p>CAS是compareAndSwap，比较当前工作内存中的值和主物理内存中的值，如果相同则执行规定操作，否者继续比较直到主内存和工作内存的值一致为止。</p><p>CAS有3个操作数，内存值V，旧的预期值A，要修改的更新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否者什么都不做。</p><p>适用于在写少读多的时候，使用CAS完成单变量的同步。</p><h1><span id="aba-wen-ti-shi-shi-me-yuan-zi-geng-xin-yin-yong-shi-shi-me"> ABA问题是什么？原子更新引用是什么？</span><a href="#aba-wen-ti-shi-shi-me-yuan-zi-geng-xin-yin-yong-shi-shi-me" class="header-anchor">#</a></h1><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601215404311.png" alt="image-20200601215404311"></p><p>假设现在有两个线程，分别是T1 和 T2，然后T1执行某个操作的时间为10秒，T2执行某个时间的操作是2秒，最开始AB两个线程，分别从主内存中获取A值，但是因为B的执行速度更快，他先把A的值改成B，然后在修改成A，然后执行完毕，T1线程在10秒后，执行完毕，判断内存中的值为A，并且和自己预期的值一样，它就认为没有人更改了主内存中的值，就快乐的修改成B，但是实际上 可能中间经历了 ABCDEFA 这个变换，也就是中间的值经历了狸猫换太子。</p><p>所以ABA问题就是：在获取主内存值的时候，该内存值在我们写入主内存的时候，已经被修改了N次，但是最终又改成原来的值了</p><h2><span id="cas-dao-zhi-aba-wen-ti"> CAS导致ABA问题</span><a href="#cas-dao-zhi-aba-wen-ti" class="header-anchor">#</a></h2><p>CAS算法实现了一个重要的前提，<strong>需要取出内存中某时刻的数据，并在当下时刻比较并替换，那么这个时间差会导致数据的变化。</strong></p><p>比如说一个线程one从内存位置V中取出A，这时候另外一个线程two也从内存中取出A，并且线程two进行了一些操作将值变成了B，然后线程two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后线程one操作成功</p><p><code>尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的，看业务情况。</code></p><h2><span id="aba-wen-ti"> ABA问题</span><a href="#aba-wen-ti" class="header-anchor">#</a></h2><p>如果业务只管最终的数值是无所谓的，最终都是A即可。ABA问题就可以接受。（只看结果）</p><p>但是如果业务要求中间不能被别的线程偷偷改变还不知道（如支付类）。ABA问题就无法被接受。（要求过程）</p><h2><span id="yuan-zi-yin-yong-atomicreference"> 原子引用AtomicReference</span><a href="#yuan-zi-yin-yong-atomicreference" class="header-anchor">#</a></h2><p>原子引用其实和原子包装类是差不多的概念，就是将一个java类，用原子引用类进行包装起来，那么这个类就具备了原子性。可以完成类似AtomicInteger等同样的原子性效力。</p><p>但是原子引用打来了ABA问题。</p><h1><span id="dai-ban-ben-de-yuan-zi-yin-yong-jie-jue-aba-wen-ti-atomicstampedreference"> 带版本的原子引用解决ABA问题 AtomicStampedReference</span><a href="#dai-ban-ben-de-yuan-zi-yin-yong-jie-jue-aba-wen-ti-atomicstampedreference" class="header-anchor">#</a></h1><p>通过一个版本号stamp来解决ABA问题，内同一致但是版本号不一致还是不能提交修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sam.phoenix.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicStampedReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CAS虽然可以自旋解决变量竞争的线程安全问题，但是会带来ABA问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * CAS算法实现了一个重要的前提：**需要取出内存中某时刻的数据，并在当下时刻比较并替换，那么这个时间差会导致数据的变化。**</span></span><br><span class="line"><span class="comment"> * 比如说一个线程one从内存位置V中取出A，这时候另外一个线程two也从内存中取出A，并且线程two进行了一些操作将值变成了B，然后线程two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后线程one操作成功</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * `尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的，看业务情况。`</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ## ABA问题</span></span><br><span class="line"><span class="comment"> * 如果业务只管最终的数值是无所谓的，最终都是A即可。ABA问题就可以接受。（只看结果）</span></span><br><span class="line"><span class="comment"> * 但是如果业务要求中间不能被别的线程偷偷改变还不知道（如支付类）。ABA问题就无法被接受。（要求过程）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CAS_ABA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------------以下是一个CAS引发的ABA问题的demo-------------------------"</span>);</span><br><span class="line">        casABA();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------------------以下是一个ABA解决，使用带版本号的stampRefference-------------------------"</span>);</span><br><span class="line">        resolveABA();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 演示CAS带来的ABA问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">casABA</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化原子引用</span></span><br><span class="line">        <span class="comment">// 定义一个原子引用（包装了一个自定义类），初始化值是张三</span></span><br><span class="line">        AtomicReference&lt;User&gt; atomicUser = <span class="keyword">new</span> AtomicReference&lt;User&gt;();</span><br><span class="line">        User z3 = <span class="keyword">new</span> User(<span class="string">"z3"</span>, <span class="number">33</span>);</span><br><span class="line">        atomicUser.set(z3);</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 完成一次ABA</span></span><br><span class="line">            User l4 = <span class="keyword">new</span> User(<span class="string">"l4"</span>, <span class="number">44</span>);</span><br><span class="line">            atomicUser.compareAndSet(z3, l4);  <span class="comment">// 对比主内存，如果是张三，就修改为李四</span></span><br><span class="line">            atomicUser.compareAndSet(l4,z3);   <span class="comment">// 对比主内存，如果是李四，就修改为张三</span></span><br><span class="line">        &#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 睡眠1秒，等待上面ABA完成(上面偷梁换柱，偷偷改过一次)</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                User w5 = <span class="keyword">new</span> User(<span class="string">"w5"</span>, <span class="number">55</span>);</span><br><span class="line">                <span class="keyword">boolean</span> result = atomicUser.compareAndSet(z3, w5); <span class="comment">// 虽然更新成功，但是其实里面的z3已经被修改过一次了</span></span><br><span class="line">                System.out.println(<span class="string">"最终t2"</span>+result+<span class="string">",atomicUser中的user："</span>+atomicUser.get());</span><br><span class="line">                System.out.println(<span class="string">"虽然更新成功，但是其实里面的z3已经被修改过一次了,某些业务场景会出错!!!"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t2"</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延时使用版本号解决ABA问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">resolveABA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User z3 = <span class="keyword">new</span> User(<span class="string">"z3"</span>, <span class="number">33</span>);</span><br><span class="line">        <span class="comment">// 初始化一个张三进去，版本号是1</span></span><br><span class="line">        AtomicStampedReference&lt;User&gt; stampedReference = <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(z3, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            User l4 = <span class="keyword">new</span> User(<span class="string">"l4"</span>, <span class="number">44</span>);</span><br><span class="line">            <span class="comment">// 期待是张三，相等的话就改成李四，同时期待版本号是1</span></span><br><span class="line">            <span class="keyword">int</span> stamp = stampedReference.getStamp();</span><br><span class="line">            <span class="comment">// 休眠1秒，等待下面的线程获取同样的版本号</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> result = stampedReference.compareAndSet(z3, l4, stamp,stamp+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"尝试更新版本号"</span>+stamp+<span class="string">"，结果："</span>+result+<span class="string">",stampedReference中最新的数据："</span>+stampedReference.getReference()+<span class="string">"最新版本号"</span>+stampedReference.getStamp());</span><br><span class="line">            stamp = stampedReference.getStamp();</span><br><span class="line">            result = stampedReference.compareAndSet(l4, z3, stamp,stamp+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"尝试更新版本号"</span>+stamp+<span class="string">"，结果："</span>+result+<span class="string">",stampedReference中最新的数据："</span>+stampedReference.getReference()+<span class="string">"最新版本号"</span>+stampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">"t3"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为持有的版本号是老的，会更新失败！</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            User w5 = <span class="keyword">new</span> User(<span class="string">"w5"</span>, <span class="number">55</span>);</span><br><span class="line">            <span class="keyword">int</span> stamp = stampedReference.getStamp();</span><br><span class="line">            <span class="comment">// 睡3秒，等上面完成sleep和CAS</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> result = stampedReference.compareAndSet(z3, w5, stamp,stamp+<span class="number">1</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"尝试更新版本号"</span>+stamp+<span class="string">"，结果："</span>+result+<span class="string">",stampedReference中最新的数据："</span>+stampedReference.getReference()+<span class="string">"最新版本号"</span>+stampedReference.getStamp());</span><br><span class="line">        &#125;,<span class="string">"t4"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><span id="longadder-cas-ji-zhi-you-hua"> LongAdder（CAS机制优化）</span><a href="#longadder-cas-ji-zhi-you-hua" class="header-anchor">#</a></h1><p>LongAdder是java8在atomic包里为我们提供的新的类，跟AtomicLong有相同的效果。是对CAS机制的优化</p><p>类似的还有一个DoubleAdder：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LongAdder：</span><br><span class="line"><span class="comment">//变量声明</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LongAdder count = <span class="keyword">new</span> LongAdder();</span><br><span class="line"><span class="comment">//变量操作</span></span><br><span class="line">count.increment();</span><br><span class="line"><span class="comment">//变量取值</span></span><br><span class="line">count</span><br></pre></td></tr></table></figure><h3><span id="wei-shi-me-you-liao-atomiclong-huan-yao-xin-zeng-yi-ge-longadder-ni"> 为什么有了AtomicLong还要新增一个LongAdder呢</span><a href="#wei-shi-me-you-liao-atomiclong-huan-yao-xin-zeng-yi-ge-longadder-ni" class="header-anchor">#</a></h3><p>原因是：CAS底层实现是在一个死循环中不断地尝试修改目标值，直到修改成功。如果竞争不激烈的时候，修改成功率很高，否则失败率很高。在失败的时候，这些重复的原子性操作会耗费性能。（不停的<strong>自旋</strong>，进入一个无限重复的循环中）</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601235736890.png" alt="image-20200601235736890"></p><p><strong>核心思想：将热点数据分离。</strong></p><p>比如说它可以将AtomicLong内部的内部核心数据value分离成一个数组，每个线程访问时，通过hash等算法映射到其中一个数字进行计数，而最终的计数结果则为这个数组的求和累加，其中热点数据value会被分离成多个单元的cell，每个cell独自维护内部的值。当前对象的实际值由所有的cell累计合成，这样热点就进行了有效地分离，并提高了并行度。这相当于将AtomicLong的单点的更新压力分担到各个节点上。在低并发的时候通过对base的直接更新，可以保障和AtomicLong的性能基本一致。而在高并发的时候通过分散提高了性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    add(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    Cell[] as; <span class="keyword">long</span> b, v; <span class="keyword">int</span> m; Cell a;</span><br><span class="line">    <span class="keyword">if</span> ((as = cells) != <span class="keyword">null</span> || !casBase(b = base, b + x)) &#123; <span class="comment">//cas失败一次</span></span><br><span class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">            (a = as[getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">            !(uncontended = a.cas(v = a.value, v + x))) <span class="comment">// 给cell数组里面找一个线程的格子添加一个，然后下面再accumulate累加</span></span><br><span class="line">            longAccumulate(x, <span class="keyword">null</span>, uncontended);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS有没有问题呢？肯定是有的。比如说大量的线程同时并发修改一个AtomicInteger，可能有<strong>很多线程会不停的自旋</strong>，进入一个无限重复的循环中。</p><p>这些线程不停地获取值，然后发起CAS操作，但是发现这个值被别人改过了，于是再次进入下一个循环，获取值，发起CAS操作又失败了，再次进入下一个循环。</p><p>在大量线程高并发更新AtomicInteger的时候，这种问题可能会比较明显，导致大量线程空循环，自旋转，性能和效率都不是特别好。</p><p>于是，当当当当，Java 8推出了一个新的类，<strong>LongAdder</strong>，他就是尝试使用分段CAS以及自动分段迁移的方式来大幅度提升多线程高并发执行CAS操作的性能！</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601235815152.png" alt="image-20200601235815152"></p><p>在LongAdder的底层实现中，首先有一个base值，刚开始多线程来不停的累加数值，都是对base进行累加的，比如刚开始累加成了base = 5。</p><p>接着如果发现并发更新的线程数量过多，在发生竞争的情况下，会有一个Cell数组用于将不同线程的操作离散到不同的节点上去 ==(会根据需要扩容，最大为CPU核）==就会开始施行<strong>分段CAS的机制</strong>，也就是内部会搞一个Cell数组，每个数组是一个数值分段。</p><p>这时，让大量的线程分别去对不同Cell内部的value值进行CAS累加操作，这样就把CAS计算压力分散到了不同的Cell分段数值中了！</p><p>这样就可以大幅度的降低多线程并发更新同一个数值时出现的无限循环的问题，大幅度提升了多线程并发更新数值的性能和效率！</p><p>而且他内部实现了<strong>自动分段迁移的机制</strong>，也就是如果某个Cell的value执行CAS失败了，那么就会自动去找另外一个Cell分段内的value值进行CAS操作。</p><p>这样也解决了线程空旋转、自旋不停等待执行CAS操作的问题，让一个线程过来执行CAS时可以尽快的完成这个操作。</p><p>最后，如果你要从LongAdder中获取当前累加的总值，就会把base值和所有Cell分段数值加起来返回给你。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601235850232.png" alt="image-20200601235850232"></p><p>如上图所示，LongAdder则是内部维护多个Cell变量，每个Cell里面有一个初始值为0的long型变量，在同等并发量的情况下，争夺单个变量的线程会减少，这是变相的减少了争夺共享资源的并发量，另外多个线程在争夺同一个原子变量时候，</p><p>如果失败并不是自旋CAS重试，而是尝试获取其他原子变量的锁，最后当获取当前值时候是把所有变量的值累加后再加上base的值返回的。</p><p>LongAdder维护了要给延迟初始化的原子性更新数组和一个基值变量base数组的大小保持是2的N次方大小，数组表的下标使用每个线程的hashcode值的掩码表示，数组里面的变量实体是Cell类型。</p><p>Cell 类型是Atomic的一个改进，用来减少缓存的争用，对于大多数原子操作字节填充是浪费的，因为原子操作都是无规律的分散在内存中进行的，多个原子性操作彼此之间是没有接触的，但是原子性数组元素彼此相邻存放将能经常共享缓存行，也就是<strong>伪共享</strong>。所以这在性能上是一个提升。（补充：可以看到Cell类用Contended注解修饰，这里主要是解决false sharing(伪共享的问题)，不过个人认为伪共享翻译的不是很好，或者应该是错误的共享，比如两个volatile变量被分配到了同一个缓存行，但是这两个的更新在高并发下会竞争，比如线程A去更新变量a，线程B去更新变量b，但是这两个变量被分配到了同一个缓存行，因此会造成每个线程都去争抢缓存行的所有权，例如A获取了所有权然后执行更新这时由于volatile的语义会造成其刷新到主存，但是由于变量b也被缓存到同一个缓存行，因此就会造成cache miss，这样就会造成极大的性能损失）<br><strong>LongAdder的add操作图</strong></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601235924711.png" alt="image-20200601235924711"></p><p>可以看到，只有从未出现过并发冲突的时候，base基数才会使用到，一旦出现了并发冲突，之后所有的操作都只针对Cell[]数组中的单元Cell。<br>如果Cell[]数组未初始化，会调用父类的longAccumelate去初始化Cell[]，如果Cell[]已经初始化但是冲突发生在Cell单元内，则也调用父类的longAccumelate，此时可能就需要对Cell[]扩容了。<br><strong>另外由于Cells占用内存是相对比较大的，所以一开始并不创建，而是在需要时候再创建，也就是惰性加载，当一开始没有空间时候，所有的更新都是操作base变量。</strong></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200601235953395.png" alt="image-20200601235953395"></p><p>如上图代码：<br>例如32、64位操作系统的缓存行大小不一样，因此JAVA8中就增加了一个注<code>@sun.misc.Contended</code>解用于解决这个问题,由JVM去插入这些变量，<a href="http://xn--openjdk-hc5k25at0ntqhnpa7548b.java.net/jeps/142" target="_blank" rel="noopener">具体可以参考openjdk.java.net/jeps/142</a> ，但是通常来说对象是不规则的分配到内存中的，但是数组由于是连续的内存，因此可能会共享缓存行，因此这里加一个Contended注解以防cells数组发生伪共享的情况。</p><p>为了降低高并发下多线程对一个变量CAS争夺失败后大量线程会自旋而造成降低并发性能问题，LongAdder内部通过根据并发请求量来维护多个Cell元素(一个动态的Cell数组)来分担对单个变量进行争夺资源。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200602000026847.png" alt="image-20200602000026847"></p><p>可以看到LongAdder继承自Striped64类，Striped64内部维护着三个变量，LongAdder的真实值其实就是base的值与Cell数组里面所有Cell元素值的累加，base是个基础值，默认是0，cellBusy用来实现自旋锁，当创建Cell元素或者扩容Cell数组时候用来进行线程间的同步。</p><p>在无竞争下直接更新base，类似AtomicLong高并发下，会将每个线程的操作hash到不同的cells数组中，从而将AtomicLong中更新一个value的行为优化之后，分散到多个value中<br>从而降低更新热点，而需要得到当前值的时候，直接 将所有cell中的value与base相加即可，但是跟AtomicLong(compare and change -&gt; xadd)的CAS不同，incrementAndGet操作及其变种可以返回更新后的值，而LongAdder返回的是void。</p><p>由于Cell相对来说比较占内存，因此这里采用懒加载的方式，在无竞争的情况下直接更新base域，在第一次发生竞争的时候(CAS失败)就会创建一个大小为2的cells数组，每次扩容都是加倍，只到达到CPU核数。同时我们知道扩容数组等行为需要只能有一个线程同时执行，因此需要一个锁，这里通过CAS更新cellsBusy来实现一个简单的spin lock。</p><p>数组访问索引是通过Thread里的threadLocalRandomProbe域取模实现的，这个域是ThreadLocalRandom更新的，cells的数组大小被限制为CPU的核数，因为即使有超过核数个线程去更新，但是每个线程也只会和一个CPU绑定，更新的时候顶多会有cpu核数个线程，因此我们只需要通过hash将不同线程的更新行为离散到不同的slot即可。<br>我们知道线程、线程池会被关闭或销毁，这个时候可能这个线程之前占用的slot就会变成没人用的，但我们也不能清除掉，因为一般web应用都是长时间运行的，线程通常也会动态创建、销毁，很可能一段时间后又会被其他线程占用，而对于短时间运行的，例如单元测试，清除掉有啥意义呢？</p><h2><span id="can-kao"> 参考</span><a href="#can-kao" class="header-anchor">#</a></h2><blockquote><p><a href="https://blog.csdn.net/eluanshi12/article/details/84871879" target="_blank" rel="noopener">AtomicLong与LongAdder（CAS机制的优化）</a></p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/KFsqsCVgyiiTDXMR-Hu1-Q" target="_blank" rel="noopener">大白话聊聊Java并发面试问题之Java 8如何优化CAS性能？</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/wolf_love666/article/details/87693771" target="_blank" rel="noopener">https://blog.csdn.net/wolf_love666/article/details/87693771</a></p></blockquote><blockquote><p><a href="https://gitee.com/moxi159753/LearningNotes" target="_blank" rel="noopener">https://gitee.com/moxi159753/LearningNotes</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#bei-jing&quot;&gt;背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cas-jian-jie&quot;&gt;CAS简介&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="多线程" scheme="https://blog.sofunnyai.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="jdk" scheme="https://blog.sofunnyai.com/tags/jdk/"/>
    
      <category term="源码" scheme="https://blog.sofunnyai.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="多线程" scheme="https://blog.sofunnyai.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发" scheme="https://blog.sofunnyai.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>多线程之volatile和synchronized</title>
    <link href="https://blog.sofunnyai.com/article/volatile-and-synchronized.html"/>
    <id>https://blog.sofunnyai.com/article/volatile-and-synchronized.html</id>
    <published>2018-02-10T07:40:20.000Z</published>
    <updated>2020-06-15T09:08:26.968Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#ji-suan-ji-ji-chu">计算机基础</a><ul><li><a href="#cpu-huan-cun">CPU缓存</a></li><li><a href="#chu-li-qi-you-hua-he-zhi-ling-chong-pai">处理器优化和指令重排</a></li><li><a href="#dai-lai-de-wen-ti"><strong>带来的问题</strong>：</a></li><li><a href="#cpu-huan-cun-yi-zhi-xing-xie-yi">CPU缓存一致性协议：</a></li><li><a href="#huan-cun-xing-yu-huan-cun-xing-dui-qi">缓存行与缓存行对齐：</a><ul><li><a href="#huan-cun-xing-cacheline">缓存行CacheLine：</a></li></ul></li><li><a href="#shang-xia-wen-qie-huan">上下文切换</a></li><li><a href="#xian-cheng-jian-tong-xin">线程间通信</a></li><li><a href="#bing-fa-bian-cheng-wen-ti">并发编程问题</a></li><li><a href="#nei-cun-mo-xing">内存模型</a></li></ul></li><li><a href="#jmm-java-xu-ni-ji-nei-cun-mo-xing">JMM Java虚拟机内存模型</a><ul><li><a href="#jmm-shi-sha">JMM是啥？</a></li><li><a href="#jvm-ji-ben-gui-ding">JVM基本规定：</a></li><li><a href="#jmm-he-java-nei-cun-qu-yu-dui-zhan-jie-gou-mei-guan-xi">JMM和Java内存区域堆栈结构没关系：</a></li><li><a href="#jmm-de-jie-jue-fang-an">JMM的解决方案</a><ul><li><a href="#1-gong-xiang-dui-xiang-dui-ge-ge-xian-cheng-de-ke-jian-xing-lei-si-cpu-de-huan-cun-yi-zhi-xing-ke-jian-xing">1.共享对象对各个线程的<code>可见性</code>，类似CPU的缓存一致性【可见性】</a></li><li><a href="#2-gong-xiang-dui-xiang-de-jing-zheng-xian-xiang-yuan-zi-xing">2.共享对象的<code>竞争</code>现象【原子性】</a></li><li><a href="#3-bian-yi-qi-zhi-ling-chong-pai-you-xu-xing">3.编译器指令重排【有序性】</a></li></ul></li><li><a href="#as-if-serial-he-happens-before">as-if-serial 和 happens-before</a><ul><li><a href="#as-if-serial">as-if-serial</a></li><li><a href="#happens-before">Happens-Before</a></li></ul></li><li><a href="#dui-xiang-de-chuang-jian-guo-cheng">对象的创建过程</a></li></ul></li><li><a href="#volatile-guan-jian-zi">Volatile关键字</a><ul><li><a href="#xian-cheng-ke-jian-xing">线程可见性：</a></li><li><a href="#volatile-zhi-neng-bao-zheng-ke-jian-xing-bu-neng-bao-zheng-bing-fa-xian-cheng-an-quan-xing">volatile只能保证可见性，不能保证并发线程安全性：</a></li><li><a href="#jin-zhi-zhi-ling-chong-pai-chong-dian">禁止指令重排（重点）</a><ul><li><a href="#volatile-tong-guo-nei-cun-ping-zhang-jie-jue-zhi-ling-chong-pai">volatile通过内存屏障解决指令重排</a></li><li><a href="#nei-cun-ping-zhang">内存屏障</a></li><li><a href="#jvm-ceng-mian-dui-volatile-de-shi-xian">JVM层面对volatile的实现</a></li><li><a href="#hotspot-di-ceng-dui-volatile-de-shi-xian-hui-bian-lock-addl-0">Hotspot底层对volatile的实现（汇编 <code>lock addl 0</code>）</a></li></ul></li><li><a href="#final-de-nei-cun-ping-zhang">final的内存屏障</a></li></ul></li><li><a href="#chong-liang-ji-suo-synchronized">重量级锁Synchronized</a><ul><li><a href="#synchronized-ke-yi-bao-zheng">Synchronized可以保证：</a></li><li><a href="#you-san-chong-biao-xian-xing-shi">有三种表现形式：</a></li><li><a href="#jvm-de-synchronized-shi-xian">JVM的synchronized实现：</a></li><li><a href="#cun-chu-wei-zhi"><strong>存储位置：</strong></a></li><li><a href="#wait-he-notify-bi-xu-he-synchronized-yi-qi-yong">Wait和Notify必须和synchronized一起用</a></li><li><a href="#ge-chong-suo-de-da-quan">各种锁的大全</a><ul><li><a href="#le-guan-suo-he-bei-guan-suo"><strong>乐观锁和悲观锁：</strong></a></li><li><a href="#zi-xuan-suo-he-gua-ying-xing-zi-xuan-suo"><strong>自旋锁和适应性自旋锁：</strong></a></li><li><a href="#wu-suo-qing-liang-ji-suo-vs-pian-xiang-suo-vs-qing-liang-ji-suo-vs-chong-liang-ji-suo"><strong>无锁(轻量级锁)VS偏向锁 VS 轻量级锁 VS 重量级锁</strong></a></li><li><a href="#gong-ping-suo-he-fei-gong-ping-suo">公平锁和非公平锁</a></li><li><a href="#ke-chong-ru-suo-he-bu-ke-chong-ru-suo">可重入锁和不可重入锁</a></li><li><a href="#du-xiang-suo-vs-gong-xiang-suo-du-xie-suo"><strong>独享锁 VS 共享锁（读写锁！）</strong></a></li></ul></li><li><a href="#suo-sheng-ji-guo-cheng">锁升级过程：</a><ul><li><a href="#monitor"><strong>Monitor</strong></a></li><li><a href="#1-pu-tong-dui-xiang-wu-suo"><strong>1.普通对象-无锁</strong></a></li><li><a href="#2-pian-xiang-suo"><strong>2.偏向锁</strong></a></li><li><a href="#3-qing-liang-ji-suo-zi-xuan-suo"><strong>3.轻量级锁–自旋锁</strong></a></li><li><a href="#4-chong-liang-ji-suo"><strong>4.重量级锁</strong></a></li><li><a href="#sheng-ji-guo-cheng-ji-lu-zai-markword-shang">升级过程记录在<code>markword</code>上：</a></li><li><a href="#suo-xiao-chu">锁消除</a></li><li><a href="#suo-cu-hua">锁粗化</a></li><li><a href="#chao-xian-cheng">超线程：</a></li></ul></li><li><a href="#suo-chong-ru">锁重入</a></li><li><a href="#suo-jiang-ji">锁降级</a></li><li><a href="#dcl-dan-li">DCL单例</a></li></ul></li><li><a href="#xian-cheng-ji-chu">线程基础</a><ul><li><a href="#chuang-jian-xian-cheng-de-fang-shi">创建线程的方式：</a></li></ul></li><li><a href="#objectmonitor">ObjectMonitor：</a></li><li><a href="#wait-notify">Wait/Notify</a><ul><li><a href="#wait-fang-fa-yao-fang-zai-suo-li-mian">wait方法要放在锁里面！！！</a></li><li><a href="#wait-de-shi-xian">wait的实现：</a></li><li><a href="#notify-de-shi-xian">Notify的实现：</a></li><li><a href="#wei-sha-yao-fang-dao-synchronized-li-mian-fou-ze-hui-pao-chu-illegalmonitorstateexception">为啥要放到synchronized里面？否则会抛出 IllegalMonitorStateException？</a></li></ul></li><li><a href="#callable-futrue">callable/futrue</a></li><li><a href="#chang-jian-wen-ti-qa">常见问题QA</a><ul><li><a href="#synchronized-he-reentrantlock-you-shi-me-qu-bie">synchronized和ReentrantLock有什么区别？</a></li><li><a href="#bi-mian-si-suo">避免死锁：</a></li><li><a href="#bing-fa-yi-ding-hui-ti-gao-xiao-lu">并发一定会提高效率？</a></li><li><a href="#shi-xian">实现</a></li></ul></li></ul><!-- tocstop --></div><h1><span id="ji-suan-ji-ji-chu"> 计算机基础</span><a href="#ji-suan-ji-ji-chu" class="header-anchor">#</a></h1><h2><span id="cpu-huan-cun"> CPU缓存</span><a href="#cpu-huan-cun" class="header-anchor">#</a></h2><p>这是最基础的本科大一讲的：</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200604192952114.png" alt="image-20200604192952114"></p><ul><li><p><strong>因为CPU的速度比主内存快很多，所需CPU内部有高速缓存，每个线程都会把主存数据load到高速缓存进行计算。这就导致了一个多线程的多份线程缓存中的数据可能和主内存不一致</strong>：</p><ul><li>数据获取流程(速度递减)：<code>L0寄存器-L1级缓存-L2级缓存-L3级缓存(高端CPU才有)-L4主存-L5磁盘-L6远程文件</code>（寄存器和内存读写速度1:100左右）</li><li>L1-L3是CPU的三级高速缓存。</li><li>多个CPU共享主存，一个CPU内部的多核共享L3，一个核心内部共享L1和L2.</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605132021746.png" alt="image-20200605132021746"></p></li></ul><h2><span id="chu-li-qi-you-hua-he-zhi-ling-chong-pai"> 处理器优化和指令重排</span><a href="#chu-li-qi-you-hua-he-zhi-ling-chong-pai" class="header-anchor">#</a></h2><ul><li>因为CPU的速度比主内存快很多，所以不可能一条指令一条指令挨着执行。某些没有依赖关系的指令可能会重排序。（<strong>运行时重排</strong>）</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200604192836729.png" alt="image-20200604192836729"></p><h2><span id="dai-lai-de-wen-ti"> <strong>带来的问题</strong>：</span><a href="#dai-lai-de-wen-ti" class="header-anchor">#</a></h2><p>因为CPU使用了高速缓存、而且是多核心的，会有指令重排。会带来CPU硬件层面的问题-----------缓存不一致和原子性、可见性问题。在CPU和主存之间增加缓存，在多线程场景下就可能存在缓存一致性问题，也就是说，在多核CPU中，每个核的自己的缓存中，关于同一个数据的<code>缓存内容可能不一致</code>。</p><p><strong>缓存不一致解决方案</strong>：缓存一致性协议</p><p><strong>原子性和有序性问题解决方案</strong>：总线锁来解决</p><h2><span id="cpu-huan-cun-yi-zhi-xing-xie-yi"> CPU缓存一致性协议：</span><a href="#cpu-huan-cun-yi-zhi-xing-xie-yi" class="header-anchor">#</a></h2><p><strong>下面讲的和Volatile没关系，是CPU层面的类似场景下的实现技术。</strong></p><ul><li>总线锁：CPU和内存的通信锁住，期间不允许线程访问其他地址的数据，开销太大，不合适。------------汇编lock指令，不过可以解决原子性问题。</li><li>缓存一致性协议（有多个实现）：每个缓存的缓存控制器除了读写自己的数据，还要监听其他缓存的数据。规定了其他各个缓存处于什么状态能否读/写。这也造成了指令重排。（假如当前修改的是CPU0，其他CPU线程简称为CPU1）过程就是CPU0引入了storebuff，将数据的修改执行放到storebuff，然后发送消息给CPU1，这时候CPU0可以继续执行接下来的代码，当storebuff收到CPU1线程的ack应答消息后，storebuff将修改的数据同步到缓存行，再同步到主内存当中。</li><li>MESI是缓存一致性协议的一种，Intel的X86架构实现规范。Modify(修改了)/Exclusive(独占)/Shared(都可以读)/Invalid(失效)。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605132431308.png" alt="image-20200605132431308"></p><h2><span id="huan-cun-xing-yu-huan-cun-xing-dui-qi"> 缓存行与缓存行对齐：</span><a href="#huan-cun-xing-yu-huan-cun-xing-dui-qi" class="header-anchor">#</a></h2><h3><span id="huan-cun-xing-cacheline"> 缓存行CacheLine：</span><a href="#huan-cun-xing-cacheline" class="header-anchor">#</a></h3><ul><li><p>如果内存一个很小的byte和CPU交互，缓存到L3。但是只交互一个很小的对象浪费，也不经济。所以经常是把这个值旁边的一小块内存一起访问（按页读取），下次要读取的时候直接就有了（局部性原理）</p></li><li><p>缓存行越大，局部空间越大效率高，但是读取慢。</p></li><li><p>缓存行越小，局部空间越小效率低，但是读取快。</p></li><li><p>目前多用<strong>64字节</strong></p></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605132306313.png" alt="image-20200605132306313"></p><h2><span id="shang-xia-wen-qie-huan"> 上下文切换</span><a href="#shang-xia-wen-qie-huan" class="header-anchor">#</a></h2><ul><li>Java的线程主流JVM是映射到OS的线程上的。阻塞或者唤醒线程需要OS帮忙，是重量级操作，用户态和内核态转换，耗费不少时间。</li><li>所以在每个线程消耗时间很短的场景下，太多线程不一定比单线程快，频繁的线程切换可能反而带来更大的开销。</li></ul><p>降低上下文切换的方法：</p><ul><li>无锁并发</li><li>CAS</li><li>尽量用最少的线程并发</li><li>考虑使用协程</li></ul><h2><span id="xian-cheng-jian-tong-xin"> 线程间通信</span><a href="#xian-cheng-jian-tong-xin" class="header-anchor">#</a></h2><ul><li><code>内存共享</code>和<code>传递消息</code></li></ul><p>内存共享：在共享内存的并发模型中线程之间共享程序的公共数据状态，线程之前通过读写内存中的公共内存区域来进行信息的传递，典型的共享内存通信方式就是通过<strong>共享对象</strong>来进行通信。</p><p>消息传递：比如在Linux系统中同步机制有管道、信号、消息队列、信号量、套接字这几种方式。JVM的<code>wait()</code>跟<code>notify()</code></p><h2><span id="bing-fa-bian-cheng-wen-ti"> 并发编程问题</span><a href="#bing-fa-bian-cheng-wen-ti" class="header-anchor">#</a></h2><p>前面说的都是跟硬件相关的问题，软件在这样的硬件层面上运行就会出现<code>原子性</code>、<code>可见性</code>、<code>有序性</code>问题。 其实，原子性问题，可见性问题和有序性问题。是人们抽象定义出来的。而这个抽象的<strong>底层问题</strong>就是前面提到的缓存一致性、处理器优化、指令重排问题。</p><p>一般而言并发编程，为了保证数据的安全，需要满足以下三个特性：</p><blockquote><ol><li>原子性：（不可分）指在一个操作中就是cpu不可以在中途暂停然后再调度，既不被中断操作，要不执行完成，要不就不执行。只有6个<ul><li>基本数据类型的访问、 读写都是具备原子性的</li><li>synchronized实现原子性</li></ul></li><li>可见性：（变更立即可见）指当一个线程修改了共享变量的值时， 其他线程能够立即得知这个修改。三个关键字都能实现：<ul><li>volatile：新值立即同步到主存，每次从主存刷新。</li><li>synchronized：对一个变量执行unlock操作之前， 必须先把此变量同步回主内存中（执行store、 write操<br>作）</li><li>final：构造器构造完对象，final的值被赋值。其他线程就能立刻看到。</li></ul></li><li>有序性：（顺序）程序执行的顺序按照代码的先后顺序执行。<ul><li>volatile：禁止指令重排</li><li>synchronized：一个变量只允许一个线程获取锁。</li><li>Java原生就有Happens-Before原则来解决大部分有序性问题。</li></ul></li></ol></blockquote><p>你可以发现<code>缓存一致性</code>问题其实就是<code>可见性</code>问题(CPU缓存层面的，和Java不一样)。而<code>处理器优化</code>是可以导致<code>原子性</code>问题的。<code>指令重排</code>即会导致<code>有序性</code>问题。</p><h2><span id="nei-cun-mo-xing"> 内存模型</span><a href="#nei-cun-mo-xing" class="header-anchor">#</a></h2><p>为了解决因为缓存一致性、处理器优化、指令重排问题导致的上面的并发编程问题，需要提出<code>内存模型</code>。</p><p><strong>内存模型解决并发问题主要采用两种方式：<code>限制处理器优化</code>和使用<code>内存屏障</code>。</strong></p><h1><span id="jmm-java-xu-ni-ji-nei-cun-mo-xing"> JMM Java虚拟机内存模型</span><a href="#jmm-java-xu-ni-ji-nei-cun-mo-xing" class="header-anchor">#</a></h1><h2><span id="jmm-shi-sha"> JMM是啥？</span><a href="#jmm-shi-sha" class="header-anchor">#</a></h2><p>因为CPU的高速缓存和指令重排序，带来CPU硬件层面上的原子性、一致性、有序性问题。CPU各个架构采用了不同的方式来解决（总线锁+不同的缓存一致性协议），Java作为一个跨平台的语言，定义一套JMM来屏蔽底层硬件架构的差异，解决上述三个问题。</p><p>所以JMM是Java层面的内存模型的实现，为了解决上面的问题，不是实际的存在。。</p><p>只要提到Java内存模型，一般指的是JDK 5 开始使用的新的内存模型，主要由<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf" target="_blank" rel="noopener">JSR-133</a>: JavaTM Memory Model and Thread Specification 描述。</p><p><strong>是一种虚拟的规范，作用于<code>工作内存</code>和<code>主存之间</code>数据同步过程</strong>。</p><p>目的是<strong>解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代码乱序执行</strong>等带来的问题。(<strong>可见性、原子性、有序性</strong>)</p><p>JMM 本身是一种抽象的概念并不是真实存在，它描述的是一组规定或则规范，通过这组规范定义了程序中的访问方式。</p><h2><span id="jvm-ji-ben-gui-ding"> JVM基本规定：</span><a href="#jvm-ji-ben-gui-ding" class="header-anchor">#</a></h2><ul><li>所有的变量(成员、静态字段)<strong>都存储在主内存中</strong>。 （此处的变量 与Java编程中所说的变量有所区别， 它包括了实例字段、 静态字段和构成数组对象的元素， 但是不包括局部变量与方法参数，因为后两个是私有的）</li><li>每条<strong>线程还有自己的工作内存</strong>。(可以和物理内存和高速缓存类比，但不是一回事儿)</li><li>**线程的工作内存中保存了被该线程使用的变量的主内存副本。**线程对变量的操作（读取赋值等）必须都工作内存进行。</li><li>线程对变量的所有操作（读取、 赋值等） 都必须在工作内存中进行， 而不能直接读写主内存中的数据。</li><li>不同的线程之间也无法直接访问对方工作内存中的变量， 线程间变量值的传递均需要通过主内存来完成。</li></ul><p>JMM 同步规定</p><ul><li>线程加锁前，必须读取主内存的最新值到自己的工作内存</li><li>线程解锁前，必须把共享变量的值刷新回主内存</li><li>加锁解锁是同一把锁</li><li>上述三点保证了synchronized的可见性。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605205307266.png" alt="image-20200605205307266"></p><h2><span id="jmm-he-java-nei-cun-qu-yu-dui-zhan-jie-gou-mei-guan-xi"> JMM和Java内存区域堆栈结构没关系：</span><a href="#jmm-he-java-nei-cun-qu-yu-dui-zhan-jie-gou-mei-guan-xi" class="header-anchor">#</a></h2><blockquote><p>这里所讲的主内存、 工作内存与第2章所讲的Java内存区域中的Java堆、 栈、 方法区等并不是同一个层次的对内存的划分， 这两者<strong>基本上是没有任何关系</strong>的。 如果两者一定要勉强对应起来， 那么从变量、 主内存、 工作内存的定义来看， 主内存主要对应于Java堆中的对象实例数据部分， 而工作内存则对应于虚拟机栈中的部分区域。（《深入理解JVM虚拟机第三版》）</p><p><strong>主内存直接对应于物理硬件的内存</strong>， 而为了获取更好的运行速度， 虚拟机（或者是硬件、 操作系统本身的优化措施） 可能会让<strong>工作内存优先存储于寄存器和高速缓存</strong>中， 因为程序运行时主要访问的是工作内存。</p></blockquote><h2><span id="jmm-de-jie-jue-fang-an"> JMM的解决方案</span><a href="#jmm-de-jie-jue-fang-an" class="header-anchor">#</a></h2><h3><span id="1-gong-xiang-dui-xiang-dui-ge-ge-xian-cheng-de-ke-jian-xing-lei-si-cpu-de-huan-cun-yi-zhi-xing-ke-jian-xing"> 1.共享对象对各个线程的<code>可见性</code>，类似CPU的缓存一致性【可见性】</span><a href="#1-gong-xiang-dui-xiang-dui-ge-ge-xian-cheng-de-ke-jian-xing-lei-si-cpu-de-huan-cun-yi-zhi-xing-ke-jian-xing" class="header-anchor">#</a></h3><blockquote><p>A 线程读取主内存数据修改后还没来得及将修改数据同步到主内存，主内存数据就又被B线程读取了。</p></blockquote><p>volatile解决、synchronized可以解决(单线程+解锁前刷新)、final天然解决。</p><h3><span id="2-gong-xiang-dui-xiang-de-jing-zheng-xian-xiang-yuan-zi-xing"> 2.共享对象的<code>竞争</code>现象【原子性】</span><a href="#2-gong-xiang-dui-xiang-de-jing-zheng-xian-xiang-yuan-zi-xing" class="header-anchor">#</a></h3><blockquote><p>AB两个线程同时读取主内存数据，然后同时加1，再返回。</p></blockquote><p>synchronized、JUC.Lock   (底层都是CAS解决）</p><h3><span id="3-bian-yi-qi-zhi-ling-chong-pai-you-xu-xing"> 3.编译器指令重排【有序性】</span><a href="#3-bian-yi-qi-zhi-ling-chong-pai-you-xu-xing" class="header-anchor">#</a></h3><p>--------此处是编译器的指令重排+CPU指令重排。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605225002865.png" alt="image-20200605225002865"></p><ul><li><strong>编译器优化的重排序</strong>：编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li><li><strong>CPU的指令级并行的重排序</strong>：现代处理器采用了指令级并行技术将多条指令重叠执行。如果<strong>不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</strong></li><li><strong>内存系统的重排序</strong>：处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行</li></ul><p>使用volatile禁止指令重排、使用synchronized/JUC同步锁解决。</p><ul><li>综上，我们发现synchronized似乎是万能的，但是代价也很大。</li></ul><h2><span id="as-if-serial-he-happens-before"> as-if-serial 和 happens-before</span><a href="#as-if-serial-he-happens-before" class="header-anchor">#</a></h2><h3><span id="as-if-serial"> as-if-serial</span><a href="#as-if-serial" class="header-anchor">#</a></h3><p>上面编译器和CPU都可能重排，但是要保证不管怎么重排，至少在单线程上运行结果不能改变。所以为了这个目标，编译器和CPU都不会对数据依赖关系的指令重排，这会破坏<code>as-if-serial</code>规则。（比如读取，应该在写的后面）  <strong>强调重排后单线程内的执行结果也不应该改变。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>;</span><br><span class="line">b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">c = a+b; <span class="comment">// 不管怎么重排序，不应该影响最后的c结果</span></span><br></pre></td></tr></table></figure><h3><span id="happens-before"> Happens-Before</span><a href="#happens-before" class="header-anchor">#</a></h3><p>是JVM的重排必须遵守的规则。</p><p><code>先行发生</code>是Java内存模型中定义的<strong>两项操作之间的偏序关系</strong>， 比如说操作A先行发生于操作B， 其实就是说在发生操作B之前， 操作A产生的<strong>影响</strong>能被操作B观察到， “影响”包括<strong>修改了内存中共享变量的值、 发送了消息、 调用了方法等。</strong></p><ul><li>程序顺序规则(Program Order Rule)：一个线程中的每个操作，happens-before于该线程中的任意后续操作。(线程内是有序的，包括调用、判断)【这是编程基础，否则就乱了】</li><li>监视器锁规则(Monitor Lock Rule)：对一个锁的解锁，happens-before于随后对这个锁的加锁。（先解锁了才能加锁）</li><li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。（先写完了后面才能读，不能重排）</li><li>线程启动规则（Thread Start Rule） ： Thread对象的start()方法先行发生于此线程的每一个动作。</li><li>。。。还有几个，一共八种，不用背。</li></ul><p><strong>Java无需任何同步手段保障就能成立的先行发生规则有且只有上面这些。其他的都可能被重排序。【强调的是，正确同步的多线程程序是按照Happens-Before执行的】</strong></p><h4><span id="er-zhe-guan-xi"> 二者关系：</span><a href="#er-zhe-guan-xi" class="header-anchor">#</a></h4><ul><li>as-if-serial语义保证单线程内程序的执行结果不被改变，happens-before关系保证正确同步的多线程程序的执行结果不被改变。</li><li>as-if-serial语义给编写单线程程序的程序员创造了一个幻境：单线程程序是按程序的顺序来执行的。happens-before关系给编写正确同步的多线程程序的程序员创造了一个幻境：正确同步的多线程程序是按happens-before指定的顺序来执行的。</li><li>as-if-serial语义和happens-before这么做的目的，都是为了在不改变程序执行结果的前提下，尽可能地提高程序执行的并行度。</li></ul><h2><span id="dui-xiang-de-chuang-jian-guo-cheng"> 对象的创建过程</span><a href="#dui-xiang-de-chuang-jian-guo-cheng" class="header-anchor">#</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T t = <span class="keyword">new</span> T();</span><br></pre></td></tr></table></figure><p>这个对象的Java字节码：</p><p>一共有5条指令，核心三条：（可能重排序）</p><ul><li><p>先创建对象，0值初始化。</p></li><li><p>然后调用构造方法，对象属性赋值。</p></li><li><p>最后把引用和对象关联起来。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 new #2 &lt;T&gt;                                     # 就像在C++里面获取空间一样，给这个对象使用。并0值初始化。此时m&#x3D;0-------此时像是一个半初始化状态</span><br><span class="line">3 dup</span><br><span class="line">4 invokespecial #1 &lt;T.&lt;init&gt;&gt;   # 调用对象的构造方法，此时m&#x3D;8</span><br><span class="line">7 astore_1                                         # 把引用和对象内存关联起来</span><br><span class="line">8 return</span><br></pre></td></tr></table></figure><h1><span id="volatile-guan-jian-zi"> Volatile关键字</span><a href="#volatile-guan-jian-zi" class="header-anchor">#</a></h1><p>volatile的两个作用：<strong>线程可见性</strong>、和<strong>防止指令重排序</strong>  ，但<strong>不能保证原子性</strong>！！！</p><p>如果一个字段被声明成volatile，Java线程内存模型确保所有线程看到这个变量的值是一致的。</p><h2><span id="xian-cheng-ke-jian-xing"> 线程可见性：</span><a href="#xian-cheng-ke-jian-xing" class="header-anchor">#</a></h2><p>JVM的内存也分为主内存、线程本地内存。不要把它和CPU的缓存去对应，事实上主内存和线程本地内存都可能存在于CPU的缓存区、主内存区。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605185921433.png" alt="image-20200605185921433"></p><ul><li>这里的“可见性”是指当一条线程修改了这个变量的值， 新值对于其他线程来说是可以立即得知的。</li><li>而普通变量并不能做到这一点， 普通变量的值在线程间传递时均需要通过主内存来完成。</li><li>比如，线程A修改一个普通变量的值， 然后向主内存进行回写， 另外一条线程B在线程A回写完成了之后再对主内存进行读取操作， 新变量值才会对线程B可见。</li></ul><p>第一个：主内存和线程本地内存：</p><p>线程会把主内存的数据copy到本地内存去执行。当变量被volatile修饰后就不会copy到各个线程本地。每次读取的时候都去主内存拿。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加了volatie，线程才对其他线程的修改可见</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span>  <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"end！"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        stop = <span class="keyword">true</span>;  <span class="comment">// 修改flag，期望另外一个线程结束。但是如果没有volatile是不行的。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2><span id="volatile-zhi-neng-bao-zheng-ke-jian-xing-bu-neng-bao-zheng-bing-fa-xian-cheng-an-quan-xing"> volatile只能保证可见性，不能保证并发线程安全性：</span><a href="#volatile-zhi-neng-bao-zheng-ke-jian-xing-bu-neng-bao-zheng-bing-fa-xian-cheng-an-quan-xing" class="header-anchor">#</a></h2><p><strong>保证可见性，但是并不是说volatile的就是线程安全的</strong>！！只是每个线程使用的时候去主存刷新一下而已。</p><ul><li>第一项是保证<strong>此变量的变更</strong>对所有线程的可见性，只是对所有线程是<strong>可</strong>立即得知的，<strong>没有一致性问题。</strong>（每个线程物理存储的值可能不一样，但是使用前都会去主存刷新，实际使用时候应用看不到不一样的场景）但<strong>还是可能有并发原子性问题</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保证可见性，但是并不是说volatile的就是线程安全的！！只是每个线程使用的时候去主存刷新一下而已。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;   <span class="comment">// 对所有线程是立即可见的，没有一致性问题。（每个线程物理存储可能不一样，但是使用前都会去主存刷新，应用看不到不一样的场景）但还是可能有并发原子性问题。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面并发访问volatile的对象，发现并不能线程安全</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">                    cnt++; <span class="comment">// 这一行底层是由4个指令完成的，第一个getstatic从主存拿到操作栈顶的时候是取得最新的，</span></span><br><span class="line">                           <span class="comment">// 但是下面几条指令给他iadd的时候别的线程可能会修改它。他最后一条执行完毕写会主存的时候就会是过期的值。</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     *  底层字节码是这四行：</span></span><br><span class="line"><span class="comment">                     *  8 getstatic #7 &lt;com/sam/phoenix/concurrent/thread/demo/sync_volatile/VolatileTest.cnt&gt;</span></span><br><span class="line"><span class="comment">                     * 11 iconst_1</span></span><br><span class="line"><span class="comment">                     * 12 iadd</span></span><br><span class="line"><span class="comment">                     * 13 putstatic #7</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cnt);  <span class="comment">// 结果并不是1w</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​</p><h2><span id="jin-zhi-zhi-ling-chong-pai-chong-dian"> 禁止指令重排（重点）</span><a href="#jin-zhi-zhi-ling-chong-pai-chong-dian" class="header-anchor">#</a></h2><h3><span id="volatile-tong-guo-nei-cun-ping-zhang-jie-jue-zhi-ling-chong-pai"> volatile通过内存屏障解决指令重排</span><a href="#volatile-tong-guo-nei-cun-ping-zhang-jie-jue-zhi-ling-chong-pai" class="header-anchor">#</a></h3><ul><li><p>前面提到为了节省CPU的运行时间，允许将没有数据先后依赖顺序要求的指令重排序运行。</p></li><li><p>但有时候在高并发场景会出现问题，如DCL不用volatile禁止重排，可能会导致极端情况半初始化对象被返回回去（0值未在构造方法顺利初始化）。</p></li></ul><h3><span id="nei-cun-ping-zhang"> 内存屏障</span><a href="#nei-cun-ping-zhang" class="header-anchor">#</a></h3><ul><li><code>内存屏障</code>是一种CPU指令，用于控制特定条件下的重排序和内存可见性问题。</li><li>Java编译器也会根据内存屏障的规则禁止重排序。</li><li>Java编译器在<strong>生成指令序列的适当位置会插入内存屏障指令</strong>来禁止特定类型的处理器重排序，从而让程序按我们预想的流程去执行。告诉CPU：</li><li>不管什么指令都不能和这条<code>Memory Barrier</code>指令重排序。</li><li><code>Memory Barrier</code>所做的另外一件事是强制刷出各种<code>CPU Cache</code>，如一个<code>Write-Barrier</code>（写入屏障）将刷出所有在<code>Barrier</code>之前写入<code>cache</code> 的数据，因此，任何CPU上的线程都能读取到这些数据的最新版本。</li><li>四种内存屏障：<ul><li><code>LL</code>：序列：Load1,Loadload,Load2  读 读 大白话就是Load1一定要在Load2前执行，及时Load1执行慢Load2也要等Load1执行完。通常能执行预加载指令/支持乱序处理的处理器中需要显式声明Loadload屏障，因为在这些处理器中正在等待的加载指令能够绕过正在等待存储的指令。 而对于总是能保证处理顺序的处理器上，设置该屏障相当于无操作。</li><li><code>SS</code>：序列：Store1，StoreStore，Store2 大白话就是Store1的指令任何操作都可以及时的从高速缓存区写入到共享区，确保其他线程可以读到最新数据，可以理解为确保可见性。通常情况下，如果处理器不能保证从写缓冲或/和缓存向其它处理器和主存中按顺序刷新数据，那么它需要使用StoreStore屏障。</li><li><code>LS</code>：序列： Load1; LoadStore; Store2 大致作用跟第一个类似，确保Load1的数据在Store2和后续Store指令被刷新之前读取。在等待Store指令可以越过loads指令的乱序处理器上需要使用LoadStore屏障。</li><li><code>SL</code>：序列: Store1; StoreLoad; Load2 确保Store1数据对其他处理器变得可见（指刷新到内存），之前于Load2及所有后续装载指令的装载。StoreLoad Barriers会使该屏障之前的所有内存访问指令（存储和装载指令）完成之后，才执行该屏障之后的内存访问指令。  StoreLoad Barriers是一个<code>全能型</code> 的屏障，它同时具有其他3个屏障的效果。现代的多处理器大多支持该屏障（其他类型的屏障不一定被所有处理器支持）。</li></ul></li></ul><h3><span id="jvm-ceng-mian-dui-volatile-de-shi-xian"> JVM层面对volatile的实现</span><a href="#jvm-ceng-mian-dui-volatile-de-shi-xian" class="header-anchor">#</a></h3><ul><li>上面提到禁止指令重排底层是通过<code>内存屏障</code>实现的。</li><li>内存屏障其实就是对指令加屏障，在指令执行前后进行约束。<strong>JVM编译的时候，生成字节码底层是插入lock 指令</strong>-----总线锁</li><li>JVM有8种基础原子操作：<code>lock</code>、<code>unlock</code>、<code>store</code>、<code>load</code>。。。（这里的lock和上面的汇编lock不是一回事儿）</li></ul><p>如：</p><ul><li>1.在每个volatile写(S)操作的前面插入一个StoreStore屏障（上一个S和这个S不能重排，前面写完了这里才能写）</li><li>2.在每个volatile写操作的后面插入一个SotreLoad屏障（上一个S写完了，下面才能读Load）</li><li>3.在每个volatile读(L)操作的前面插入一个StoreLoad屏障（上一个写完了你才能读）</li><li>4.在每个volatile读操作的后面插入一个LoadStore屏障（这一次读完了，下面才能写）</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605091146020.png" alt="image-20200605091146020"></p><p>综上：volatile变量读操作的性能消耗与普通变量几乎没有什么差别， 但是写操作则可能会慢上一些， 因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p><h3><span id="hotspot-di-ceng-dui-volatile-de-shi-xian-hui-bian-lock-addl-0"> Hotspot底层对volatile的实现（汇编 <code>lock addl 0</code>）</span><a href="#hotspot-di-ceng-dui-volatile-de-shi-xian-hui-bian-lock-addl-0" class="header-anchor">#</a></h3><p>和缓存一致性协议没关系，很多人误解这里是MESI实现的，然而并不是。</p><p>JVM这里判断是否多核CPU，如果是的话，使用了汇编语句。AMD和其他CPU都用了一样的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock addl 0 esp</span><br></pre></td></tr></table></figure><ul><li><p><code>addl</code>是往某个寄存器上面加一个值，这里加了一个0. <code>addl 0</code>是一个空操作。</p></li><li><p><code>lock</code>用于多处理器的时候<strong>执行指令时对共享内存独占使用</strong>-----锁总线。</p><ul><li>作用是对当前处理器的缓存内容刷到内存，并使其他处理器的缓存失效。</li><li>同时其他的指令无法越过这个内存屏障。</li></ul></li><li><p>汇编还有一条<code>nop</code>空指令，但是不能被<code>lock</code></p></li><li><p>这里是用<code>lock</code>锁住了空操作指令</p></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605175037161.png" alt="image-20200605175037161"></p><ul><li>下面的例子如果发生指令重排，可能把标识<code>initialized = true;</code>对应的字节码指令重排到读取配置文件<code>configText = readConfigFile(fileName);</code>前面</li><li>此时另一个线程看到<code>initialized = true;</code>就去读取，但是<code>config</code>还没准备好，是未初始化的0值对象。</li><li>所以必须加volatile</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Map configOptions;</span><br><span class="line"><span class="keyword">char</span>[] configText;</span><br><span class="line"><span class="comment">// 此变量必须定义为volatile</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> initialized = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设以下代码在线程A中执行</span></span><br><span class="line"><span class="comment">// 模拟读取配置信息， 当读取完成后</span></span><br><span class="line"><span class="comment">// 将initialized设置为true,通知其他线程配置可用</span></span><br><span class="line">configOptions = <span class="keyword">new</span> HashMap();</span><br><span class="line">configText = readConfigFile(fileName);</span><br><span class="line">processConfigOptions(configText, configOptions);</span><br><span class="line">initialized = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设以下代码在线程B中执行</span></span><br><span class="line"><span class="comment">// 等待initialized为true， 代表线程A已经把配置信息初始化完成</span></span><br><span class="line"><span class="keyword">while</span> (!initialized) &#123;</span><br><span class="line">sleep();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用线程A中初始化好的配置信息</span></span><br><span class="line">doSomethingWithConfig();</span><br></pre></td></tr></table></figure><h2><span id="final-de-nei-cun-ping-zhang"> final的内存屏障</span><a href="#final-de-nei-cun-ping-zhang" class="header-anchor">#</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBean</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = name;   <span class="comment">//--------------1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UserBean u = <span class="keyword">new</span> UserBean();  <span class="comment">//------------2</span></span><br></pre></td></tr></table></figure><p>在构造函数内对一个final引用的对象的成员域的写入，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。</p><p>也就是赋值完了才能返回，否则会返回一个未初始化final的对象。</p><blockquote><ol><li>会要求编译器在final域的写之后，构造函数return之前插入一个StoreStore屏障。</li><li>读final域的重排序规则要求编译器在读final域的操作前面插入一个LoadLoad屏障。</li></ol></blockquote><h1><span id="chong-liang-ji-suo-synchronized"> 重量级锁Synchronized</span><a href="#chong-liang-ji-suo-synchronized" class="header-anchor">#</a></h1><p>synchronized关键字是并发编程中线程同步的常用手段之一，synchronized是悲观锁，是一个非公平的可重入锁。其作用有三个:</p><p><a href="#%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%97%AE%E9%A2%98">并发编程问题</a> 可以看到<code>synchronized</code>有三个功能</p><h2><span id="synchronized-ke-yi-bao-zheng"> Synchronized可以保证：</span><a href="#synchronized-ke-yi-bao-zheng" class="header-anchor">#</a></h2><ul><li>原子性：加锁的部分一次性完成。多个线程操作同个代码块或函数必须排队获得锁。</li><li>可见性：Synchronized在结束之前会把其中的所有变量写到共享内存，保证多线程可见。</li><li>有序性：解决重排序问题。同一时刻只允许一个线程操作代码块。多个synchronized只能逐个串行。</li></ul><h2><span id="you-san-chong-biao-xian-xing-shi"> 有三种表现形式：</span><a href="#you-san-chong-biao-xian-xing-shi" class="header-anchor">#</a></h2><ul><li>对于静态同步方法，锁是当前类的Class对象。</li><li>对于普通同步方法，锁是当前实例对象。</li><li>对于同步方法块，锁是Synchonized括号里配置的对象。</li></ul><ol><li>synchronized修饰的实例方法，多线程并发访问时，只能有一个线程进入，获得对象内置锁，其他线程阻塞等待，但在此期间线程仍然可以访问其他方法。</li><li>synchronized修饰的静态方法，多线程并发访问时，只能有一个线程进入，获得【类锁】，其他线程阻塞等待，但在此期间线程仍然可以访问其他方法。</li><li>synchronized修饰的代码块，多线程并发访问时，只能有一个线程进入，根据括号中的对象或者是类，获得相应的对象内置锁或者是类锁</li><li>每个类都有一个类锁，类的每个对象也有一个内置锁，它们是<code>互不干扰</code>的，也就是说一个线程可以同时获得类锁和该类实例化对象的内置锁，当线程访问非synchronzied修饰的方法时，并不需要获得锁，因此不会产生阻塞。</li></ol><h2><span id="jvm-de-synchronized-shi-xian"> JVM的synchronized实现：</span><a href="#jvm-de-synchronized-shi-xian" class="header-anchor">#</a></h2><p><strong>这个话题有坑，有一个编译器层面和底层的实现。还有一个synchronized的锁升级部分。</strong></p><p>synchronized关键字经过Javac编译之后， 会在同步块的前后分别形成<code>monitorenter</code>和<code>monitorexit</code>这两个字节码指令插入到synchronized进入和出口位置。 这两个字节码指令都需要一个reference类型的参数来指明要锁定和解锁的对象。</p><p>任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁。</p><p>在执行<code>monitorenter</code>指令时， 首先要去尝试获取对象的锁。 如果这个对象<strong>没被锁定</strong>， 或者<strong>当前线程已经持有</strong>了那个对象的锁， 就把<strong>锁的计数器的值增加一</strong>， 而在执行monitorexit指令时会将<strong>锁计数器的值减一</strong>。 一旦<strong>计数器的值为零， 锁随即就被释放了。</strong> 如果获取对象锁失败， 那当前线程就应当被阻塞等待， 直到请求锁定的对象被持有它的线程释放为止。</p><p>如果是锁定的方法，有一个<code>ACC_SYNCHRONIZED</code>标识。</p><p>下面是DCL语句对应的JVM字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (DCL_Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>)&#123;  <span class="comment">// 防止在上面if之后，sync之前有多个线程到达，避免多个线程依次进来创建多个实例</span></span><br><span class="line">               INSTANCE = <span class="keyword">new</span> Object();  <span class="comment">// --------------new</span></span><br><span class="line">           &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>对应的字节码，先<code>javac</code>编译成class，再<code>javap -v</code>显示这个class的附加信息，就能看到JVM指令</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605194126896.png" alt="image-20200605194126896"></p><p>synchronized和CAS底层是这个汇编命令，在Hotspot里面可以看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock cmpechg</span><br></pre></td></tr></table></figure><h2><span id="cun-chu-wei-zhi"> <strong>存储位置：</strong></span><a href="#cun-chu-wei-zhi" class="header-anchor">#</a></h2><p>对象布局：</p><ul><li><code>mark word</code>：8个字节（锁信息/GC代数/hashcode），数组是12</li><li><code>class pointer</code>：这个对象是属于那个类的，指向方法区的对象  4个字节</li><li>数组长度：数组对象才有，4字节。</li><li><code>instance data</code>：成员变量</li><li><code>padding</code>：对齐为8字节的整数倍。</li></ul><p>如果是<code>new Object()</code>,就是8markword+4class pointer+4padding=16字节，顺丰、美团面试原题！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    String userName;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 然后在main方法用JOL分析一下一个对象内存布局</span></span><br><span class="line">        User u = <span class="keyword">new</span> User(<span class="string">"张三"</span>,<span class="number">16</span>);</span><br><span class="line">        System.out.println(ClassLayout.parseInstance(u).toPrintable());</span><br><span class="line">        <span class="comment">// 下面可以看到前两行是mark word 8个字节</span></span><br><span class="line">        <span class="comment">// 接下来是默认压缩过的class pointer 4个字节</span></span><br><span class="line">        <span class="comment">// 再后面是两个instance data，分别是4个字节的int age，4个字节的 String username 引用</span></span><br><span class="line">        <span class="comment">// 上面加起来是20个字节，不能被8整除，所以后面补了4个字节的padding。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * com.sam.phoenix.concurrent.jol.User object internals:</span></span><br><span class="line"><span class="comment">         *  OFFSET  SIZE               TYPE DESCRIPTION                               VALUE</span></span><br><span class="line"><span class="comment">         *       0     4                    (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)                                      //  markword</span></span><br><span class="line"><span class="comment">         *       4     4                    (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)                                      // markword</span></span><br><span class="line"><span class="comment">         *       8     4                    (object header)                           43 c1 00 f8 (01000011 11000001 00000000 11111000) (-134168253)                  // class pointer</span></span><br><span class="line"><span class="comment">         *      12     4                int User.age                                  16                                                                                                                                                        // instance data 年龄int 4字节</span></span><br><span class="line"><span class="comment">         *      16     4   java.lang.String User.userName                             (object)                                                                                                                      // instance data  名称String引用 4字节</span></span><br><span class="line"><span class="comment">         *      20     4                    (loss due to the next object alignment)                                                                                                                                     // padding 4字节，一共24</span></span><br><span class="line"><span class="comment">         * Instance size: 24 bytes</span></span><br><span class="line"><span class="comment">         * Space losses: 0 bytes internal + 4 bytes external = 4 bytes total</span></span><br><span class="line"><span class="comment">         */</span></span><br></pre></td></tr></table></figure><p>synchronized用的锁是存在Java对象头里的。如果对象是非数组类型，则用8字节存储markword。</p><p>Java对象头里的<strong>Mark Word</strong>里默认存储对象的<code>HashCode</code>、<code>分代年龄</code>和<code>锁标记位</code>。（MarWord：hashcode、GC代信息、锁信息）</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200606174701909.png" alt="image-20200606174701909"></p><h2><span id="wait-he-notify-bi-xu-he-synchronized-yi-qi-yong"> Wait和Notify必须和synchronized一起用</span><a href="#wait-he-notify-bi-xu-he-synchronized-yi-qi-yong" class="header-anchor">#</a></h2><ul><li>使用wait()、notify()和notifyAll()时需要先对调用对象加锁。且<strong>加锁、解锁、wait、notify</strong>必须是同一个锁对象。否则会报错<code>java.lang.IllegalMonitorStateException</code></li><li>调用wait()方法后，线程状态由RUNNING变为WAITING，并将当前线程放置到对象的等待队列。</li><li>notify()或notifyAll()方法调用后，等待线程依旧不会从wait()返回，<strong>需要调用notify()或notifAll()的线程释放锁之后，等待线程才有机会从wait()返回</strong></li><li>notify()是吧一个线程从等待队列移动到同步队列，notifAll是吧所有线程都移动了。被移动的线程状态从<code>WATING</code>变为<code>BLOCKING</code></li></ul><h2><span id="ge-chong-suo-de-da-quan"> 各种锁的大全</span><a href="#ge-chong-suo-de-da-quan" class="header-anchor">#</a></h2><h3><span id="le-guan-suo-he-bei-guan-suo"> <strong>乐观锁和悲观锁：</strong></span><a href="#le-guan-suo-he-bei-guan-suo" class="header-anchor">#</a></h3><ul><li>悲观锁：认为竞争是一直存在的，需要加锁来保证执行的顺序，最终保证我们的业务数据的正确性。lock和synchronized都是悲观锁-----适用于写多的场景。</li><li>乐观锁：认为竞争是少的，大部分时候都没什么竞争，读取更多。这时候可以通过版本号或者去多次自旋去加乐观锁，如果写失败通过再次加锁重试、或者抛出异常等方式来实现业务逻辑。比如CAS的多次自旋锁、AtomicXXX。-------适用于写少的场景</li></ul><h3><span id="zi-xuan-suo-he-gua-ying-xing-zi-xuan-suo"> <strong>自旋锁和适应性自旋锁：</strong></span><a href="#zi-xuan-suo-he-gua-ying-xing-zi-xuan-suo" class="header-anchor">#</a></h3><ul><li><strong>自旋锁</strong>：常规重量级锁是由OS实现的，线程状态切换涉及到内核调用。如果只是一个极小的操作加重量级锁反而效率低。这时候使用CAS自旋锁在用户态就搞定了。（如AtomicInteger底层的getAndAdd）</li><li>自旋锁的问题：时间短ok，获取锁时间长则会长时间自旋，占用CPU。也不可能通过sleep去操作，只能在自旋一定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有后进行自适应自旋，升级为线程挂起的重量级锁。</li><li><strong>自适应自旋</strong>：默认10次，可以使用-XX:PreBlockSpin来更改。在自旋10次还CAS失败，就进行自适应自旋，升级为线程挂起的重量级锁。</li></ul><p>自适应意味着自旋的时间（次数）不再固定，而是由<strong>前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定</strong>。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。（基于统计值的自适应，常见实现:TicketLock、CLHlock和MCSlock）</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615124546162.png" alt="image-20200615124546162"></p><h3><span id="wu-suo-qing-liang-ji-suo-vs-pian-xiang-suo-vs-qing-liang-ji-suo-vs-chong-liang-ji-suo"> <strong>无锁(轻量级锁)VS偏向锁 VS 轻量级锁 VS 重量级锁</strong></span><a href="#wu-suo-qing-liang-ji-suo-vs-pian-xiang-suo-vs-qing-liang-ji-suo-vs-chong-liang-ji-suo" class="header-anchor">#</a></h3><p>这四种锁是指锁的状态，专门针对synchronized的。参见后面的 <a href="%E9%94%81%E5%8D%87%E7%BA%A7%E8%BF%87%E7%A8%8B">锁升级过程</a> 章节。</p><h3><span id="gong-ping-suo-he-fei-gong-ping-suo"> 公平锁和非公平锁</span><a href="#gong-ping-suo-he-fei-gong-ping-suo" class="header-anchor">#</a></h3><p><strong>公平锁</strong>：等待队列严格FIFO，等待锁的线程不会饿死。缺点是<strong>整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞</strong>，CPU唤醒阻塞线程的开销比非公平锁大。</p><p><strong>非公平锁</strong>：加锁时直接尝试获取锁，<strong>获取不到才会到等待队列的队尾等待</strong>。但如果<strong>此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁</strong>，所以非公平锁有可能出现<strong>后申请锁的线先获取锁</strong>的场景。非公平锁的优点是可以<strong>减少唤起线程</strong>的开销，整体的<strong>吞吐效率高</strong>，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于<strong>等待队列中的线程可能会饿死，或者等很久才会获得锁。</strong></p><p><code>ReentrantLock</code>默认非公平。  synchronized也是非公平</p><p>另一篇博文<a href="../aqs.html#%E5%85%AC%E5%B9%B3%E9%94%81%E5%92%8C%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%E7%9A%84%E4%BD%93%E7%8E%B0">《AQS#公平锁和非公平锁》</a> 中可以看到。</p><p>其实ReentrantLock中就是下面这一行，多了一个判断。公平锁是判断队列里面没有等待的节点，采取获取锁，失败才排队。非公平锁直接去获取，失败就排队。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615141648350.png" alt="image-20200615141648350"></p><h3><span id="ke-chong-ru-suo-he-bu-ke-chong-ru-suo"> 可重入锁和不可重入锁</span><a href="#ke-chong-ru-suo-he-bu-ke-chong-ru-suo" class="header-anchor">#</a></h3><p><strong>可重入锁</strong>：是在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。<strong>Java中ReentrantLock和synchronized都是可重入锁</strong>，可重入锁的一个优点是可一定程度避免死锁。</p><p><strong>不可重入锁</strong>：相反，即使是锁定 同一个对象或者class，每次进入都需要单独获取锁。这样在递归或者继承的时候可能会死锁。</p><p>首先ReentrantLock和NonReentrantLock都继承父类AQS，其父类AQS中维护了一个同步状态status来计数重入次数，status初始值为0。</p><p>可重入锁是加锁status+=1，同一线程可以加锁多次。释放时候status-=1，当status==0就free了。</p><p>不可重入锁加锁status+=1，再次加锁不为0会加锁失败。</p><h3><span id="du-xiang-suo-vs-gong-xiang-suo-du-xie-suo"> <strong>独享锁 VS 共享锁（读写锁！）</strong></span><a href="#du-xiang-suo-vs-gong-xiang-suo-du-xie-suo" class="header-anchor">#</a></h3><p><strong>独享锁</strong>：也叫排他锁，是指该<strong>锁一次只能被一个线程所持有。<strong>如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的</strong>synchronized</strong>和JUC中<strong>Lock</strong>的实现类就是互斥锁。</p><p><strong>共享锁</strong>：是指该锁可被多个线程所持有。如果<strong>线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁</strong>。获得<strong>共享锁的线程只能读数据，不能修改</strong>数据。</p><p>下面是JDK的读写分离锁代码实现：</p><p>读写分离锁,在读比较多(耗时)的场合比常规的重入锁更加有效率。</p><ul><li>读-读线程互不阻塞,多少各线程都可以并行一起读。</li><li>但是当<code>读-写</code>或者<code>写-写</code>线程相互竞争的时候会阻塞获取锁才可以操作</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615143328743.png" alt="image-20200615143328743"></p><p>可以看到ReentrantReadWriteLock有两把锁：<strong>ReadLock和WriteLock</strong>，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现ReadLock和WriteLock是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、ReentrantLock、Semaphore里面也都存在。</p><p>在ReentrantReadWriteLock里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。<strong>读锁是共享锁</strong>，<strong>写锁是独享锁</strong>。<strong>读锁的共享锁可保证并发读非常高效</strong>，<strong>而读写、写读、写写的过程互斥，因为读锁和写锁是分离的</strong>。所以ReentrantReadWriteLock的并发性<strong>相比一般的互斥锁有了很大提升。</strong></p><p>那读锁和写锁的具体加锁方式有什么区别呢？在了解源码之前我们需要回顾一下其他知识。</p><p>高类聚低耦合的要求下，线程要操作资源类。</p><p>可重入锁(递归锁)：<strong>同一线程</strong>外层已经获取锁后，内层递归函数任然可以获取锁（锁的标志位+1）。线程可以进入任何一个他已经拥有锁同步者的代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"m1.."</span>);</span><br><span class="line">    method12();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method12</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"m2..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一把锁加锁2次，解锁2次，正常编译、运行？。-----------阿里电话面试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 也可以正常运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line">    lock.lock();</span><br><span class="line">    lock.lock();</span><br><span class="line">    System.out.println(<span class="string">"m4..."</span>);</span><br><span class="line">    lock.unlock();</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自旋锁，更多见CAS博文。</p><p>循环的方式去获取锁，减少线程切换，但是消耗CPU。</p><p>手动基于CAS Thread实现一个自旋锁</p><p>读写锁，读不互斥。</p><h2><span id="suo-sheng-ji-guo-cheng"> 锁升级过程：</span><a href="#suo-sheng-ji-guo-cheng" class="header-anchor">#</a></h2><p>先概述：偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605143658715.png" alt="image-20200605143658715"></p><p>锁升级是通过<code>ObjectMonitor</code>监视器实现的。路径是<code>new-偏向锁-轻量级所（无锁、自旋锁、自适应锁）-重量级锁</code></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200615121617875.png" alt="image-20200615121617875"></p><h3><span id="monitor"> <strong>Monitor</strong></span><a href="#monitor" class="header-anchor">#</a></h3><p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。</p><p>Monitor是<strong>线程私有的数据结构，每一个线程都有一个可用monitor record列表</strong>，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p><p>现在话题回到synchronized，synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p><p>“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是synchronized最初实现同步的方式，这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p><p>所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。</p><h3><span id="1-pu-tong-dui-xiang-wu-suo"> <strong>1.普通对象-无锁</strong></span><a href="#1-pu-tong-dui-xiang-wu-suo" class="header-anchor">#</a></h3><ul><li>new出来的对象如果偏向锁没启动就是一个普通对象。（极少）后续批量锁撤销和批量重偏向</li><li>一般4s后就偏向锁就自动启动了，new出来的普通对象就是101的匿名偏向。（大多）</li><li>多线程CAS去修改一个变量也可视为无锁，失败就重试。</li></ul><h3><span id="2-pian-xiang-suo"> <strong>2.偏向锁</strong></span><a href="#2-pian-xiang-suo" class="header-anchor">#</a></h3><ul><li><p><code>101</code>：普通对象synchronized上锁的时候优先上偏向锁。</p></li><li><p><strong>MarkWord上面记录当前线程指针，下次在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁（线程指针）。</strong>（绝大部分时候没有竞争）</p></li><li><p>所谓偏向锁，偏向加锁的第一个线程。hashCode备份在线程栈上，线程销毁，锁降级为无锁。</p></li><li><p>延迟启动，JVM 启动4s以后<code>-XX:BiasLockStartupDely=0</code>。所有不加锁对象创建成功就是<code>101</code>，即<code>匿名偏向锁</code>，后面没有线程号。</p></li><li><p>竞争严重的应用可以关闭偏向锁，避免<code>锁撤销</code>过程的性能消耗。</p></li><li><p>为什么要用到偏向锁？</p><ul><li>比如<code>Vector</code>和<code>StringBuffer</code>的所有方法都是<code>synchronized</code>的，<code>StringBuilder</code>不是。不过<code>StringBuffer</code>和<code>StringBuilder</code>底层都是字符串数组去不断扩容实现的。</li><li>但是在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。也就是绝大部分时候都不需要用到竞争，或者说没有竞争。如果一上来就给操作系统申请重量级线程锁很浪费资源。提高效率。</li><li>所以就有一个偏向锁，给对象一个标识说当前线程正在占用。（偏向第一个线程）</li></ul></li><li><p>偏向锁的释放？</p><ul><li><p>偏向锁<strong>只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁</strong>，线程不会主动释放偏向锁。</p></li><li><p><strong>偏向锁的撤销，需要等待全局安全点</strong>（在这个时间点上<strong>没有字节码正在执行</strong>），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p></li><li><p>如果一上来就竞争特别激烈的场景，不如直接使用轻量级自旋锁。<code>-XX:-UseBiasedLocking=false</code>可以关闭默认打开的偏向锁。</p></li></ul></li></ul><h3><span id="3-qing-liang-ji-suo-zi-xuan-suo"> <strong>3.轻量级锁–自旋锁</strong></span><a href="#3-qing-liang-ji-suo-zi-xuan-suo" class="header-anchor">#</a></h3><ul><li><p><code>00</code>：偏向锁有轻度竞争，偏向锁升级为轻量级锁**（就是自旋锁）**。</p></li><li><p>每个线程有自己的LockRecoder在自己的线程栈上。</p></li><li><p>用CAS去争用markword的LR的指针。指针指向那个线程的LR，哪个线程就有锁。</p></li><li><p>当线程很多的时候，CAS的空转很影响效率，这时候就是用重量级锁去交给OS内核态队列处理。</p></li><li><p>自旋锁在JDK1.4引入，需要加参数<code>-XX:+UseSpinning</code>启用。1.6开始自动启用,并且引入了自适应的自旋锁（适应性自旋锁）</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605145625903.png" alt="image-20200605145625903"></p></li></ul><p><strong>加锁过程：</strong></p><ul><li>当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</li><li>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。</li><li>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。</li><li>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</li><li>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</li></ul><h3><span id="4-chong-liang-ji-suo"> <strong>4.重量级锁</strong></span><a href="#4-chong-liang-ji-suo" class="header-anchor">#</a></h3><ul><li><code>10</code>:JDK1.6以前默认，可以调优：自旋超过10次，或等待的线程超过CPU核数1/2，升级为重量级锁。1.6之后自适应自旋，JVM自己决定升级。</li><li>–如果太多线程自旋消耗CPU太大，不如升级为重量级锁，自动加入等待队列，不消耗CPU。  <code>-XX:PreBlockSpin</code></li><li>重量级锁也是JVM使用<code>ObjectMonitor</code>搞了一个虚拟队列，使用CAS自旋，失败park。（JVM C++代码里，和我们Java的ReentrantLock很像，只是它还搞了一个EntryList另外一个队列去降低竞争）</li><li></li></ul><h3><span id="sheng-ji-guo-cheng-ji-lu-zai-markword-shang"> 升级过程记录在<code>markword</code>上：</span><a href="#sheng-ji-guo-cheng-ji-lu-zai-markword-shang" class="header-anchor">#</a></h3><ul><li>其实就是修改下面对象的markword，64位虚拟机看最后两位。所以任何对象都可以被锁：<ul><li>00 轻量级锁（自旋锁）</li><li>10 重量级</li><li>11 GC标记要被回收</li><li>01：001无锁，101偏向锁</li><li><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605143742860.png" alt="image-20200605143742860"></li></ul></li></ul><p>普通对象到偏向锁的过程，是2位计数的<code>epoch</code>，批量锁撤销和批量重偏向。</p><p>锁升级为偏向锁后<code>hashCode</code>存到线程栈中<code>LockRecord</code>，对象markword记录线程指针。（对象现在被线程独占）</p><p>只有重量级锁是在内核态，需要操作系统线程管理介入。前面的偏向锁和轻量级锁都是用户态。</p><ul><li><p>自旋锁什么时候升级为重量级锁？</p></li><li><p>偏向锁是不是一定比自旋锁效率高？</p><ul><li>不一定。在明知道会有很多线程竞争的时候，偏向锁涉及到锁撤销，这时候直接用自旋锁。<ul><li>JVM启动过程中，会有很多线程竞争？所以默认的时候不打开偏向锁，过一段时间再打开。</li></ul></li></ul></li><li><p>轻量级锁和重量级锁的hashcode存储在哪里？</p><ul><li>线程栈中，轻量级锁的LR中，或者是代表重量级锁的ObjectMonitor的成员在中。</li></ul></li><li><p>为什么有自旋锁还要重量级锁？</p><ul><li>自旋锁消耗CPU资源，锁的时间太长或者自旋线程太多，CPU大量消耗</li><li>重量级锁有一个等待队列，拿不到的都在等待，不消耗CPU资源</li></ul></li></ul><p>synchronized优化的过程和mark word息息相关。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605144451226.png" alt="image-20200605144451226"></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605144517838.png" alt="image-20200605144517838"></p><p>如果计算过对象的hashcode，对象无法进入偏向状态。？</p><h3><span id="suo-xiao-chu"> 锁消除</span><a href="#suo-xiao-chu" class="header-anchor">#</a></h3><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605145705139.png" alt="image-20200605145705139"></p><h3><span id="suo-cu-hua"> 锁粗化</span><a href="#suo-cu-hua" class="header-anchor">#</a></h3><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200605145732714.png" alt="image-20200605145732714"></p><h3><span id="chao-xian-cheng"> 超线程：</span><a href="#chao-xian-cheng" class="header-anchor">#</a></h3><p>一个AUL+两组Registers+PC</p><h2><span id="suo-chong-ru"> 锁重入</span><a href="#suo-chong-ru" class="header-anchor">#</a></h2><p>同一线程允许多次进入同一个锁对象代码块。多次进入需要记录加锁次数，后续需要多次解锁。-----上锁一次就在线程栈里记录一个LockRecord，里面有上锁时候的markword等信息。解锁一次就弹出一次。</p><p>synchronized是允许锁重入的，否则继承的时候，重写父类synchronized方法<code>super.xxx()</code>就死锁了。   或者递归synchronized就死锁了。</p><h2><span id="suo-jiang-ji"> 锁降级</span><a href="#suo-jiang-ji" class="header-anchor">#</a></h2><p>GCThread才会去看锁对象的状态，降级。不常用</p><p><strong>注意：</strong></p><ul><li>被synchronized修饰的同步块对同一条线程来说是可重入的！！！同一线程反复进入同步块也不会出现自己把自己锁死的情况。(锁计数器+1)</li><li>被synchronized修饰的同步块在持有锁的线程执行完毕并释放锁之前， 会无条件地阻塞后面其他线程的进入。 这意味着无法像处理某些数据库中的锁那样， 强制已获取锁的线程释放锁； 也无法强制正在等待锁的线程中断等待或超时退出。</li></ul><p>持有锁是一个重量级（Heavy-Weight） 的操作,JDK1.6之后好一些。</p><p>测试<code>synchronized(this)</code>和<code>synchronized method()</code>：相同的，都是对象锁。一个对象只能获取一个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Synchronized----两个方法加锁，等同于当前对象加锁，只能有一个不加锁的方法运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Synchronized2_InstanceLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User u = <span class="keyword">new</span> User();</span><br><span class="line">        u.setName(<span class="string">"sam"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 学习线程</span></span><br><span class="line">        Thread studyThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" run...."</span>);</span><br><span class="line">                u.study();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"study-thread"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 吃饭线程</span></span><br><span class="line">        Thread eatThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" run...."</span>);</span><br><span class="line">            u.eat();</span><br><span class="line">        &#125;,<span class="string">"eat-thread"</span>);</span><br><span class="line"></span><br><span class="line">        Thread readingThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" run...."</span>);</span><br><span class="line">            u.reading();</span><br><span class="line">        &#125;,<span class="string">"reading-thread"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法加锁和局部代码块加锁都是一个效果：对象锁。同一个对象上的线程只能多选一</span></span><br><span class="line">        studyThread.start();</span><br><span class="line">        eatThread.start();</span><br><span class="line">        readingThread.start();</span><br><span class="line">        <span class="comment">// 但不能阻塞不加锁的线程</span></span><br><span class="line">        u.speaking();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多个不同实例化对象的锁不会互相影响</span></span><br><span class="line">        User u2 = <span class="keyword">new</span> User();</span><br><span class="line">        u2.setName(<span class="string">"joe"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" run...."</span>);</span><br><span class="line">            u2.eat();</span><br><span class="line">        &#125;,<span class="string">"u2-eat"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学习---加锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">" start study》》》》》》"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name+<span class="string">" end study《《《《《《《"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speaking</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I'am "</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃饭---加锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">" start eat&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name+<span class="string">" end eat&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * this 锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reading</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始等待this锁..."</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            System.out.println(name+<span class="string">"reading------&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name+<span class="string">" reading------&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p>可以看到sam对象同时study，eat，reading三个线程只有一个在运行，但是joe对象和sam对象无关可以并行。这就是对象锁的效果。</p><p>加在方法上和加在this上都是一样的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">study-thread run....</span><br><span class="line">sam start study》》》》》》</span><br><span class="line">reading-thread run....</span><br><span class="line">eat-thread run....</span><br><span class="line">I&#39;am sam</span><br><span class="line">开始等待this锁...</span><br><span class="line">u2-eat run....</span><br><span class="line">joe start eat&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">joe end eat&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">sam end study《《《《《《《</span><br><span class="line">samreading------&gt;&gt;&gt;&gt;</span><br><span class="line">sam reading------&lt;&lt;&lt;&lt;</span><br><span class="line">sam start eat&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">sam end eat&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br></pre></td></tr></table></figure><p>测试类锁和对象锁：</p><p>先看结论：</p><ul><li>同一个对象的多个对象锁互斥（这是废话）</li><li>类锁和对象锁不互斥，对象锁上锁后，类锁可以继续获取并执行。</li><li>类锁对多个对象都是互斥的。</li><li>底层：<ul><li>对象锁：是在new出来的对象的markword上放着锁信息</li><li>类锁：在类Class的markword上放着锁信息</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Synchronized(XXX.class)----所有对象一起加锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Synchronized3_clazz</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        User3 u = <span class="keyword">new</span> User3();</span><br><span class="line">        u.setName(<span class="string">"【sam】"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 学习线程</span></span><br><span class="line">        Thread studyThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">" run...."</span>);</span><br><span class="line">                u.study();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"study-thread"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 吃饭线程</span></span><br><span class="line">        Thread eatThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" run...."</span>);</span><br><span class="line">            u.eat();</span><br><span class="line">        &#125;,<span class="string">"eat-thread"</span>);</span><br><span class="line"></span><br><span class="line">        Thread speakThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" run...."</span>);</span><br><span class="line">            u.speak();</span><br><span class="line">        &#125;,<span class="string">"speak-thread"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加锁的线程只能二选一</span></span><br><span class="line">        studyThread.start();  <span class="comment">// 对象锁</span></span><br><span class="line">        eatThread.start();  <span class="comment">// 类锁</span></span><br><span class="line">        speakThread.start(); <span class="comment">// 对象锁</span></span><br><span class="line">        <span class="comment">// 但不能阻塞不加锁的线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多个不同实例化对象的锁不会互相影响，类锁会的</span></span><br><span class="line">        User3 u2 = <span class="keyword">new</span> User3();</span><br><span class="line">        u2.setName(<span class="string">"(joe)"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" run....同时只能有一个线程eat..."</span>);</span><br><span class="line">            u2.eat();</span><br><span class="line">        &#125;,<span class="string">"u2-eat"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" run...."</span>);</span><br><span class="line">            u2.speak();</span><br><span class="line">        &#125;,<span class="string">"u2-speak"</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User3</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学习---对象锁，和别的对象不冲突</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">            System.out.println(name+<span class="string">" start study（对象锁）》》》》》》"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name+<span class="string">" end study（对象锁）《《《《《《《"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**at speak-thread</span></span><br><span class="line"><span class="comment">     * 加对象锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"I'am "</span>+name+<span class="string">" at "</span>+ Thread.currentThread().getName()+<span class="string">"（对象锁）=======&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name+<span class="string">" end speak（对象锁） =======&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃饭---加锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(User3<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            System.out.println(name+<span class="string">" start eat(类锁)&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name+<span class="string">" end eat(类锁)&lt;&lt;&lt;&lt;&lt;&lt;&lt;，马上会有下一个eat"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p>可以看到<code>sam</code>对象锁多个之间会互斥，一个结束才能继续另一个，和上面一节的测试相同。</p><p><code>sam</code>的对象锁和类锁不互斥，可以同时<code>study</code>和<code>eat</code></p><p><code>sam</code>和<code>joe</code>的类锁互斥，<code>sam</code>的<code>eat</code>结束后<code>joe</code>才能<code>eat</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">study-thread run....</span><br><span class="line">【sam】 start study（对象锁）》》》》》》</span><br><span class="line">eat-thread run....</span><br><span class="line">【sam】 start eat(类锁)&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">speak-thread run....</span><br><span class="line">u2-eat run....同时只能有一个线程eat...</span><br><span class="line">u2-speak run....</span><br><span class="line">I&#39;am (joe) at u2-speak（对象锁）&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">【sam】 end eat(类锁)&lt;&lt;&lt;&lt;&lt;&lt;&lt;，马上会有下一个eat</span><br><span class="line">(joe) end speak（对象锁） &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">(joe) start eat(类锁)&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">【sam】 end study（对象锁）《《《《《《《</span><br><span class="line">I&#39;am 【sam】 at speak-thread（对象锁）&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">(joe) end eat(类锁)&lt;&lt;&lt;&lt;&lt;&lt;&lt;，马上会有下一个eat</span><br><span class="line">【sam】 end speak（对象锁） &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&lt;&lt;&lt;&lt;&lt;</span><br></pre></td></tr></table></figure><h2><span id="dcl-dan-li"> DCL单例</span><a href="#dcl-dan-li" class="header-anchor">#</a></h2><p>注意最上面的对象要加<code>volatile</code>，锁里面要二次检查</p><blockquote><p><a href="https://www.cnblogs.com/codingmengmeng/p/9846131.html" target="_blank" rel="noopener">https://www.cnblogs.com/codingmengmeng/p/9846131.html</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 严格单例，而且需要的时候才创建-----&gt; Double Check Lock    DCL写法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DCL_Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里必须要加volatle！！！！ 禁止指令重排。</span></span><br><span class="line"><span class="comment">     * 否则线程可能在下面---new那一行发生可能指令重排:</span></span><br><span class="line"><span class="comment">     * 本来是：  new-&gt;初始化参数-&gt;建立关系。</span></span><br><span class="line"><span class="comment">     * 如果重排成为：new-&gt;建立关联-&gt;初始化参数。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 极端情况刚new的对象还是0值，建立了关系，正在准备初始化的时候。</span></span><br><span class="line"><span class="comment">     * 另一个线程进来获取了，判断不为NULL(因为重排建立关系了)，直接返回。拿回去的是一个未被正确初始化的0值对象（半初始化对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> Object INSTANCE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(INSTANCE != <span class="keyword">null</span>)&#123;  <span class="comment">// 别一上来就加锁，性能太差。这里绝大部分时候不用加锁。</span></span><br><span class="line">            <span class="keyword">return</span> INSTANCE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用sleep来模拟并发，下面不判断会出现多个hashcode</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            TimeUnit.SECONDS.sleep(1);</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">// 为空的时候才会加锁，只有第一次的时候加锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (DCL_Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>)&#123;  <span class="comment">// 防止在上面if之后，sync之前有多个线程到达，避免多个线程依次进来创建多个实例</span></span><br><span class="line">                INSTANCE = <span class="keyword">new</span> Object();  <span class="comment">// --------------new</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//--------------------测试</span></span><br><span class="line">    <span class="comment">// 记录对象个数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> Set&lt;Integer&gt; hashCodes = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">    <span class="comment">// 记录创建次数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> AtomicInteger cnt = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试，创建10w个对象，看看hashcode是不是都一样。使用sleep加剧并发。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    hashCodes.add(getInstance().hashCode());</span><br><span class="line">                    cnt.getAndIncrement();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount() &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"创建对象个数："</span>+cnt.get());</span><br><span class="line">        System.out.println(<span class="string">"hash code数量="</span>+hashCodes.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1><span id="xian-cheng-ji-chu"> 线程基础</span><a href="#xian-cheng-ji-chu" class="header-anchor">#</a></h1><h2><span id="chuang-jian-xian-cheng-de-fang-shi"> 创建线程的方式：</span><a href="#chuang-jian-xian-cheng-de-fang-shi" class="header-anchor">#</a></h2><p>Thread/Runnable/Callable-Futrue/ExcutorServices</p><p>一共有六种状态</p><ul><li>NEW</li><li>RUNNABLE</li><li>WATING</li><li>TIMED_WATING</li><li>BLOCKED</li><li>TERMINATED</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200609110031802.png" alt="image-20200609110031802"></p><h1><span id="objectmonitor"> ObjectMonitor：</span><a href="#objectmonitor" class="header-anchor">#</a></h1><ul><li>每一个对象都有一个与之对应的<strong>监视器</strong></li><li>每一个监视器里面都有一个<strong>该对象的锁</strong>和一个<strong>等待队列</strong>和一个<strong>同步队列</strong></li></ul><p>锁升级是通过<code>ObjectMonitor</code>监视器实现的。路径是<code>new-偏向锁-轻量级所（无锁、自旋锁、自适应锁）-重量级锁</code></p><p>notify()方法也是一样的，用来唤醒一个线程，你要去唤醒，首先你得知道他在哪儿，所以必须先找到该对象，也就是获取该对象的锁，当获取到该对象的锁之后，才能去该对象的对应的等待队列去唤醒一个线程。</p><p><code>ObjectMonitor</code>：里面有<code>waiteSet</code>等待的线程集合，<code>_count</code>重入数量，<code>entryList</code>处于等待状态的线程双向链表。</p><h1><span id="wait-notify"> Wait/Notify</span><a href="#wait-notify" class="header-anchor">#</a></h1><h2><span id="wait-fang-fa-yao-fang-zai-suo-li-mian"> wait方法要放在锁里面！！！</span><a href="#wait-fang-fa-yao-fang-zai-suo-li-mian" class="header-anchor">#</a></h2><p>thread.join的底层是基于wait/notify实现的。wait方法来自Object，是Native的C++方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**等待一定的时间，等不到就挂，传入0则永久等待。</span></span><br><span class="line"><span class="comment">     * Waits at most &#123;<span class="doctag">@code</span> millis&#125; milliseconds for this thread todie. A timeout of &#123;<span class="doctag">@code</span> 0&#125; means to wait forever.</span></span><br><span class="line"><span class="comment">     * 使用了一个循环去调用是否还或者isAlive(),如果被调用了notifyAll，wait的线程就终止了。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; This implementation uses a loop of &#123;<span class="doctag">@code</span> this.wait&#125; calls</span></span><br><span class="line"><span class="comment">     * conditioned on &#123;<span class="doctag">@code</span> this.isAlive&#125;. As a thread terminates the</span></span><br><span class="line"><span class="comment">     * 重点，推荐线程对象(Thread对象)不要使用wait/notify或者notifyAll在线程对象上。</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> this.notifyAll&#125; method is invoked. It is recommended that</span></span><br><span class="line"><span class="comment">     * applications not use &#123;<span class="doctag">@code</span> wait&#125;, &#123;<span class="doctag">@code</span> notify&#125;, or</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> notifyAll&#125; on &#123;<span class="doctag">@code</span> Thread&#125; instances.</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">                wait(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">                <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">                <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                wait(delay);</span><br><span class="line">                now = System.currentTimeMillis() - base;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2><span id="wait-de-shi-xian"> wait的实现：</span><a href="#wait-de-shi-xian" class="header-anchor">#</a></h2><p>JVM的wait，都会走<code>ObjectMonitor#wait()</code>，调用的时候会把当前线程包装成一个C++的<code>ObjectWaiter</code>对象丢到<code>ObjectMonitor._waitSet</code>（等待队列）里面。会调用park挂起线程。所以：</p><ul><li>首先wait的语义就是让<strong>这个对象上的线程等待</strong>，</li><li>wait首先需要获取当前对象锁</li><li>然后当前线程放到wait对象的阻塞队列</li><li>这些操作都是与监视器相关的，当然要指定一个ObjectMonitor监视器才能完成这个操作</li></ul><h2><span id="notify-de-shi-xian"> Notify的实现：</span><a href="#notify-de-shi-xian" class="header-anchor">#</a></h2><p>唤起的时候，去waitset里面拿到这个线程，给他unpark。</p><h2><span id="wei-sha-yao-fang-dao-synchronized-li-mian-fou-ze-hui-pao-chu-illegalmonitorstateexception"> 为啥要放到synchronized里面？否则会抛出 IllegalMonitorStateException？</span><a href="#wei-sha-yao-fang-dao-synchronized-li-mian-fou-ze-hui-pao-chu-illegalmonitorstateexception" class="header-anchor">#</a></h2><p>因为wait的时候要放到<code>ObjectMonitor</code>的等待队列里面，notify的时候要从<code>ObjectMonitor</code>里面拿出来</p><h1><span id="callable-futrue"> callable/futrue</span><a href="#callable-futrue" class="header-anchor">#</a></h1><h1><span id="chang-jian-wen-ti-qa"> 常见问题QA</span><a href="#chang-jian-wen-ti-qa" class="header-anchor">#</a></h1><h2><span id="synchronized-he-reentrantlock-you-shi-me-qu-bie"> synchronized和ReentrantLock有什么区别？</span><a href="#synchronized-he-reentrantlock-you-shi-me-qu-bie" class="header-anchor">#</a></h2><table><thead><tr><th>synchronized</th><th>ReentrantLock</th></tr></thead><tbody><tr><td>Java关键字，隐式释放</td><td>Lock接口的实现类，手动获取，finally中释放。（可中断/超时）</td></tr><tr><td>1.6后有优化，一系列锁升级过程，最终是重量级。底层是’lock cmpchg’汇编</td><td>基于AQS实现，底层是CAS</td></tr><tr><td>独占式，性能相对低</td><td>可以非独占，可以读写锁分离（共享锁）</td></tr><tr><td>多变量加锁</td><td>单变量加锁</td></tr><tr><td>被动</td><td>主动性高</td></tr></tbody></table><h2><span id="bi-mian-si-suo"> 避免死锁：</span><a href="#bi-mian-si-suo" class="header-anchor">#</a></h2><p>死锁就是两个线程互相持有一个锁，都在等待对方的一个锁释放。</p><ul><li>避免一个线程同时获取多个锁。（最有效的方法）</li><li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li><li>尝试使用定时锁，使用lock.tryLock（timeout）来替代使用内部锁机制。</li><li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况</li></ul><h2><span id="bing-fa-yi-ding-hui-ti-gao-xiao-lu"> 并发一定会提高效率？</span><a href="#bing-fa-yi-ding-hui-ti-gao-xiao-lu" class="header-anchor">#</a></h2><p>No，要考虑资源限制。比如网络带宽、磁盘IO、CPU能力等资源的限制下即使再多的线程也无济于事，还会因为线程切换带来额外开销。</p><ul><li>对于硬件限制可以考虑将进程分到多个机器的集群，最终计算结果聚合。</li><li>对于软件的限制，考虑使用连接池、线程池、长连接。</li><li>资源限制条件下：调整并法度，如下载依赖于网速和磁盘读写。不超过CPU线程数等。</li></ul><h2><span id="shi-xian"> 实现</span><a href="#shi-xian" class="header-anchor">#</a></h2><ul><li>打开偏向锁效率一定高么？<ul><li>不一定，当很多线程争抢的时候，偏向锁还需要一个<code>锁撤销</code>的过程，把当前线程ID拿掉，效率反而低。</li><li>比如JVM启动的时候底层会有多线程竞争，这时候直接上轻量级锁，所以延迟4s才会启动偏向锁。</li></ul></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200606213911458.png" alt="image-20200606213911458"></p><p>类加载技术的半加载技术</p><p>新生代到你老年代CMS默认6代，PS+PO、G1 默认15，mark word里4位最大16</p><p>频繁FGC，</p><blockquote><p><a href="https://juejin.im/post/5ea4f5596fb9a03c6a41881a" target="_blank" rel="noopener">https://juejin.im/post/5ea4f5596fb9a03c6a41881a</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ji-suan-ji-ji-chu&quot;&gt;计算机基础&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cpu-huan-cun&quot;&gt;CPU缓存&lt;/a&gt;&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="多线程" scheme="https://blog.sofunnyai.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://blog.sofunnyai.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="并发" scheme="https://blog.sofunnyai.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>深入理解woe和iv</title>
    <link href="https://blog.sofunnyai.com/article/woe-iv.html"/>
    <id>https://blog.sofunnyai.com/article/woe-iv.html</id>
    <published>2018-01-14T03:10:14.000Z</published>
    <updated>2020-05-27T11:02:12.351Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#woe-weight-of-evidence-zheng-ju-quan-chong">WOE(Weight of Evidence) 证据权重</a><ul><li><a href="#woe-de-ding-yi">WOE的定义</a></li><li><a href="#woe-gong-shi-li-jie">Woe公式理解</a></li><li><a href="#woe-hui-gu">WOE回顾：</a></li></ul></li><li><a href="#iv-zhi-ke-yi-ren-wei-shi-woe-de-jia-quan">IV值：可以认为是WOE的加权</a></li><li><a href="#ji-suan-woe-he-iv-de-bu-zou">计算woe和IV的步骤</a><ul><li><a href="#ji-suan-zhu-yi-dian">计算注意点</a></li></ul></li><li><a href="#woe-he-iv-de-bi-jiao-wei-shi-me-bu-yong-woe-er-shi-yong-iv-zhi">WOE和IV的比较----为什么不用WOE，而是用IV值</a></li><li><a href="#tong-yong-woe-ji-suan-shi-xian">通用WOE计算实现</a></li></ul><!-- tocstop --></div><link href="https://cdn.bootcss.com/KaTeX/0.7.1/katex.min.css" rel="stylesheet"><h1><span id="woe-weight-of-evidence-zheng-ju-quan-chong"> WOE(Weight of Evidence) 证据权重</span><a href="#woe-weight-of-evidence-zheng-ju-quan-chong" class="header-anchor">#</a></h1><blockquote><p><a href="https://blog.csdn.net/kevin7658/article/details/50780391" target="_blank" rel="noopener">https://blog.csdn.net/kevin7658/article/details/50780391</a><br><a href="https://zhuanlan.zhihu.com/p/80134853" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/80134853</a><br><a href="https://www.cnblogs.com/hanxiaosheng/p/9831838.html" target="_blank" rel="noopener">https://www.cnblogs.com/hanxiaosheng/p/9831838.html</a><br><a href="https://www.cnblogs.com/hanxiaosheng/p/9831964.html" target="_blank" rel="noopener">https://www.cnblogs.com/hanxiaosheng/p/9831964.html</a><br><a href="https://blog.csdn.net/PbGc396Dwxjb77F2je/article/details/99687952" target="_blank" rel="noopener">https://blog.csdn.net/PbGc396Dwxjb77F2je/article/details/99687952</a></p></blockquote><h2><span id="woe-de-ding-yi"> WOE的定义</span><a href="#woe-de-ding-yi" class="header-anchor">#</a></h2><ul><li>WOE是一种对原始自变量进行编码的格式，可以屏蔽极值增强鲁棒性。（树模型一般只对离散变量进行编码，对极值不敏感）</li><li>要对一个变量进行WOE编码，需要<strong>首先把这个变量进行分组处理/离散化处理</strong>（等宽切割，等频切割，卡方分箱，或者利用决策树来切割）。</li><li><strong>分组后，对于第i组</strong>，WOE的计算公式如下：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>o</mi><msub><mi>e</mi><mi>i</mi></msub><mo>=</mo><mi>l</mi><mi>n</mi><mfrac><mrow><msub><mi>p</mi><mrow><mi>y</mi><mi>i</mi></mrow></msub></mrow><mrow><msub><mi>p</mi><mrow><mi>n</mi><mi>i</mi></mrow></msub></mrow></mfrac><mo>=</mo><mi>l</mi><mi>n</mi><mfrac><mrow><msub><mi>p</mi><mrow><mi>y</mi><mn>1</mn></mrow></msub></mrow><mrow><msub><mi>p</mi><mrow><mi>y</mi><mn>0</mn></mrow></msub></mrow></mfrac><mo>=</mo><mi>l</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>B</mi><mi>a</mi><mi>d</mi></mrow></mfrac><mi mathvariant="normal">/</mi><mfrac><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>G</mi><mi>o</mi><mi>o</mi><mi>d</mi></mrow></mfrac><mo>)</mo><mo>=</mo><mi>l</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>B</mi><mi>a</mi><mi>d</mi></mrow></mfrac><mo>)</mo><mo>−</mo><mi>l</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>G</mi><mi>o</mi><mi>o</mi><mi>d</mi></mrow></mfrac><mo>)</mo></mrow><annotation encoding="application/x-tex">woe_i = ln\frac{p_{yi}}{p_{ni}} = ln\frac{p_{y1}}{p_{y0}} = ln(\frac{Bad_i}{Bad}/\frac{Good_i}{Good}) =  ln(\frac{Bad_i}{Bad})-ln(\frac{Good_i}{Good})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.343548em;vertical-align:-0.972108em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.6860000000000002em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.6859999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathrm">0</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mord mathrm">/</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>其中：pyi为坏样本占所有坏样本的比例，py0好样本占所有好样本的比例；</li><li>Bad为坏样本总数，Badi为变量i对应的坏样本个数，Good为好样本总数，Goodi为变量i对应的好样本个数 ；</li><li>将模型目标变量y为1记为违约用户（坏样本），对于目标变量为0记为正常用户（好样本）</li></ul><h2><span id="woe-gong-shi-li-jie"> Woe公式理解</span><a href="#woe-gong-shi-li-jie" class="header-anchor">#</a></h2><p>基础模式</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>o</mi><msub><mi>e</mi><mi>i</mi></msub><mo>=</mo><mi>l</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>B</mi><mi>a</mi><mi>d</mi></mrow></mfrac><mo>)</mo><mo>−</mo><mi>l</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>G</mi><mi>o</mi><mi>o</mi><mi>d</mi></mrow></mfrac><mo>)</mo></mrow><annotation encoding="application/x-tex"> woe_i = ln(\frac{Bad_i}{Bad})-ln(\frac{Good_i}{Good}) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>即 WOE = ln (第i个分箱的坏人数 / 总坏人数) - ln (第i个分箱的好人数 / 总好人数)</li><li>此时可以理解为：<strong>每个分箱里的坏人(响应)分布相对于好人(未响应)分布之间的差异性。</strong></li></ul><p>变换模式</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>o</mi><msub><mi>e</mi><mi>i</mi></msub><mo>=</mo><mi>l</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>i</mi></msub></mrow></mfrac><mo>)</mo><mo>−</mo><mi>l</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>B</mi><mi>a</mi><mi>d</mi></mrow><mrow><mi>G</mi><mi>o</mi><mi>o</mi><mi>d</mi></mrow></mfrac><mo>)</mo></mrow><annotation encoding="application/x-tex">woe_i = ln(\frac{Bad_i}{Good_i})-ln(\frac{Bad}{Good})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord mathit">d</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord mathit">d</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><ul><li>WOE = ln (第i个分箱的坏人数 / 第i个分箱的好人数) - ln (总坏人数 / 总好人数)</li><li>此时可以理解为：<strong>每个分箱里的坏好比(Odds)相对于总体的坏好比之间的差异性。</strong></li></ul><h2><span id="woe-hui-gu"> WOE回顾：</span><a href="#woe-hui-gu" class="header-anchor">#</a></h2><ul><li>当前分组中，<strong>差异越大，响应的比例越大，WOE值越大</strong>；</li><li>反应的是<strong>特征的重要性，woe的绝对值越大，说明越重要。</strong></li><li>当前分组WOE的正负，由当前分组响应和未响应的比例，与样本整体响应和未响应的比例的大小关系决定，<strong>当前分组的比例小于样本整体比例时，WOE为负</strong>，<strong>当前分组的比例大于整体比例时，WOE为正，当前分组的比例和整体比例相等时，WOE为0</strong>。</li><li>WOE的取值范围是<strong>全体实数</strong>。(所以就不方便，需要IV缩放)</li><li>WOE其实描述了变量当前这个分组，对判断个体是否会响应（或者说属于哪个类）所起到影响方向和大小，<strong>当WOE为正时，变量当前取值对判断个体是否会响应起到的正向的影响</strong>，当<strong>WOE为负时，起到了负向影响</strong>。而WOE<strong>值的大小，则是这个影响的大小的体现</strong>。</li><li><strong>做完woe之后，LR系数不再代表特征的重要程度。</strong></li><li><strong>woe后LR的时候要保证系数全都是正数！</strong><ul><li>woe的符号代表特征对模型贡献的方向，系数如果不是正数就会改变这个方向。</li><li>但是做BiVar的时候已经分析了这个woe特征的贡献方向，如果LR再负数会扭曲推翻之前BiVar的分析。</li></ul></li><li>优点：数值型转化为WOE可以<strong>增强鲁棒性</strong>，<strong>屏蔽极值的影响</strong>（极小值和极大值也被分组了）</li><li><strong>但是树模型对极值不敏感，只用处理字符型即可</strong></li></ul><p>note：<strong>如果特征做了WOE，那么LR的系数不能代表特征重要性权重。（WOE绝对值大小已经是特征重要性了，LR的系数仅仅是拟合系数而已）</strong>  woe后**如果是LR的时候要保证系数全都是正数！ **woe的符号代表特征对模型贡献的方向，系数如果不是正数就会改变这个方向。 但是做BiVar的时候已经分析了这个woe特征的贡献方向，如果LR再负数会扭曲推翻之前BiVar的分析。</p><ul><li><p>核心——分箱逻辑：</p></li><li><p>实现WOE最重要的是分箱逻辑，不同的分箱会带来不同的WOE。金融常使用“<strong>基于负样本占比差异最大化</strong>”原则来分箱</p><ul><li>一般是5箱内最好，通常最多不超过10箱</li><li>每一箱的负样本占比差值尽可能大（箱合并原则）</li><li>每一箱的样本量不少于总体5%（不要太小，不要小于三五百个样本）</li><li>通过控制划分后的总箱数，来迭代进行分箱合并</li></ul></li></ul><h1><span id="iv-zhi-ke-yi-ren-wei-shi-woe-de-jia-quan"> IV值：可以认为是WOE的加权</span><a href="#iv-zhi-ke-yi-ren-wei-shi-woe-de-jia-quan" class="header-anchor">#</a></h1><p>某个分箱的IV值：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><msub><mi>V</mi><mi>i</mi></msub><mo>=</mo><mo>(</mo><msub><mi>p</mi><mrow><mi>y</mi><mi>i</mi></mrow></msub><mo>−</mo><msub><mi>p</mi><mrow><mi>n</mi><mi>i</mi></mrow></msub><mo>)</mo><mo>∗</mo><mi>W</mi><mi>O</mi><msub><mi>E</mi><mi>i</mi></msub><mo>=</mo><mo>(</mo><mfrac><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>t</mi></msub></mrow></mfrac><mo>−</mo><mfrac><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>t</mi></msub></mrow></mfrac><mo>)</mo><mo>∗</mo><mi>W</mi><mi>O</mi><msub><mi>E</mi><mi>i</mi></msub><mo>=</mo><mo>(</mo><mfrac><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>t</mi></msub></mrow></mfrac><mo>−</mo><mfrac><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>t</mi></msub></mrow></mfrac><mo>)</mo><mo>∗</mo><mi>l</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>t</mi></msub></mrow></mfrac><mi mathvariant="normal">/</mi><mfrac><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>t</mi></msub></mrow></mfrac><mo>)</mo></mrow><annotation encoding="application/x-tex">IV_i =(p_{yi}-p_{ni}) * WOE_i= (\frac{Bad_i}{Bad_t}-\frac{Good_i}{Good_t}) * WOE_i = (\frac{Bad_i}{Bad_t}-\frac{Good_i}{Good_t}) * ln(\frac{Bad_i}{Bad_t}/\frac{Good_i}{Good_t})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">I</span><span class="mord"><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.22222em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mopen">(</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">t</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">−</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">t</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">t</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mbin">−</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">t</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span><span class="mbin">∗</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">t</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mord mathrm">/</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">t</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><p>有了一个变量各分组的IV值，我们就可以计算<strong>整个变量</strong>的IV值：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>V</mi><mo>=</mo><msubsup><mo>∑</mo><mi>i</mi><mi>n</mi></msubsup><mrow><mi>I</mi><msub><mi>V</mi><mi>i</mi></msub></mrow></mrow><annotation encoding="application/x-tex">IV = \sum_i^n{IV_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.6513970000000002em;"></span><span class="strut bottom" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">I</span><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="mrel">=</span><span class="mop op-limits"><span class="vlist"><span style="top:1.1776689999999999em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span style="top:-0.000005000000000143778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span style="top:-1.2500050000000003em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.07847em;">I</span><span class="mord"><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.22222em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></span></p><p>n是分箱的数量</p><ul><li>对于变量的一个分组，这个分组的响应和未响应的比例与样本整体响应和未响应的比例相差越大，IV值越大，否则，IV值越小；</li><li>极端情况下，当前分组的响应和未响应的比例和样本整体的响应和未响应的比例相等时，IV值为0；</li><li>IV值的取值范围是[0,+∞) ，且，当当前分组中只包含响应客户或者未响应客户时，IV = +∞。</li><li>故可以计算多个特征的IV值，按照从大到小排序来决定采用哪些特征更容易响应。（类似信息增益或者基尼指数的感觉）</li><li>IV比如<strong>要大于0.05才比较好用</strong></li><li>谨慎的时候会要求<strong>IV大于0.02就可以先留着，也就是说IV在0.02-0.5之间</strong></li><li>超过<strong>0.5的特征会被直接拿去作为策略-------------&gt;IV太大的值可能会把模型其他特征的信息覆盖掉，也可能会造成过拟合。（如果这个特征以后抖动，造成线上效果波动）</strong></li></ul><h1><span id="ji-suan-woe-he-iv-de-bu-zou"> 计算woe和IV的步骤</span><a href="#ji-suan-woe-he-iv-de-bu-zou" class="header-anchor">#</a></h1><ul><li>step 1. 对于连续型变量，进行分箱（binning），可以选择<strong>等频、等距，或者自定义间隔</strong>；对于离散型变量，如果分箱太多，则进行分箱合并。</li><li>step 2. 统计每个分箱里的<strong>好人数(bin_goods)和坏人数(bin_bads)</strong>。</li><li>step 3. 分别除以总的好人数(total_goods)和坏人数(total_bads)，得到每个分箱内的边际好人占比(margin_good_rate)和边际坏人占比(margin_bad_rate)。</li><li>step 4. 计算每个分箱里的WOE [公式]</li><li>step 5. 检查每个分箱（除null分箱外）里woe值是否满足单调性（bivar），若不满足，返回step1。注意⚠️：null分箱由于有明确的业务解释，因此不需要考虑满足单调性。</li><li>step 6. 计算每个分箱里的IV，最终求和，即得到最终的IV。<br>备注：好人 = 正常用户，坏人 = 逾期用户</li></ul><h2><span id="ji-suan-zhu-yi-dian"> 计算注意点</span><a href="#ji-suan-zhu-yi-dian" class="header-anchor">#</a></h2><ul><li><p>分箱时需要注意样本量充足，保证统计意义。</p></li><li><p>若相邻分箱的WOE值相同(非常相近)，则将其合并为一个分箱。</p></li><li><p>当一个分箱内只有好人或坏人时（会出现∞），可对WOE公式进行修正如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mi>o</mi><msub><mi>e</mi><mi>i</mi></msub><mo>=</mo><mi>l</mi><mi>n</mi><mo>(</mo><mfrac><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>i</mi></msub><mo>+</mo><mn>0</mn><mi mathvariant="normal">.</mi><mn>5</mn></mrow><mrow><mi>B</mi><mi>a</mi><msub><mi>d</mi><mi>t</mi></msub><mo>+</mo><mn>0</mn><mi mathvariant="normal">.</mi><mn>5</mn></mrow></mfrac><mi mathvariant="normal">/</mi><mfrac><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>i</mi></msub></mrow><mrow><mi>G</mi><mi>o</mi><mi>o</mi><msub><mi>d</mi><mi>t</mi></msub></mrow></mfrac><mo>)</mo></mrow><annotation encoding="application/x-tex">Woe_i = ln(\frac{Bad_i+0.5}{Bad_t+0.5}/\frac{Good_i}{Good_t})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.37144em;"></span><span class="strut bottom" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">e</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">t</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">0</span><span class="mord mathrm">.</span><span class="mord mathrm">5</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mord mathit">a</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathrm">0</span><span class="mord mathrm">.</span><span class="mord mathrm">5</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mord mathrm">/</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">t</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit">G</span><span class="mord mathit">o</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit">d</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p></li><li><p>在实践中，我们还需<strong>跨数据集检验WOE分箱的单调性</strong>。如果在<strong>训练集上保持单调，但在验证集和测试集上发生翻转而不单调</strong>，那么说明分箱并不合理，需要再次调整。（BIVAR）</p></li><li><p>或者当分箱中只有好人或坏人的时候，也可以这么做：</p><ul><li>如果可能，直接把这个分组做成一个规则，作为模型的前置条件或补充条件；（即不允许这种分箱存在）</li><li>重新对变量进行离散化或分组，使每个分组的响应比例都不为0且不为100%，尤其是当一个分组个体数很小时（比如小于100个），强烈建议这样做，因为本身把一个分组个体数弄得很小就不是太合理。</li><li>如果上面两种方法都无法使用，建议人工把该分组的响应数和非响应的数量进行一定的调整。如果响应数原本为0，可以人工调整响应数为1，如果非响应数原本为0，可以人工调整非响应数为1.（或者按照上面进行修正，分子分母都加0.5）</li></ul></li></ul><h1><span id="woe-he-iv-de-bi-jiao-wei-shi-me-bu-yong-woe-er-shi-yong-iv-zhi"> WOE和IV的比较----为什么不用WOE，而是用IV值</span><a href="#woe-he-iv-de-bi-jiao-wei-shi-me-bu-yong-woe-er-shi-yong-iv-zhi" class="header-anchor">#</a></h1><p>变量各分组的WOE和IV都隐含着这个分组对目标变量的预测能力这样的意义，但是有以下问题：<br><strong>1. 各个组的WOE有正有负</strong></p><p>解释：</p><ul><li>假设构造一个$ WOE=\sum_i^n{WOE_i} ，那么因为里面的WOE_i$有正有负，所以求和不好表征。</li></ul><p><strong>2.每个组的WOE没有考虑到这个各个组在总体的占比</strong><br>解释：</p><ul><li>即使构造一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mi>O</mi><mi>E</mi><mo>=</mo><msubsup><mo>∑</mo><mi>i</mi><mi>n</mi></msubsup><mrow><mi mathvariant="normal">∣</mi><mi>W</mi><mi>O</mi><msub><mi>E</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi></mrow></mrow><annotation encoding="application/x-tex">WOE=\sum_i^n{|WOE_i|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.0500099999999999em;vertical-align:-0.30001em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="mrel">=</span><span class="mop"><span class="op-symbol small-op mop" style="top:-0.0000050000000000050004em;">∑</span><span class="vlist"><span style="top:0.30001em;margin-left:0em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span style="top:-0.364em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord textstyle uncramped"><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathrm">∣</span></span></span></span></span>规避上面的负数问题，但是每个组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mi>O</mi><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">WOE_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>的信息含量（泛化能力？）是不相同的，比如某个组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mi>O</mi><msub><mi>E</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">WOE_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">i</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>很高但是这个组只有很少的样本，把他直接和另外一个很多样本但很低的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>W</mi><mi>O</mi><msub><mi>E</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">WOE_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">W</span><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">E</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.05764em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit" style="margin-right:0.05724em;">j</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>相加是很不合适的。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200522143533847.png" alt="image-20200522143533847"></p><p>假设某特征A分两组，从这个表我们可以看到，变量取1时，响应比达到90%，对应的<strong>WOE很高，但对应的IV却很低</strong>，原因就在于IV在WOE的前面乘以了一个系数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>p</mi><mrow><mi>y</mi><mi>i</mi></mrow></msub><mo>−</mo><msub><mi>p</mi><mrow><mi>n</mi><mi>i</mi></mrow></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(p_{yi}-p_{ni})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="base textstyle uncramped"><span class="mopen">(</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">y</span><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">−</span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span><span class="mord mathit">i</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mclose">)</span></span></span></span></p><ul><li>而这个系数很好的考虑了这个分组中样本占整体样本的比例，比例越低，这个分组对变量整体预测能力的贡献越低。</li><li>相反，如果直接用WOE的绝对值加和，会得到一个很高的指标，这是不合理的。</li></ul><h1><span id="tong-yong-woe-ji-suan-shi-xian"> 通用WOE计算实现</span><a href="#tong-yong-woe-ji-suan-shi-xian" class="header-anchor">#</a></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pandas.core.dtypes <span class="keyword">import</span> dtypes</span><br><span class="line"><span class="keyword">from</span> pandas.core.dtypes.common <span class="keyword">import</span> is_numeric_dtype</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义实现的离散型变量woe</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">charWoe</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, datases: dict, dep, weight, vars: list)</span>:</span></span><br><span class="line">        <span class="comment"># 数据字典&#123;'dev':xxx,'val':xxx,'off':xxx&#125;  训练集，测试集，时间外样本集  3个dataframe</span></span><br><span class="line">        self.datases = datases</span><br><span class="line">        self.devf = datases.get(<span class="string">'dev'</span>, <span class="string">''</span>)</span><br><span class="line">        self.valf = datases.get(<span class="string">'val'</span>, <span class="string">''</span>)</span><br><span class="line">        self.offf = datases.get(<span class="string">'off'</span>, <span class="string">''</span>)</span><br><span class="line">        self.dep = dep  <span class="comment"># 标签</span></span><br><span class="line">        self.weight = weight  <span class="comment"># 样本权重</span></span><br><span class="line">        self.vars = vars  <span class="comment"># 特征名</span></span><br><span class="line">        self.nrows, self.ncols = self.devf.shape <span class="comment"># 样本数，特征数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char_woe</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 得到每一类样本的个数，且加入平滑项是的bad和good都不为0</span></span><br><span class="line">        dic = dict(self.devf.groupby(self.dep).size())  <span class="comment"># 根据标签去group，变成&#123;1:xxx,0:yyy&#125;字典</span></span><br><span class="line">        good = dic.get(<span class="number">0</span>, <span class="number">0</span>) + <span class="number">1e-10</span> <span class="comment"># 平滑防止组内为0，计算失败</span></span><br><span class="line">        bad = dic.get(<span class="number">1</span>, <span class="number">0</span>) + <span class="number">1e-10</span></span><br><span class="line">        <span class="comment"># 对每一个特征进行处理</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> self.vars:</span><br><span class="line">            <span class="comment"># df[[sex,bad]].groupby(['sex','bad']).size() 会得到一个series，</span></span><br><span class="line">            <span class="comment"># 直接转成字典：&#123;(男, 0): 10553, (男, 1): 518, (女, 0): 233, (女, 1): 3&#125;</span></span><br><span class="line">            <span class="comment"># key的第一个代表特征值，第二个代表标签值</span></span><br><span class="line">            data = dict(self.devf[[col, self.dep]].groupby([col, self.dep]).size())</span><br><span class="line">            <span class="string">'''</span></span><br><span class="line"><span class="string">            特征值+分类组合超过100的时候，跳过当前取值</span></span><br><span class="line"><span class="string">            假设二分类，dep是0,、1，则这个特征只能有50个特征值</span></span><br><span class="line"><span class="string">            &#123;(col特征值A,0):25,(col特征值A,1):10,(col特征值B,0):33,(col特征值B,1):21...&#125;</span></span><br><span class="line"><span class="string">            因为特征值过多时，WOE分箱效率低，建议进行特征截断</span></span><br><span class="line"><span class="string">            出现频率过低的特征就统一赋值，放到同一个箱里</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">            <span class="keyword">if</span> len(data) &gt; <span class="number">100</span>:</span><br><span class="line">                print(col, <span class="string">'有太多的特征值，建议手动进行特征截断，即将跳过此特征...'</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 打印特征取取值个数</span></span><br><span class="line">            print(<span class="string">'特征【%s】的取值个数是【%d】'</span> % (col, len(data)))</span><br><span class="line">            dic = dict()</span><br><span class="line">            <span class="comment"># &#123;(男, 0): 10553, (男, 1): 518, (女, 0): 233, (女, 1): 3&#125;</span></span><br><span class="line">            <span class="comment"># key的第一个代表特征值，第二个代表标签值</span></span><br><span class="line">            <span class="keyword">for</span> (k, v) <span class="keyword">in</span> data.items():</span><br><span class="line">                fea_value, dp = k  <span class="comment"># 拿出key中的特征值和标签(fea_value=男，dp=0，v=10553)</span></span><br><span class="line">                dic.setdefault(fea_value, &#123;&#125;)  <span class="comment"># 给对应key设置为一个空字典（如果没有找到的话，找到的话说明之前已经设置过了）</span></span><br><span class="line">                <span class="comment">#&#123;(男, 0): 10553, (男, 1): 518&#125; ==&gt; &#123;男:&#123;1 = 518，0 = 10553&#125; , 女:&#123;...&#125; &#125;</span></span><br><span class="line">                dic[fea_value][int(dp)] = v  <span class="comment"># 字典中嵌套字典</span></span><br><span class="line">            <span class="keyword">for</span>(k, v) <span class="keyword">in</span> dic.items():  <span class="comment"># 计算cnt和badrate</span></span><br><span class="line">                <span class="comment"># 循环上面的嵌套字典，k=男，v=&#123;1 = xxx，0 = yyy&#125;。</span></span><br><span class="line">                <span class="comment"># 拿出内部嵌套的字典k1 = 1 v1=xxx,生成---&gt;：&#123;‘男’：&#123; '0': 10553, '1': 518&#125;&#125;</span></span><br><span class="line">                dic[k] = &#123;str(int(k1)):v1 <span class="keyword">for</span> (k1, v1) <span class="keyword">in</span> v.items()&#125;</span><br><span class="line">                <span class="comment"># 所有正负样本的和v.values():  [10553,518]</span></span><br><span class="line">                dic[k][<span class="string">'cnt'</span>] = sum(v.values())</span><br><span class="line">                <span class="comment"># 4舍5入求bad_rate</span></span><br><span class="line">                bad_rate = round(v.get(<span class="number">1</span>,<span class="number">0</span>)/dic[k][<span class="string">'cnt'</span>], <span class="number">5</span>)</span><br><span class="line">                dic[k][<span class="string">"bad_rate"</span>] = bad_rate</span><br><span class="line">            <span class="comment"># 利用定义的函数进行合并分箱。  dic=&#123;'男': &#123;'cnt': xxx, '0': yy, '1': zz, 'bad_rate': 0.xx&#125;, 'B': &#123;'cnt': xxx, '0': yyy, '1': zz, 'bad_rate': 0.zz&#125;&#125;</span></span><br><span class="line">            dic = self.combine_box_char(dic)</span><br><span class="line">            <span class="comment"># 对每个特征计算WOE和IV值</span></span><br><span class="line">            <span class="keyword">for</span> (k,v) <span class="keyword">in</span> dic.items():</span><br><span class="line">                a = v.get(<span class="string">'0'</span>, <span class="number">1</span>) / good+<span class="number">1e-10</span></span><br><span class="line">                b = v.get(<span class="string">'1'</span>, <span class="number">1</span>) / bad+<span class="number">1e-10</span></span><br><span class="line">                dic[k][<span class="string">'Good'</span>] = v.get(<span class="string">'0'</span>,<span class="number">0</span>)</span><br><span class="line">                dic[k][<span class="string">'Bad'</span>] = v.get(<span class="string">'1'</span>,<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># 下面两个是 a/b 还是 b/a？ 按照定义应该是ln(pi/pn) = ln(p_bad/p_good)?</span></span><br><span class="line">                dic[k][<span class="string">'woe'</span>] = round(math.log(b/a),<span class="number">5</span>)</span><br><span class="line">                dic[k][<span class="string">'iv'</span>] = round((b-a)*dic[k][<span class="string">'woe'</span>],<span class="number">5</span>)</span><br><span class="line">            <span class="string">''' </span></span><br><span class="line"><span class="string">            按照分箱后的点进行分割， </span></span><br><span class="line"><span class="string">            计算得到每一个特征值的WOE值， </span></span><br><span class="line"><span class="string">            将原始特征名加上'_woe'后缀，并赋予WOE值。 </span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">            <span class="keyword">for</span> (klis, v) <span class="keyword">in</span> dic.items():</span><br><span class="line">                <span class="comment"># 把分箱合并后的key切开</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> str(klis).split(<span class="string">','</span>):</span><br><span class="line">                    <span class="comment"># 数字类型处理一下</span></span><br><span class="line">                    <span class="keyword">if</span> is_numeric_dtype(self.devf[col]):</span><br><span class="line">                        k = float(k) <span class="keyword">if</span> <span class="string">'.'</span> <span class="keyword">in</span> k <span class="keyword">else</span> int(k)</span><br><span class="line">                    <span class="comment"># 训练集进行替换</span></span><br><span class="line">                    self.devf.loc[self.devf[col] == k, <span class="string">"%s_woe"</span> % col] = v[<span class="string">"woe"</span>]</span><br><span class="line">                    self.devf.loc[self.devf[col] == k, <span class="string">"%s_iv"</span> % col] = v[<span class="string">"iv"</span>]</span><br><span class="line">                    <span class="comment"># 测试集进行替换</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(self.valf, str):</span><br><span class="line">                        self.valf.loc[self.valf[col] == k,<span class="string">"%s_woe"</span> % col] = v[<span class="string">"woe"</span>]</span><br><span class="line">                        self.valf.loc[self.valf[col] == k, <span class="string">"%s_iv"</span> % col] = v[<span class="string">"iv"</span>]</span><br><span class="line">                    <span class="comment"># 跨时间验证集进行替换</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(self.offf, str):</span><br><span class="line">                        self.offf.loc[self.offf[col] == k,<span class="string">"%s_woe"</span> % col] = v[<span class="string">"woe"</span>]</span><br><span class="line">                        self.offf.loc[self.offf[col] == k, <span class="string">"%s_iv"</span> % col] = v[<span class="string">"iv"</span>]</span><br><span class="line">        <span class="comment"># 返回新的字典，其中包含三个数据集。</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"dev"</span>: self.devf, <span class="string">"val"</span>: self.valf, <span class="string">"off"</span>: self.offf&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine_box_char</span><span class="params">(self, dic)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        实施两种分箱策略（规则）：</span></span><br><span class="line"><span class="string">        1.不同箱之间负样本占比(bad_rate)差异最大化。----各个特征值按照badrate从小到大排序，分别用后面一个减去前面每一个，计算badrate差值。找到差值最小的两箱合并之</span></span><br><span class="line"><span class="string">        2.每一箱的样本量不能过少。----当有某箱样本小于总样本的0.05，或总箱数&gt;5的时候，还是按照badrate差异最大化原则：按badrate排序后，把最小的一箱和前后比较，与差值较小的一箱合并</span></span><br><span class="line"><span class="string">        :param dic: 等待分箱的数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 首先合并至10箱以内。按照每一箱负样本占比差异最大化原则进行分箱。----各个特征值按照badrate从小到大排序，分别用后面一个减去前面每一个，计算badrate差值。找到差值最小的两箱合并之</span></span><br><span class="line">        <span class="keyword">while</span> len(dic) &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="comment"># 拿出所有的特征和badrate，k是特征值，v['bad_rate']是负样本占比</span></span><br><span class="line">            bad_rate_dic = &#123;k:v[<span class="string">'bad_rate'</span>] <span class="keyword">for</span> (k,v) <span class="keyword">in</span> dic.items()&#125;</span><br><span class="line">            <span class="comment"># 按照负样本占比排序。因为离散型变量是无序的（比如学历、渠道类型）</span></span><br><span class="line">            <span class="comment"># 可以直接写成负样本占比递增的形式。(所有的dict按照value升序排序)</span></span><br><span class="line">            <span class="comment"># 得到一堆tuple的list，是(特征值，bad_rate)的一个list</span></span><br><span class="line">            bad_rate_sorted = sorted(bad_rate_dic.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">            <span class="comment"># 计算每两箱之间的负样本占比差值。</span></span><br><span class="line">            bad_rate_diff = [bad_rate_sorted[i + <span class="number">1</span>][<span class="number">1</span>] - bad_rate_sorted[i][<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(bad_rate_sorted) - <span class="number">1</span>)]</span><br><span class="line">            <span class="comment"># 找到差值最小的那个，准备将其进行合并。</span></span><br><span class="line">            min_diff_index = bad_rate_diff.index(min(bad_rate_diff))</span><br><span class="line">            <span class="comment"># 找到k1和k2，即差值最小的两箱的key.</span></span><br><span class="line">            k1, k2 = bad_rate_sorted[min_diff_index][<span class="number">0</span>], bad_rate_sorted[min_diff_index + <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># 得到重新划分后的字典，箱的个数比之前少一  直接改了dic，给他里面插入一个新的分箱。key是两个key的组合！</span></span><br><span class="line">            dic[<span class="string">"%s,%s"</span> % (k1, k2)] = dict()</span><br><span class="line">            <span class="comment"># 重新统计新箱的正负样本数（合并两个key的）</span></span><br><span class="line">            dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"0"</span>] = dic[k1].get(<span class="string">"0"</span>, <span class="number">0</span>) + dic[k2].get(<span class="string">"0"</span>, <span class="number">0</span>)</span><br><span class="line">            dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"1"</span>] = dic[k1].get(<span class="string">"1"</span>, <span class="number">0</span>) + dic[k2].get(<span class="string">"1"</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 重新统计新箱的cnt</span></span><br><span class="line">            dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"cnt"</span>] = dic[k1][<span class="string">"cnt"</span>] + dic[k2][<span class="string">"cnt"</span>]</span><br><span class="line">            <span class="comment"># 重新计算新分箱的bad_rate</span></span><br><span class="line">            dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"bad_rate"</span>] = round(dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"1"</span>] / dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"cnt"</span>],<span class="number">5</span>)</span><br><span class="line">            <span class="comment"># 删除之前两个老的分箱</span></span><br><span class="line">            <span class="keyword">del</span> dic[k1], dic[k2]</span><br><span class="line">        <span class="string">''' </span></span><br><span class="line"><span class="string">        结束循环后，箱的个数应该少于10。 </span></span><br><span class="line"><span class="string">        下面实施第二种分箱策略规则：每个分箱的样本不能太少！ </span></span><br><span class="line"><span class="string">        将样本数量少的箱合并至其他箱中，以保证每一箱的样本数量不要太少。 </span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="comment"># 找出最少样本数的分箱</span></span><br><span class="line">        min_cnt = min([v[<span class="string">'cnt'</span>] <span class="keyword">for</span> (k, v) <span class="keyword">in</span> dic.items()])</span><br><span class="line">        <span class="comment"># 当样本数量小于总样本的5%或者总箱的个数大于5的时候，对箱进行合并  【这里的5% 和 5是经验值】</span></span><br><span class="line">        <span class="keyword">while</span> min_cnt &lt; self.nrows*<span class="number">0.05</span> <span class="keyword">or</span> len(dic) &gt; <span class="number">5</span>:</span><br><span class="line">            <span class="comment"># 可能找到多个符合min_cnt的list，取第一个</span></span><br><span class="line">            min_key = [k <span class="keyword">for</span> (k,v) <span class="keyword">in</span> dic.items() <span class="keyword">if</span> v[<span class="string">'cnt'</span>] == min_cnt][<span class="number">0</span>]</span><br><span class="line">            bad_rate_dic = &#123;k:v[<span class="string">'bad_rate'</span>] <span class="keyword">for</span> (k,v) <span class="keyword">in</span> dic.items()&#125;</span><br><span class="line">            <span class="comment"># 根据bad_rate升序</span></span><br><span class="line">            bad_rate_sorted = sorted(bad_rate_dic.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])</span><br><span class="line">            keys = [item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> bad_rate_sorted]</span><br><span class="line">            min_key_index = keys.index(min_key)</span><br><span class="line">            <span class="string">'''</span></span><br><span class="line"><span class="string">            不能直接把样本数最小的两个分箱合并，因为</span></span><br><span class="line"><span class="string">            同样想保持合并后箱之间的负样本占比差异最大化。 </span></span><br><span class="line"><span class="string">            由于箱的位置不同，按照三种不同情况进行分类讨论。 </span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">            <span class="comment"># 如果是第一箱、第二箱</span></span><br><span class="line">            <span class="keyword">if</span> min_key_index == <span class="number">0</span>:</span><br><span class="line">                k1,k2 = keys[:<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">elif</span> min_key_index == len(keys)<span class="number">-1</span>:</span><br><span class="line">                <span class="comment"># 如果是最后一箱，和倒数第二箱合并</span></span><br><span class="line">                k1,k2 = keys[<span class="number">-2</span>:]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果是中间箱，前后相比和bad_rate值相差最小的箱合并</span></span><br><span class="line">                <span class="comment"># 和前面的比</span></span><br><span class="line">                bef_bad_rate = dic[min_key][<span class="string">'bad_rate'</span>] - dic[keys[min_key_index<span class="number">-1</span>]][<span class="string">'bad_rate'</span>]</span><br><span class="line">                <span class="comment"># 后面的当前比（keys是按照bad_rate升序的，不减出负数）</span></span><br><span class="line">                aft_bad_rate = dic[keys[min_key_index+<span class="number">1</span>]][<span class="string">'bad_rate'</span>] - dic[min_key][<span class="string">'bad_rate'</span>]</span><br><span class="line">                <span class="keyword">if</span> bef_bad_rate &lt;= aft_bad_rate:</span><br><span class="line">                    k1,k2 = keys[min_key_index<span class="number">-1</span>], min_key</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    k1,k2 = min_key, keys[min_key_index+<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 找到k1，k2后合并之，同上</span></span><br><span class="line">            <span class="comment"># 新增一个合并后的分箱</span></span><br><span class="line">            dic[<span class="string">"%s,%s"</span> % (k1, k2)] = dict()</span><br><span class="line">            <span class="comment"># 重新计算cnt，bad_rate，正负样本数</span></span><br><span class="line">            dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"0"</span>] = dic[k1].get(<span class="string">"0"</span>, <span class="number">0</span>) + dic[k2].get(<span class="string">"0"</span>, <span class="number">0</span>)</span><br><span class="line">            dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"1"</span>] = dic[k1].get(<span class="string">"1"</span>, <span class="number">0</span>) + dic[k2].get(<span class="string">"1"</span>, <span class="number">0</span>)</span><br><span class="line">            dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"cnt"</span>] = dic[k1][<span class="string">"cnt"</span>] + dic[k2][<span class="string">"cnt"</span>]</span><br><span class="line">            dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"bad_rate"</span>] = round(dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"1"</span>] /dic[<span class="string">"%s,%s"</span> % (k1, k2)][<span class="string">"cnt"</span>], <span class="number">5</span>)</span><br><span class="line">            <span class="comment"># 删除旧的分箱</span></span><br><span class="line">            <span class="keyword">del</span> dic[k1], dic[k2]</span><br><span class="line">            <span class="comment"># 重新计算当前最小的箱的样本个数，进入下次循环继续合并分箱</span></span><br><span class="line">            min_cnt = min([v[<span class="string">"cnt"</span>] <span class="keyword">for</span> v <span class="keyword">in</span> dic.values()])</span><br><span class="line">        <span class="keyword">return</span> dic</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#woe-weight-of-evidence-zheng-ju-quan-chong&quot;&gt;WOE(Weight of Evidence) 证据权重&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="risk" scheme="https://blog.sofunnyai.com/categories/risk/"/>
    
    
      <category term="评分卡" scheme="https://blog.sofunnyai.com/tags/%E8%AF%84%E5%88%86%E5%8D%A1/"/>
    
      <category term="特征工程" scheme="https://blog.sofunnyai.com/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>模型评价指标KS和PSI</title>
    <link href="https://blog.sofunnyai.com/article/ks_psi.html"/>
    <id>https://blog.sofunnyai.com/article/ks_psi.html</id>
    <published>2018-01-12T05:21:10.000Z</published>
    <updated>2020-05-25T11:57:12.481Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#gai-shu">概述</a></li><li><a href="#roc-qu-xian">ROC曲线</a><ul><li><a href="#hui-gu-hun-yao-ju-zhen-de-tpr-true-positive-rate-he-fpr-false-positive-rate">回顾混淆矩阵的TPR(True Positive Rate)和FPR(False Positive Rate)</a></li><li><a href="#roc-qu-xian-1">ROC曲线</a></li><li><a href="#roc-qu-xian-li-jie">ROC曲线理解</a></li></ul></li><li><a href="#ks-zhi-biao">KS指标</a><ul><li><a href="#ks-zhi-ding-yi">KS值定义</a></li><li><a href="#mo-xing-de-ks-zhi">模型的KS值</a></li><li><a href="#ks-kolmogorov-smirnov-ji-suan-bu-zou">KS(Kolmogorov-Smirnov)计算步骤：</a></li><li><a href="#ks-he-roc-de-qu-bie">KS和ROC的区别</a><ul><li><a href="#mo-xing-ping-jie-shi">模型评价时:</a></li></ul></li></ul></li><li><a href="#psi-qun-ti-wen-ding-xing-zhi-biao">PSI群体稳定性指标</a><ul><li><a href="#psi-population-stability-index-de-ding-yi">PSI(Population Stability Index)的定义</a></li><li><a href="#ji-suan-ju-li">计算举例：</a></li><li><a href="#toad-di-ceng-de-psi-shi-xian">toad底层的PSI实现</a></li></ul></li><li><a href="#gini-zhi-shu">Gini指数</a></li><li><a href="#bu-huo-lu-capture-rate">捕获率capture rate</a><ul><li><a href="#jian-shao-guo-ni-he-fang-fa">减少过拟合方法：</a></li></ul></li></ul><!-- tocstop --></div><!--下面是latex渲染框架katex样式所需的css，不使用latex的话可以删掉--><link href="https://cdn.bootcss.com/KaTeX/0.7.1/katex.min.css" rel="stylesheet"><h1><span id="gai-shu"> 概述</span><a href="#gai-shu" class="header-anchor">#</a></h1><p>风控指标千千万，三句话概括版本：</p><p>Confusion Matrix -&gt; Lift，Gain，ROC。</p><p>ROC -&gt; AUC，KS -&gt; GINI。</p><p>MSE独立出来。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525172747965.png" alt="image-20200525172747965"></p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525172805312.png" alt="image-20200525172805312"></p><h1><span id="roc-qu-xian"> ROC曲线</span><a href="#roc-qu-xian" class="header-anchor">#</a></h1><h2><span id="hui-gu-hun-yao-ju-zhen-de-tpr-true-positive-rate-he-fpr-false-positive-rate"> 回顾混淆矩阵的TPR(True Positive Rate)和FPR(False Positive Rate)</span><a href="#hui-gu-hun-yao-ju-zhen-de-tpr-true-positive-rate-he-fpr-false-positive-rate" class="header-anchor">#</a></h2><p>混淆矩阵，横着的P、N是预测结果阳性还是阴性。竖着的是说预测是否正确。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Positive</th><th style="text-align:center">Negtive</th></tr></thead><tbody><tr><td style="text-align:center">T</td><td style="text-align:center">TP</td><td style="text-align:center">TN</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">FP</td><td style="text-align:center">FN</td></tr></tbody></table><ul><li><p>TP：预测为正向（P），实际上预测正确（T），即判断为正向的正确率</p></li><li><p>TN：预测为负向（N），实际上预测正确（T），即判断为负向的正确率</p></li><li><p>FP：预测为正向（P），实际上预测错误（F），误报率，即把负向判断成了正向</p></li><li><p>FN：预测为负向（N），实际上预测错误（F），漏报率，即把正向判断称了负向</p></li><li><p>准确率Accuracy=（TP+TN） / （TP+FP+TN+FN）， 即<strong>预测正确</strong>的比上<strong>全部的数据</strong></p></li><li><p>精确率、查准率 Precision=TP / （TP+FP），即在<strong>预测为正向的数据中</strong>，有<strong>多少预测正确</strong>了</p></li><li><p>召回率、查全率 Recall=TP / （TP+FN），即在<strong>所有正向</strong>的数据中，有<strong>多少预测出来</strong>了</p></li></ul><p>TPR：在所有实际为阳性的样本中，被正确地判断为阳性之比率。(就是召回率，正样本被召回的比例)<br>【金融里面，分母是所有的good_cnt】</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>e</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>l</mi><mo>=</mo><mi>T</mi><mi>P</mi><mi>R</mi><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">Recall = TPR = \frac{TP}{TP+FN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.36033em;"></span><span class="strut bottom" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mord mathit">e</span><span class="mord mathit">c</span><span class="mord mathit">a</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mrel">=</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mord mathit" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mord mathit" style="margin-right:0.13889em;">P</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p><p>FPR：在所有实际为阴性的样本中，被错误地判断为阳性之比率。（就是漏掉的阴性或判断错的阳性，占总阴性的比例)<br>【金融里面，分母是所有的bad_cnt】</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi>P</mi><mi>R</mi><mo>=</mo><mfrac><mrow><mi>F</mi><mi>P</mi></mrow><mrow><mi>F</mi><mi>P</mi><mo>+</mo><mi>T</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">FPR = \frac{FP}{FP + TN}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.36033em;"></span><span class="strut bottom" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mrel">=</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mbin">+</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mord mathit" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mord mathit" style="margin-right:0.13889em;">P</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p><blockquote><p>更多关于TPR： /02_ml/01_THEORY/00_theory.ipynb#TPR(True-Positive-Rate)</p></blockquote><h2><span id="roc-qu-xian"> ROC曲线</span><a href="#roc-qu-xian" class="header-anchor">#</a></h2><p>在一个二分类模型中，假设采用逻辑回归分类器，其给出针对每个实例为正类的概率，那么通过设定一个阈值如0.6，概率大于等于0.6的为正类，小于0.6的为负类。对应的就可以算出一组(FPR,TPR)，在平面中得到对应坐标点。随着阈值的逐渐减小，越来越多的实例被划分为正类，但是这些正类中同样也掺杂着真正的负实例，即TPR和FPR会同时增大。阈值最大时，对应坐标点为(0,0)，阈值最小时，对应坐标点(1,1)。</p><p>如下面这幅图，(a)图中实线为ROC曲线，线上每个点对应一个阈值。纵坐标TPR，横坐标FPR。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525174307499.png" alt="image-20200525174307499"></p><p>(a) 理想情况下，TPR应该接近1，FPR应该接近0。ROC曲线上的每一个点对应于一个threshold，对于一个分类器，每个threshold下会有一个TPR和FPR。比如Threshold最大时，TP=FP=0，对应于原点；Threshold最小时，TN=FN=1，对应于右上角的点(1,1)。<br>(b) P和N得分不作为特征间距离d的一个函数，随着阈值theta增加，TP和FP都增加。</p><ul><li>横轴FPR：1-TNR，1-Specificity，FPR越大，预测正类中实际负类越多。</li><li>纵轴TPR：Sensitivity(正类覆盖率)，TPR越大，预测正类中实际正类越多。</li><li>理想目标：TPR=1，FPR=0，即图中(0,1)点，故ROC曲线越靠拢(0,1)点，越偏离45度对角线越好，Sensitivity、Specificity越大效果越好。</li></ul><h2><span id="roc-qu-xian-li-jie"> ROC曲线理解</span><a href="#roc-qu-xian-li-jie" class="header-anchor">#</a></h2><p><strong>主要是关于阈值的理解</strong><br>roc_curve里面有一个阈值数组，里面的原理：</p><ul><li>先按照概率值逆序排序</li><li>计算排序后所有前后之间的概率差</li><li>得到的差值数组里面有很多为0的（排序后前后概率相同），丢掉</li><li>源码里还根据二阶导数判断拐点</li><li>剩下的作为阈值数组</li><li>以上面的阈值数组下标为界，数所有label为1,0的样本【累计值】(cumsum)为tps和fps数组（有权加权）</li><li>数组tps除以最后一个tps[-1]得到tpr，fpr同理。（这里并没有判断概率值是否大于或者小于0.5，因为排序后此处这个概率值就是阈值，概率值大于这个阈值的里面，所有的+就是TP，所有的-就是FP。对应tps[i]和fps[i]）</li><li>这样计算出来的tpr 、fpr数组比原始样本数少很多（因为阈值的原因），具体理解如下</li></ul><p>如果大家对二值分类模型熟悉的话，都会知道其输出一般都是预测样本为正例的概率，而事实上，ROC曲线正是通过不断移动分类器的“阈值”来生成曲线上的一组关键点的。可能这样讲有点抽象，还是举刚才雷达兵的例子。每一个雷达兵用的都是同一台雷达返回的结果，但是每一个雷达兵内心对其属于敌军轰炸机的判断是不一样的，可能1号兵解析后认为结果大于0.9，就是轰炸机，2号兵解析后认为结果大于0.85，就是轰炸机，依次类推，每一个雷达兵内心都有自己的一个判断标准（也即对应分类器的不同“阈值”），这样针对每一个雷达兵（样本输出），都能计算出一个ROC曲线上的关键点（一组FPR,TPR值），把大家的点连起来，也就是最早的ROC曲线了。</p><p>为方便大家进一步理解，本菇也在网上找到了一个示例跟大家一起分享【4】。下图是一个二分模型真实的输出结果，一共有20个样本，输出的概率就是模型判定其为正例的概率，第二列是样本的真实标签。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525195550264.png" alt="image-20200525195550264"></p><ul><li>现在我们<strong>指定一个阈值为0.9，那么只有第一个样本（0.9）会被归类为正例，而其他所有样本都会被归为负例</strong></li><li>因此，对于0.9这个阈值，我们可以计算出FPR为0，TPR为0.1（因为总共10个正样本，预测正确的个数为1），那么我们就知道曲线上必有一个点为(0, 0.1)。</li><li>依次选择不同的阈值（或称为“截断点”），画出全部的关键点以后，再连接关键点即可最终得到ROC曲线如下图所示。</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525195618707.png" alt="image-20200525195618707"></p><h4><span id="sklearn-zhong-de-hui-zhi-yuan-li-solveks-he-roc-curve-dai-ma-zhong"> <strong>sklearn中的绘制原理：</strong>（SolveKS和roc_curve代码中）</span><a href="#sklearn-zhong-de-hui-zhi-yuan-li-solveks-he-roc-curve-dai-ma-zhong" class="header-anchor">#</a></h4><p>其实还有一种更直观的绘制ROC曲线的方法，这边简单提一下。：</p><ul><li>就是把横轴的刻度间隔设为1/N，纵轴的刻度间隔设为1/P，N和P分别为负样本与正样本数量。</li><li>然后再根据模型的输出结果【概率降序】排列，</li><li>依次遍历样本，从0开始绘制ROC曲线，每遇到一个正样本就沿纵轴方向绘制一个刻度间隔的曲线，</li><li>每遇到一个负样本就沿横轴方向绘制一个刻度间隔的曲线，遍历完所有样本点以后，曲线也就绘制完成了。</li><li>究其根本，其最大的好处便是不需要再去指定阈值寻求关键点了，每一个样本的输出概率都算是一个阈值了。当然，无论是工业界还是学术界的实现，都不可能手动去绘制，下面就来讲一下如何用Python高效绘制ROC曲线。</li></ul><h1><span id="ks-zhi-biao"> KS指标</span><a href="#ks-zhi-biao" class="header-anchor">#</a></h1><h2><span id="ks-zhi-ding-yi"> KS值定义</span><a href="#ks-zhi-ding-yi" class="header-anchor">#</a></h2><h2><span id="mo-xing-de-ks-zhi"> 模型的KS值</span><a href="#mo-xing-de-ks-zhi" class="header-anchor">#</a></h2><ul><li>最理想的模型，是TPR尽量高而FPR尽量低（<strong>召回尽可能多的坏人，漏掉尽可能少的好人</strong>），然而任何模型在提高正确预测概率的同时，也会难以避免地增加误判率。</li><li>我们训练出来的模型，一般不是直接给出是正类还是负类的结果，给的是<strong>为正类的概率</strong>，我们还需要<strong>选择一个阈值</strong>，实例通过模型得到的概率<strong>大于阈值，判断为正类，小于阈值判断为负类。<strong>也就是说</strong>阈值的不同，以上的各个指标的值也是不同的。每一个阈值对应一对TPR和FPR</strong>。把<strong>阈值看成自变量，以上TPR、和FPR看成因变量</strong>，在二维坐标系里面做<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>F</mi><mi>P</mi><mi>T</mi><mo>−</mo><mi>F</mi><mi>P</mi><mi>R</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|FPT-FPR|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit" style="margin-right:0.13889em;">T</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.13889em;">F</span><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mord mathrm">∣</span></span></span></span>关系曲线，这<strong>就是KS曲线。</strong></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200522165407594.png" alt="image-20200522165407594"></p><ul><li>KS曲线实操的时候是可以把将概率的<strong>阈值</strong>从小到大进行排序，取10%的值为间隔，</li><li>同理将10%*k(k=1,…9)处值作为阈值，计算不同的FPR和TPR，</li><li>以10%*k（k=1,…9）为横坐标，同时分别以TPR和FPR为纵坐标画出两条曲线就是KS曲线。</li><li>KS值是KS曲线的最大值，也就是TPR和FPR差异的最大点</li></ul>KS值=max(|TPR-FPR|)<ul><li>KS值是在模型中用于区分预测正负样本分隔程度的评价指标。</li><li>需要<strong>计算每一箱的KS，然后max是在所有分箱的KS上取最大值</strong></li><li>一般来说，KS大比较好。但是也不是越大越好，尤其征信行业</li><li>业内认为AUC更能体现模型的【整体的】区分能力，但是KS关注的是区分能力的最大值。<ul><li>我们做的是拒绝模型，关注的是<strong>最大值的点取在哪里的</strong>。<strong>会做一个截断，小于这个值的都拒绝了。关注在最大值之前误杀了多少人。</strong>（相比于AUC注重局部而不是全局）</li></ul></li></ul><h2><span id="ks-kolmogorov-smirnov-ji-suan-bu-zou"> KS(Kolmogorov-Smirnov)计算步骤：</span><a href="#ks-kolmogorov-smirnov-ji-suan-bu-zou" class="header-anchor">#</a></h2><ul><li><p>KS用于模型风险区分能力进行评估，指标衡量的是好坏样本累计分部之间的差值。</p></li><li><p>好坏样本累计差异越大，KS指标越大，那么模型的风险区分能力越强。</p></li><li><p>KS的计算步骤如下：</p><ul><li><ol><li>计算每个评分区间的好坏账户数。</li></ol></li><li><ol start="2"><li>计算每个评分区间的累计好账户数占总好账户数比率(good%)和累计坏账户数占总坏账户数比率(bad%)。</li></ol></li><li><ol start="3"><li>计算每个评分区间累计坏账户占比与累计好账户占比差的绝对值（累计good%-累计bad%），然后对这些绝对值取最大值即得此评分卡的K-S值。</li></ol></li></ul></li><li><p>KS值：是和<strong>AUC强相关的，但是样本很小的时候KS大，AUC不一定大。</strong></p><ul><li><p>A卡的KS：</p><ul><li>714那种最差的一般也至少要25%，</li><li>正常的p2p公司，客户质量稍微好一点会到30%-40%左右。</li><li>最好那些有场景的分期产品最多也就不到50%，所以一般是在25%-50%之间。</li></ul></li><li><p>B卡的KS：</p><ul><li>至少也有40%，最高80% 一般60%左右。</li></ul></li><li><p>各个数据集如<strong>dev和oft的KS差值不要太大，否则模型不稳定，跨时间稳定性差。</strong></p></li><li><p>一般dev和oft的KS差值只能在5%以内，比较求稳的公司要求在3%以内。</p></li></ul></li><li><p>正负样本：</p><ul><li>逾期样本/正常样本=1%-5%（也有能做到1/1000的） 5%个点就是比较高的了，是很不均衡的。</li><li>要是坏账5%，会亏很多钱。badrte  3%以下才可能赚钱。</li><li>欺诈样本/正常样本=1/10w 欺诈用户是极少的</li></ul></li></ul><blockquote><p><a href="https://www.zhihu.com/question/37405102/answer/106668941" target="_blank" rel="noopener">https://www.zhihu.com/question/37405102/answer/106668941</a></p></blockquote><h2><span id="ks-he-roc-de-qu-bie"> KS和ROC的区别</span><a href="#ks-he-roc-de-qu-bie" class="header-anchor">#</a></h2><p>KS值对模型的评价不受样本不均衡问题的干扰，但仅限于模型评价。</p><h3><span id="mo-xing-ping-jie-shi"> 模型评价时:</span><a href="#mo-xing-ping-jie-shi" class="header-anchor">#</a></h3><h4><span id="roc-qu-xian"> ROC曲线</span><a href="#roc-qu-xian" class="header-anchor">#</a></h4><p>描绘的是不同的截断点（判断好人坏人的阈值）时，以FPR和TPR为横纵坐标轴，描述<strong>随着截断点的变化，TPR随着FPR的变化。</strong><br>纵轴：TPR=正例分对的概率 = TP/(TP+FN)，其实就是查全率<br>横轴：FPR=负例分错的概率 = FP/(FP+TN)</p><p>作图步骤：</p><p>根据学习器的预测结果（注意，是正例的概率值，非0/1变量）对样本进行排序（从大到小）-----这就是截断点依次选取的顺序<br>按顺序选取截断点，并计算TPR和FPR—也可以只选取n个截断点，分别在1/n，2/n，3/n等位置<br>连接所有的点（TPR，FPR）即为ROC图</p><h4><span id="ks-zhi"> KS值</span><a href="#ks-zhi" class="header-anchor">#</a></h4><p>作图步骤：</p><p>根据学习器的预测结果（注意，是正例的概率值，非0/1变量）对样本进行排序（从大到小）-----这就是截断点依次选取的顺序<br>按顺序选取截断点，并计算TPR和FPR —也可以只选取n个截断点，分别在1/n，2/n，3/n等位置<br>横轴为样本的占比百分比（最大100%），纵轴分别为TPR和FPR，计算|TPR-FPR|的ks值，可以得到KS曲线<br>TPR和FPR曲线分隔最开的位置就是最好的“截断点”，最大间隔距离就是KS值，通常&gt;0.2即可认为模型有比较好的预测准确性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模型预测会返回概率，两列，第一列是0的概率，第二列是1的概率</span></span><br><span class="line">proba = lr_model.predict_proba(x)</span><br><span class="line">proba</span><br><span class="line"></span><br><span class="line"><span class="comment"># train_thresholds 是阈值，每一个阈值对应roc曲线上的一点</span></span><br><span class="line">train_fpr,train_tpr,train_thresholds = roc_curve(y,proba[:,<span class="number">1</span>])</span><br><span class="line">train_ks_arr = abs(train_fpr-train_tpr)</span><br><span class="line">train_ks = train_ks_arr.max()</span><br><span class="line">print(<span class="string">'train KS:'</span>,train_ks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证集的ks</span></span><br><span class="line">oft_fpr, oft_tpr,oft_thresholds = roc_curve(oft_y, lr_model.predict_proba(oft_x)[:,<span class="number">1</span>])</span><br><span class="line">oft_ks_arr = abs(oft_fpr - oft_tpr)</span><br><span class="line">oft_ks = oft_ks_arr.max()</span><br><span class="line">print(<span class="string">'oft KS:'</span>,oft_ks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大值ks对应的下标（画图用）</span></span><br><span class="line">i = train_ks_arr.tolist().index(train_ks)</span><br><span class="line">j = oft_ks_arr.tolist().index(oft_ks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.plot(train_fpr,train_tpr,label=<span class="string">'train roc'</span>)</span><br><span class="line">plt.plot(train_fpr,abs(train_fpr-train_tpr),label=<span class="string">'train ks'</span>)</span><br><span class="line">plt.scatter(train_fpr[i],abs(train_fpr-train_tpr)[i])</span><br><span class="line"></span><br><span class="line">plt.plot(oft_fpr, oft_tpr,label=<span class="string">'out of time roc'</span>)</span><br><span class="line">plt.plot(oft_fpr, abs(oft_fpr-oft_tpr),label=<span class="string">'out of time ks'</span>)</span><br><span class="line">plt.scatter(oft_fpr[j],abs(oft_fpr-oft_tpr)[j])</span><br><span class="line"></span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>],<span class="string">'p-.'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'FPR'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'TPR'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">plt.title(<span class="string">'ROC Curve'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200522172344375.png" alt="image-20200522172344375"></p><h1><span id="psi-qun-ti-wen-ding-xing-zhi-biao"> PSI群体稳定性指标</span><a href="#psi-qun-ti-wen-ding-xing-zhi-biao" class="header-anchor">#</a></h1><h2><span id="psi-population-stability-index-de-ding-yi"> PSI(Population Stability Index)的定义</span><a href="#psi-population-stability-index-de-ding-yi" class="header-anchor">#</a></h2><p>群体稳定性指标PSI(Population Stability Index)是衡量模型的预测值与实际值偏差大小的指标。</p><ul><li>PSI用于<strong>评估模型在训练集和时间外样本集上的稳定性</strong>指标。</li><li>给予的假设是：<strong>如果模型是稳定和有效的，那么在几个数据集上人群的分布也应该是稳定的</strong></li><li>风控行业常用<strong>PSI指标衡量模型或者特征的稳定性，同时也是一种模型效果监控的指标。</strong></li></ul>PSI = sum[（实际占比-预期占比）* ln（实际占比/预期占比）]<h2><span id="ji-suan-ju-li"> 计算举例：</span><a href="#ji-suan-ju-li" class="header-anchor">#</a></h2><ul><li><p>比如训练一个logistic回归模型，预测时候会有个概率输出p。</p></li><li><p>以dev为基准，dev上的输出设定为p1，将这个概率值<strong>从小到大排序后10等分</strong>（实际中等频分箱优于等距分箱）。</p></li><li><p>现在用这个模型去对新的样本（val或oft）进行预测，预测结果叫p2，按p1的区间也划分为10等分。</p></li><li><p>实际占比就是<strong>p2上在各区间的用户占比</strong>，预期占比就是p1上各区间的用户占比。【<strong>如果模型是有效的，那么根据p1的区间划分出来的人群占总比和p2划分出来的各个区间的人群占总比应该是大体一致的</strong>】</p></li><li><p>意义就是如果模型跟稳定，那么p1和p2上各区间的用户应该是相近的，占比不会变动很大，也就是预测出来的概率不会差距很大。</p></li><li><p><strong>仔细想想，PSI就像是两个分布直方图，求了差值后再求和！越小说明模型在不同数据集上预测结果趋于一致，越稳定！</strong></p></li></ul><p><strong>一般认为PSI小于0.1时候模型稳定性很高，一般认为0.2以下还ok。0.1-0.25一般，大于0.25模型稳定性差，建议重做。</strong><br><strong>分箱每一箱的样本要大致相同，否则若某一箱太少，造成PSI计算时里面的占比会波动，带来不准确</strong></p><ul><li>PS：除了按概率值大小等距十等分外，还可以对概率排序后按数量十等分，两种方法计算得到的psi可能有所区别但数值相差不大。</li></ul><p>应用：</p><ul><li><strong>样本外测试</strong>：<ul><li>针对不同的样本测试一下模型稳定度，比如训练集与测试集，也能看出模型的训练情况，我理解是看出模型的方差情况。</li></ul></li><li><strong>时间外测试</strong>：<ul><li>测试基准日与建模基准日相隔越远，测试样本的风险特征和建模样本的差异可能就越大，因此PSI值通常较高。至此也可以看出模型建的时间太长了，是不是需要重新用新样本建模了。</li></ul></li><li><strong>模型监控</strong>：<ul><li>模型部署上线后，模型的拒绝率越高，线上的KS越低，也就无法体现模型的真实效果，所以常用PSI值监控线上模型与线下模型的差异，从侧面展示模型真实效果与预期效果的偏差。</li></ul></li><li><strong>特征评估</strong>：<ul><li>将PSI上面第一步的十等分逻辑换成特征取值的分布，对特征进行分箱</li><li>在val、oft，或者跨时间段计算PSI</li><li>可以评估这个特征随着时间的推移，他的分布是否稳定，考虑是否能将特征代入模型。</li></ul></li></ul><p>如下图：</p><ul><li>先把左边的概率或者score十等分，然后在actual（基准数据集，如dev）上面将样本进行划分</li><li>对上面dev上各个箱内样本计算<strong>各个分箱内的用户站占体用户的比值</strong>得到Actual列</li><li>同样的上面分箱阈值对Expected数据集进行划分，得到其上各个箱内样本数，计算出各个箱内占总比Expected列</li><li>两列相减，乘以 相除的对数值得到index列</li><li>sum所有10箱即可得到总体模型的PSI</li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525193701620.png" alt="image-20200525193701620"></p><blockquote><p><a href="https://www.cnblogs.com/webRobot/p/9133507.html" target="_blank" rel="noopener">https://www.cnblogs.com/webRobot/p/9133507.html</a></p></blockquote><h2><span id="toad-di-ceng-de-psi-shi-xian"> toad底层的PSI实现</span><a href="#toad-di-ceng-de-psi-shi-xian" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test 和base 分别是模型在两个数据集上的概率预测输出</span></span><br><span class="line">toad.metrics.PSI(test, base)</span><br><span class="line"><span class="comment"># 底层实现是先求test 和base  概率值的value_counts，normalize使得返回的数值被归一化。counts成了一个权重</span></span><br><span class="line"><span class="comment"># 这里的test_prop是一个series，index是之前test的概率，value是归一化后的counts</span></span><br><span class="line">test_prop = pd.Series(test).value_counts(normalize = <span class="literal">True</span>, dropna = <span class="literal">False</span>)</span><br><span class="line">base_prop = pd.Series(base).value_counts(normalize = <span class="literal">True</span>, dropna = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后两个series相减，只会index相同的相减，也就是概率相同的相减，别的都是Nan</span></span><br><span class="line"><span class="comment"># 相除也一样</span></span><br><span class="line"><span class="comment"># 得到一个极其稀疏的series，绝大部分都是nan（因为概率相同的很少）</span></span><br><span class="line"><span class="comment"># 最后相乘的时候只会乘这些在test和base上概率相同的部分</span></span><br><span class="line"><span class="comment"># 再求和</span></span><br><span class="line">psi = np.sum((test_prop - base_prop) * np.log(test_prop / base_prop))</span><br></pre></td></tr></table></figure><h1><span id="gini-zhi-shu"> Gini指数</span><a href="#gini-zhi-shu" class="header-anchor">#</a></h1><p>·GINI系数:也是用于模型风险区分能力进行评估。(使用较少)</p><ul><li>GINI统计值衡量坏账户数在好账户数上的的累积分布与随机分布曲线之间的面积，好账户与坏账户分布之间的差异越大，GINI指标越高，表明模型的风险区分能力越强。</li><li>GINI系数的计算步骤如下：<ul><li><ol><li>计算每个评分区间的好坏账户数。</li></ol></li><li><ol><li>计算每个评分区间的累计好账户数占总好账户数比率（累计good%）和累计坏账户数占总坏账户数比率(累计bad%)。</li></ol></li><li><ol><li>按照累计好账户占比和累计坏账户占比得出下图所示曲线ADC。</li></ol></li><li><ol><li>计算出图中阴影部分面积，阴影面积占直角三角形ABC面积的百分比，即为GINI系数。</li></ol></li></ul></li></ul><blockquote><p><a href="https://www.zhihu.com/question/37405102/answer/106668941" target="_blank" rel="noopener">https://www.zhihu.com/question/37405102/answer/106668941</a></p></blockquote><h1><span id="bu-huo-lu-capture-rate"> 捕获率capture rate</span><a href="#bu-huo-lu-capture-rate" class="header-anchor">#</a></h1><p><strong>我们是低分拒绝模型，希望低分段内坏人尽量多，好人尽量少误伤！</strong></p><p>计算步骤：</p><ul><li>（1）将用户分数降序排列</li><li>（2）对排序后的用户进行等频分箱</li><li>（3）计算【累计到每一箱的累计负样本数】 <strong>占</strong> 【所有负样本】的比值。（cumsum/sum）</li></ul><p>用于衡量在低分区间捕捉坏客户的能力，希望模型能尽可能的在更靠前的箱内，捕捉出更多比例的坏人</p><table><thead><tr><th>分段</th><th>2018/12/31</th></tr></thead><tbody><tr><td>capture 5%</td><td>13.5%</td></tr><tr><td>capture 10%</td><td>24.2%</td></tr><tr><td>capture 20%</td><td>48.8%</td></tr></tbody></table><p>一些表现比较好的B卡，前20%用户中可以捕获到7 80%的坏人。</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200525195244038.png" alt="image-20200525195244038"></p><h2><span id="jian-shao-guo-ni-he-fang-fa"> 减少过拟合方法：</span><a href="#jian-shao-guo-ni-he-fang-fa" class="header-anchor">#</a></h2><ul><li>更多的数据</li><li>对变量做筛选（模型更简单）</li><li>分箱。因为分箱的时候，减少了过拟合（变量变得更稳定，降低噪音）</li></ul><blockquote><p><a href="https://www.jianshu.com/p/c61ae11cc5f6" target="_blank" rel="noopener">https://www.jianshu.com/p/c61ae11cc5f6</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#gai-shu&quot;&gt;概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#roc-qu-xian&quot;&gt;ROC曲线&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="risk" scheme="https://blog.sofunnyai.com/categories/risk/"/>
    
    
      <category term="评分卡" scheme="https://blog.sofunnyai.com/tags/%E8%AF%84%E5%88%86%E5%8D%A1/"/>
    
      <category term="特征工程" scheme="https://blog.sofunnyai.com/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>给hexo的博文添加图床、博文加密</title>
    <link href="https://blog.sofunnyai.com/article/hexo-blog-img-password.html"/>
    <id>https://blog.sofunnyai.com/article/hexo-blog-img-password.html</id>
    <published>2018-01-07T07:59:42.000Z</published>
    <updated>2020-05-23T08:22:38.607Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#guan-yu-bo-ke-de-tu-pian">关于博客的图片</a></li><li><a href="#guan-yu-bo-wen-jia-mi">关于博文加密</a></li></ul><!-- tocstop --></div><!--下面是latex渲染框架katex样式所需的css，不使用latex的话可以删掉--><link href="https://cdn.bootcss.com/KaTeX/0.7.1/katex.min.css" rel="stylesheet"><h1><span id="guan-yu-bo-ke-de-tu-pian"> 关于博客的图片</span><a href="#guan-yu-bo-ke-de-tu-pian" class="header-anchor">#</a></h1><ul><li><p>1.少量图片可以丢到根文件的<code>source/images</code>文件夹下，算是可以解决。</p></li><li><p>2.多一点的图片可以丢到当前文件的同目录同名文件夹下。在<code>_config.yml</code>打开这个注释<code>post_asset_folder: true</code>  就会在<code>hero new xxx</code>的时候自动创建xxx目录放静态资源。（但是费劲，url变化后有问题）</p><ul><li><p>hexo新版不支持<code>![img](image_url)</code>的正确渲染了，无法保证路径可以渲染成功。官方推荐用他的标签:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure></li><li><p>更多见  <a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/asset-folders.html</a></p></li><li><p>但是这种方式不是标准markdown语法，无法在我们的markdown编辑器里面正确显示，真是太low了！</p></li></ul></li><li><p>3.所以我建议使用图床神器：ipic、和<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">picgo</a>  戳这里：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a></p><ul><li>大体原理就是可以一键自动上传图片到github或者gitee图床，妈妈再也不用担心我们的图片了。下面是picgo和typora编辑器配合的配置，爽到爆：</li><li><img src="https://gitee.com/radio/pics/raw/master/img/image-20200520161924055.png" alt="image-20200520161924055"></li></ul></li></ul><h1><span id="guan-yu-bo-wen-jia-mi"> 关于博文加密</span><a href="#guan-yu-bo-wen-jia-mi" class="header-anchor">#</a></h1><p>个别私有博文不方便暴露，需要给博文添加密码，因为我们没有动态服务器去存储密码，只能是在渲染的时候加密，浏览的时候前台js解密。</p><p>经过搜寻找到一个工具叫做<code>hexo-blog-encrypt</code>，在<a href="https://github.com/MikeCoder/hexo-blog-encrypt" target="_blank" rel="noopener">Github这里</a>。它会使用对称加密把博文的内容真正加密成密文，只有用户输入密码正确后才会解密成功。</p><p>中文介绍在<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">这里</a>，使用起来也很简单，在hexo的主目录安装加密插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>安装完插件后，在hexo的主目录配置一下这个插件<code>_config.yml</code>，添加加密的安全配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">本文为加密的内容,</span> <span class="string">请输入密码后查看。</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">Password</span> <span class="string">Here：</span></span><br><span class="line">  <span class="attr">template:</span> <span class="string">&lt;div</span> <span class="string">id="hexo-blog-encrypt"</span> <span class="string">data-wpm="&#123;&#123;hbeWrongPassMessage&#125;&#125;"</span> <span class="string">data-whm="&#123;&#123;hbeWrongHashMessage&#125;&#125;"&gt;&lt;div</span> <span class="string">class="hbe-input-container"&gt;&lt;input</span> <span class="string">type="password"</span> <span class="string">id="hbePass"</span> <span class="string">placeholder="&#123;&#123;hbeMessage&#125;&#125;"</span> <span class="string">/&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div</span> <span class="string">class="bottom-line"&gt;&lt;/div&gt;&lt;/div&gt;&lt;script</span> <span class="string">id="hbeData"</span> <span class="string">type="hbeData"</span> <span class="string">data-hmacdigest="&#123;&#123;hbeHmacDigest&#125;&#125;"&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">wrong</span> <span class="string">password,</span> <span class="string">try</span> <span class="string">again!</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br></pre></td></tr></table></figure><p>然后编辑一下博文的模板文件，把密码字段加到头上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim scaffolds/post.md</span><br></pre></td></tr></table></figure><p>就像下面这样，password框里如果是空的就不会加密，否则就会加密：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>tag1</span><br><span class="line"><span class="bullet">- </span>tag2</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">- </span>xx</span><br><span class="line">urlname: 修改我xxxx.html</span><br><span class="line">password:</span><br><span class="line">---</span><br><span class="line"><span class="xml"><span class="comment">&lt;!--此处生成目录--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- toc --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--下面是latex渲染框架katex样式所需的css，不使用latex的话可以删掉--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/KaTeX/0.7.1/katex.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这样在列表的时候摘要会显示上面的<code>abstract</code>中的内容，输入框提示<code>message</code>消息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#guan-yu-bo-ke-de-tu-pian&quot;&gt;关于博客的图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#guan-yu-bo-wen-jia-
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.sofunnyai.com/categories/hexo/"/>
    
    
      <category term="闲杂" scheme="https://blog.sofunnyai.com/tags/%E9%97%B2%E6%9D%82/"/>
    
      <category term="hexo" scheme="https://blog.sofunnyai.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github+自定义域名+CDN搭建博客系统（附namesilo优惠码）</title>
    <link href="https://blog.sofunnyai.com/article/build-a-blog-base-on-hexo-github.html"/>
    <id>https://blog.sofunnyai.com/article/build-a-blog-base-on-hexo-github.html</id>
    <published>2018-01-06T05:05:26.000Z</published>
    <updated>2020-05-23T08:26:59.245Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#why">Why</a></li><li><a href="#what">What</a></li><li><a href="#how">How</a></li><li><a href="#details">Details</a><ul><li><a href="#an-zhuang-hexo">安装Hexo</a><ul><li><a href="#xuan-ze-zhu-ti">选择主题</a></li></ul></li><li><a href="#gayhub-tuo-guan">gayhub托管</a></li><li><a href="#zi-ding-yi-yu-ming-ke-xuan">自定义域名[可选]</a></li></ul></li><li><a href="#others">Others</a><ul><li><a href="#sheng-cheng-mu-lu">生成目录</a><ul><li><a href="#ping-lun-guan-li">评论管理</a></li><li><a href="#guan-yu-latex-gong-shi-xian-shi">关于latex公式显示</a></li><li><a href="#zai-blog-gen-mu-lu-gei-hexo-an-zhuang-hexo-renderer-markdown-it-plus-cha-jian">在blog根目录给hexo安装hexo-renderer-markdown-it-plus插件</a></li><li><a href="#cdn-jia-su-ke-xuan">CDN加速[可选]</a></li></ul></li></ul></li><li><a href="#faq">FAQ</a></li></ul><!-- tocstop --></div><h1><span id="why"> Why</span><a href="#why" class="header-anchor">#</a></h1><p>之前分别在csdn和cnblogs写了一些文章，csdn的广告越来越过分实在忍不了。然而cnblogs的markdown编辑器又太弱，一直也没什么更新，所以就再造一个轮子。</p><h1><span id="what"> What</span><a href="#what" class="header-anchor">#</a></h1><ul><li><p>Hexo是个啥，这一套是怎么工作的？</p><ul><li>Hexo是一个基于Nodejs的渲染引擎，可以集成多个主题和插件，实现了内容和样式分离，可以根据喜好快速换装。</li><li>用户可以撰写一个markdown格式的博客文件，使用Hexo渲染为html格式</li><li>然后将html部署到github（或者自有服务器/vps等等）</li><li>使用github的pages服务（或者自有服务器的IP）即可访问我们的博客</li><li>可选：接着可以用我们的自有域名解析到github的pages服务即可（或者我们服务器的IP）</li></ul></li><li><p>搭建好了怎么写博客？</p><ul><li>本地写markdown格式，安利下typora，巨好用。</li><li>写完执行一个命令会自动渲染成html，再执行一个命令会自动部署到github，相当简单。</li></ul></li></ul><h1><span id="how"> How</span><a href="#how" class="header-anchor">#</a></h1><p>把大象关进冰箱需要三步，搭建基于Hexo的博客也需要三步：</p><ul><li>安装Hexo，跑起来</li><li>搞一个Gayhub的repo，<a href="http://xn--page-k84fuim29h.io" target="_blank" rel="noopener">弄一个page.io</a></li><li>搞一个域名，DNS解析即可（如果需要加速，在CDN配置一下）</li></ul><h1><span id="details"> Details</span><a href="#details" class="header-anchor">#</a></h1><h2><span id="an-zhuang-hexo"> 安装Hexo</span><a href="#an-zhuang-hexo" class="header-anchor">#</a></h2><ul><li><p>首选需要安装nodejs，安装cnpm</p><ul><li><p>选择操作系统的发行版:</p><ul><li><blockquote><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p></blockquote></li><li><p>我是linux，下载解压，配置环境变量，source一把即可。</p></li><li><p>windows用户更简单，下载后各种next即可。</p></li><li><p>mac和linux类似</p></li></ul></li><li><p>npm加速，安装cnpm：</p></li><li><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></li></ul></li><li><p>安装Hexo：<code>cnpm install -g hexo</code> 会自动从gayhub下载hexo并安装</p></li><li><p>然后就进入目录去配置<code>_conifg.yml</code>,包括博客title、作者、语言等等</p><p><img src="https://gitee.com/radio/pics/raw/master/img/image-hexo-config.png" alt="image-20200520132503890"></p></li><li><p>运行 <code>hexo s</code>，然后去<code>http://localhost:4000</code>就能看到了。默认样式会有点丑，别着急看下一节。</p></li></ul><h3><span id="xuan-ze-zhu-ti"> 选择主题</span><a href="#xuan-ze-zhu-ti" class="header-anchor">#</a></h3><ul><li>先戳这里，官方有巨多主题： <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></li><li>也可以去gayhub自己搜<code>hexo-theme</code>即可，也有n多</li><li>我一个老年大叔，选择了一个简单一点的主题<code>hexo-theme-pure</code>，这个https://github.com/cofess/hexo-theme-pure  主题的中文说明：<a href="https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md" target="_blank" rel="noopener">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a></li><li>按照主题说明，clone到hexo的theme文件夹内，然后修改一下hexo的<code>_config.yml</code>文件中的主题<code>theme: pure</code></li><li>按照主题说明，安装主题渲染所需的nodejs插件。无非就是几个<code>cnpm install xxxx</code>即可</li><li>按照主题说明，配置主题的配置文件，一般在主题文件夹<code>./hexo/theme/pure</code>下的<code>_config.yml</code>（无非是颜色、元素是否显示、布局之类的），很简单看一眼就知道。</li><li>运行渲染<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>，分别是清理、生成、运行，然后再去<code>http://localhost:4000</code>看一眼，主题就生效了。</li></ul><h2><span id="gayhub-tuo-guan"> gayhub托管</span><a href="#gayhub-tuo-guan" class="header-anchor">#</a></h2><ul><li>我们<code>hexo g</code>渲染生成的静态文件在<code>public</code>文件夹内，需要把它丢到一个web容器内运行就可以了。gayhub提供githubpages服务可以托管静态文件，并可以http浏览。</li><li>所以去github新建一个repo，repo名字为<code>xxxx.github.io</code>,这个<strong>xxxx必须和你的github用户名一致!</strong></li><li>然后回到hexo中配置deploy模式为git，配置仓库地址为上面的repo地址。更多参见https://hexo.io/zh-cn/docs/github-pages</li><li>配置完毕<code>hexo d</code>输入github账号密码即可push到服务器（如果本机没有保存，或者服务器配置秘钥的话，具体github配置公钥上网查找）</li><li>然后可以访问我们的博客了<code>https://</code>xxxx.github.io`</li></ul><h2><span id="zi-ding-yi-yu-ming-ke-xuan"> 自定义域名[可选]</span><a href="#zi-ding-yi-yu-ming-ke-xuan" class="header-anchor">#</a></h2><ul><li>上面虽然博客可以访问了，但是github.io看起来有点low，而且国内访问速度也很慢。</li><li>所以，我建议撸一个域名，挂博客，搞微信开发，内网穿透，扶墙等等用处多多。。。而且最好是境外服务商域名，境内的域名要备案、年检，非常非常麻烦。</li><li>目前最便宜的是戳这个：<a href="https://www.namesilo.com/?rid=85df914mk" target="_blank" rel="noopener">namesilo官网</a>，优势：<ul><li>他家的.com域名只要7.99刀，.xyy和.online域名只要0.99刀，简直白送！关键是续费便宜没有坑，别家有首年很便宜，后面续费巨贵的。</li><li>永久免费的whois隐私保护，其他家这个功能还要收费。</li><li>支持支付宝收款，不用别家还要信用卡或者PayPal</li><li>所以戳链接进去官网： <a href="https://www.namesilo.com/?rid=85df914mk" target="_blank" rel="noopener">www.namesilo.com/</a></li></ul></li><li>进入官网后，右上角注册sign up，输入用户名，邮箱，密码即可。</li><li>然后register，选择域名进行注册，第一次会让你填写信息（以免域名丢失找回，或者服务商后续通知一些域名相关事项）</li><li><a href="https://www.namesilo.com/?rid=85df914mk" target="_blank" rel="noopener"><img src="https://gitee.com/radio/pics/raw/master/img/image-namesilo-reg.png" alt="image-20200520140905968"></a></li><li>输入你想注册的域名，搜索，看看有没有被注册过：</li></ul><p><a href="https://www.namesilo.com/?rid=85df914mk" target="_blank" rel="noopener"><img src="https://gitee.com/radio/pics/raw/master/img/image-namesilo-reg2.png" alt="image-20200520142246492"></a></p><ul><li><p>假如你选择的没有被占用。点击下面的add加入购物车，然后checkout结算,我这里用.com的8.99刀域名举例（你也可以用下面0.99刀的，简直便宜到几乎白送！）</p><p><a href="https://www.namesilo.com/?rid=85df914mk" target="_blank" rel="noopener"><img src="https://gitee.com/radio/pics/raw/master/img/image-namesilo-reg3.png" alt="imagereg3"></a></p></li><li><p>结算页面，按图上选择即可，然后下面的打折码输入**<code>cutoff</code>** ，点击<code>submit</code>即可享受打折优惠！</p><p><a href="https://www.namesilo.com/?rid=85df914mk" target="_blank" rel="noopener"><img src="https://gitee.com/radio/pics/raw/master/img/image-namesilo-reg4.png" alt="image-20200520143429325"></a></p></li><li><p>下一步就是支付宝扫码付款即可。</p></li><li><p>付完款去account个人中心，点击domain manager域名管理，会出来你的域名列表。点击设置dns</p><p><a href="https://www.namesilo.com/?rid=85df914mk" target="_blank" rel="noopener"><img src="https://gitee.com/radio/pics/raw/master/img/image-namesilo-reg5.png" alt="reg5"></a></p></li><li><p>设置DNS,点击CNAME，会出来一条解析，可以根据喜好设置为www的主域名，还是blog.xxx.com的二级域名。目标设置我们上面个人的<code>xxxxxx.github.io</code>，提交即可。</p><p><a href="https://www.namesilo.com/?rid=85df914mk" target="_blank" rel="noopener"><img src="https://gitee.com/radio/pics/raw/master/img/image-namesilo-reg6.png" alt="img"></a></p></li></ul><p>搞定你以为大功告成了？还需要在github的repo里面设置这个域名，否则github会阻止域名解析，导致404。看下一节</p><ul><li><p>github配置域名：</p><ul><li>在那个<code>custom domain</code>填写你的域名，save一下</li></ul><p><a href="https://www.namesilo.com/?rid=85df914mk" target="_blank" rel="noopener"><img src="https://gitee.com/radio/pics/raw/master/img/image-namesilo-reg7.png" alt="image-20200520145606979"></a></p><ul><li>然后在你本地的<code>hexo/source</code>目录下创建个<code>CNAME</code>文件夹，写上你的域名</li></ul></li><li><p>最后，重新<code>hexo g &amp; hexo d</code></p></li></ul><p>此时即可用我们的域名访问。</p><h1><span id="others"> Others</span><a href="#others" class="header-anchor">#</a></h1><h2><span id="sheng-cheng-mu-lu"> 生成目录</span><a href="#sheng-cheng-mu-lu" class="header-anchor">#</a></h2><p>为博客生成toc目录</p><ul><li>使用插件<code>cnpm install hexo-toc --save</code></li><li>然后配置一下最大深度等</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">maxdepth:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">class:</span> <span class="string">toc</span></span><br><span class="line">  <span class="attr">slugify:</span> <span class="string">transliteration</span></span><br><span class="line">  <span class="attr">decodeEntities:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">anchor:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">after</span></span><br><span class="line">    <span class="attr">symbol:</span> <span class="string">'#'</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">header-anchor</span></span><br></pre></td></tr></table></figure><h3><span id="ping-lun-guan-li"> 评论管理</span><a href="#ping-lun-guan-li" class="header-anchor">#</a></h3><p>关于博客的评论，一般来说是需要一个数据库的。但是我们是纯静态服务，所以有人搞了类似<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">gitalk</a>、<a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a> 这样的东西。只用前台引用js即可，一般都不用我们管，主题已经集成好了。只用按照说明进行配置几个参数即可。</p><h3><span id="guan-yu-latex-gong-shi-xian-shi"> 关于latex公式显示</span><a href="#guan-yu-latex-gong-shi-xian-shi" class="header-anchor">#</a></h3><ul><li>latex会显示失败，按照pure主题的解决方案：</li></ul><h4><span id="shu-xue-gong-shi"> 数学公式</span><a href="#shu-xue-gong-shi" class="header-anchor">#</a></h4><blockquote><p>Hexo默认使用&quot;hexo-renderer-marked&quot;引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签</p></blockquote><h4><span id="jie-jue-fang-an"> 解决方案</span><a href="#jie-jue-fang-an" class="header-anchor">#</a></h4><p>解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的方法。</p><p>更换Hexo的markdown渲染引擎，<a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus" target="_blank" rel="noopener">hexo-renderer-markdown-it-plus</a>引擎替换默认的渲染引擎<a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="noopener">hexo-renderer-marked</a>即可。</p><h3><span id="zai-blog-gen-mu-lu-gei-hexo-an-zhuang-hexo-renderer-markdown-it-plus-cha-jian"> 在blog根目录给hexo安装hexo-renderer-markdown-it-plus插件</span><a href="#zai-blog-gen-mu-lu-gei-hexo-an-zhuang-hexo-renderer-markdown-it-plus-cha-jian" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm un hexo-renderer-marked --save <span class="comment"># 卸载</span></span><br><span class="line">cnpm i hexo-renderer-markdown-it-plus --save <span class="comment"># 安装新的渲染框架</span></span><br><span class="line">cnpm i markdown-it-katex --save  <span class="comment"># 安装katex渲染latex</span></span><br></pre></td></tr></table></figure><h4><span id="pei-zhi"> 配置</span><a href="#pei-zhi" class="header-anchor">#</a></h4><p>安装插件后，如果未正常渲染LaTeX数学公式，在博客根目录配置文件<code>_config.yml</code>中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">markdown_it_plus:</span><br><span class="line">  highlight: true</span><br><span class="line">  html: true</span><br><span class="line">  xhtmlOut: true</span><br><span class="line">  breaks: true</span><br><span class="line">  langPrefix:</span><br><span class="line">  linkify: true</span><br><span class="line">  typographer:</span><br><span class="line">  quotes: “”‘’</span><br><span class="line">  plugins:</span><br><span class="line">    - plugin:</span><br><span class="line">        name: markdown-it-katex</span><br><span class="line">        enable: true</span><br><span class="line">    - plugin:</span><br><span class="line">        name: markdown-it-mark</span><br><span class="line">        enable: false</span><br></pre></td></tr></table></figure><h4><span id="wen-zhang-qi-yong-mathjax-bu-yong-she-zhi-true-ye-ke-yi"> 文章启用mathjax（不用设置true也可以）</span><a href="#wen-zhang-qi-yong-mathjax-bu-yong-she-zhi-true-ye-ke-yi" class="header-anchor">#</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">mathjax: true</span><br></pre></td></tr></table></figure><p>按照上面操作了还是不行，元素错位。看了下面这个解决了：</p><h4><span id="huan-cuo-wei-huo-zhe-xian-shi-yuan-su-bu-zhun-de-hua-xu-yao-yin-ru-yi-ge-katex-de-css"> 还错位或者显示元素不准的话，需要引入一个katex的css</span><a href="#huan-cuo-wei-huo-zhe-xian-shi-yuan-su-bu-zhun-de-hua-xu-yao-yin-ru-yi-ge-katex-de-css" class="header-anchor">#</a></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/KaTeX/0.7.1/katex.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/u014792304/article/details/78687859" target="_blank" rel="noopener">https://blog.csdn.net/u014792304/article/details/78687859</a></p></blockquote><p>katex和latex大部分命令是相通的，不同的略微差别见下面：</p><blockquote><p><a href="https://khan.github.io/KaTeX/function-support.html" target="_blank" rel="noopener">https://khan.github.io/KaTeX/function-support.html</a></p></blockquote><h3><span id="cdn-jia-su-ke-xuan"> CDN加速[可选]</span><a href="#cdn-jia-su-ke-xuan" class="header-anchor">#</a></h3><ul><li>想继续折腾访问速度的往下看：</li><li>首先，不推荐国内的CDN供应商和域名解析商，因为他们动不动就有合规要求。会折腾客户去备案（不是所有的）</li><li>然后，推荐cloudflare，也很简单，注册一个账号，在namesilo里面把CDN服务迁移到cloudflare即可。上网搜索巨多资料。</li></ul><h1><span id="faq"> FAQ</span><a href="#faq" class="header-anchor">#</a></h1><ul><li><p>为啥配置好了域名无法访问？</p><p>等待域名解析，尝试DNS那里的TTL设置小一点，刷新本地DNS缓存。</p></li><li><p>为啥速度不一般？</p><p>因为是国外DNS，可能第一次访问有点慢。有精力的尝试迁移到cloudflare，还有CDN加速，https，爽歪歪。戳这里：<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">https://www.cloudflare.com/</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#why&quot;&gt;Why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#what&quot;&gt;What&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#how&quot;&gt;How&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://blog.sofunnyai.com/categories/hexo/"/>
    
    
      <category term="闲杂" scheme="https://blog.sofunnyai.com/tags/%E9%97%B2%E6%9D%82/"/>
    
      <category term="hexo" scheme="https://blog.sofunnyai.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Java Hashmap底层源码剖析</title>
    <link href="https://blog.sofunnyai.com/article/java-hashmap.html"/>
    <id>https://blog.sofunnyai.com/article/java-hashmap.html</id>
    <published>2017-03-19T05:09:19.000Z</published>
    <updated>2020-05-30T16:21:43.450Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#hash-shu-ju-jie-gou-ji-chu">Hash数据结构基础</a><ul><li><a href="#ha-xi-biao">哈希表：</a><ul><li><a href="#ha-xi-biao-de-que-dian">哈希表的缺点：</a></li><li><a href="#hash-peng-zhuang-jie-jue-kai-fang-di-zhi-lian-di-zhi">Hash碰撞解决？—开放地址/链地址</a></li><li><a href="#hao-de-ha-xi-han-shu">好的哈希函数:</a></li></ul></li></ul></li></ul><!-- tocstop --></div><link href="https://cdn.bootcss.com/KaTeX/0.7.1/katex.min.css" rel="stylesheet"><h1><span id="hash-shu-ju-jie-gou-ji-chu"> Hash数据结构基础</span><a href="#hash-shu-ju-jie-gou-ji-chu" class="header-anchor">#</a></h1><h2><span id="ha-xi-biao"> 哈希表：</span><a href="#ha-xi-biao" class="header-anchor">#</a></h2><ul><li>一个基于数组的K-V存储结构，K经过hash函数后散列到数组的某个位置，去拿到所需的K-V对。适用于可预测数据量且不需要遍历的场合。</li></ul><ul><li>哈希表的效率：插入和删除需要O(1)的时间。(既能够具备<strong>数组的快速查询的优点</strong>又能融合<strong>链表方便快捷的增加删除</strong>元素的优势)</li></ul><h3><span id="ha-xi-biao-de-que-dian"> 哈希表的缺点：</span><a href="#ha-xi-biao-de-que-dian" class="header-anchor">#</a></h3><ol><li><p>基于数组，由于数组是定长的，长度塞满时效率很低（碰撞太多）。</p><ul><li><pre><code> 所以程序需要在合适的时候（如loadFactor大于2/3）把数据移动到更大的哈希表中，这个操作非常费时（因为地址是和数组长度有关的，移动时所有的元素将会逐一重新算hash地址）。</code></pre></li></ul></li><li><p>没有一种机制可以有序遍历(如从小到大)哈希表中的数据，如果需要则只能借助使用其他的数据结构。</p></li></ol><h3><span id="hash-peng-zhuang-jie-jue-kai-fang-di-zhi-lian-di-zhi"> Hash碰撞解决？—开放地址/链地址</span><a href="#hash-peng-zhuang-jie-jue-kai-fang-di-zhi-lian-di-zhi" class="header-anchor">#</a></h3><p>多个对象通过hash算法后的的地址相同，就产生了“哈希碰撞”。解决哈希碰撞的方法一般有两种：</p><ol><li>开放地址法：即在数组中向后找一个合适的空位存储新的碰撞的对象。<ol><li>线性探测：若碰撞，则从第一次hash的地址开始逐一向后找，找到空位则存储新的对象。（这种算法会在数组的某一段聚集大量的值，会增大碰撞的概率。聚集会降低hash表的效率）</li><li>二次探测：若碰撞，则从第一次hash的地址开始继续向后找，但每次找的步长为 1、4、9、16、25…以平方数递增。（比上一种略好，但因为碰撞元素探测的补偿相同，故会造成更细小的碰撞，在数组上聚集很多小段连续元素）</li><li>再hash方法：通过另一个hash算法算出第二次的步长。这个步长为一个与hash地址有关的值。如：stepSize = constant - （key % constant） key为第一次hash后碰撞的地址，这个常量要求是小于数组长度的质素。（数组长度也是质数）</li></ol></li><li>链地址法：即在发生碰撞的位置存储一个链表。</li></ol><h3><span id="hao-de-ha-xi-han-shu"> 好的哈希函数:</span><a href="#hao-de-ha-xi-han-shu" class="header-anchor">#</a></h3><ol><li><p>可以快速的计算,有许多乘法/除法会比较慢不合适,除了取模之外可以考虑<strong>位运算</strong>,左移N位相当于除以2的N次方</p></li><li><p>结果要随机,哈希函数为了避免哈希碰撞,需要把key映射到数组的下标,越随机越好</p></li><li><p>使用质数取模,也就是数组长度要是质数,否则会有很大的聚集效应!</p></li><li><p>字符串hash的时候可以把每一位按照ascii码乘以27的N次方,再相加. 如china的c计算: (charAt(0)-97)*27^4 子母h:(charAt(1)-97)*27^3 …</p></li><li><p>如果最后数字太大可以使用[同余定理]拆分:</p><p>(A×B + C×D + E×F +...)%P == ((A×B)%P + (C×D)%P +...)%P</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sam.phoenix.datastructure.e_HashTable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  本例子采用线性线性探测法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sam</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashTableLine</span> </span>&#123;</span><br><span class="line"><span class="comment">//最大可以存放数据的总数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxDataSize = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//数组长度是arraySize除以loadFactor,除完的结果最好是一个质数,否则会有比较大的聚集效应</span></span><br><span class="line"><span class="keyword">private</span> Node[]hashArray;</span><br><span class="line"><span class="comment">//已经使用的长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除标记</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Node DELETEED_NODE = <span class="keyword">new</span> Node(Integer.MIN_VALUE,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法，构造数组，初始化数组长度</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 这里初始化一个比最大长度更长的数组,解决哈希碰撞开放地址后效率下降的问题,用空间换取时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size 最大存储的数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loadFactor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashTableLine</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">float</span> loadFactor)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(loadFactor &lt;= <span class="number">0</span> || loadFactor&gt;<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"装载因子必须大于0,小于1,因为输入非法,默认取0.5!!!!"</span>);</span><br><span class="line">loadFactor = <span class="number">0.5f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = <span class="keyword">new</span> BigDecimal(size).divide(<span class="keyword">new</span> BigDecimal(loadFactor),<span class="number">0</span>,BigDecimal.ROUND_HALF_EVEN).intValueExact();</span><br><span class="line">hashArray = <span class="keyword">new</span> Node[len];</span><br><span class="line">maxDataSize = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 哈希算法，根据key的大小，算出在数组中的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hashFunction</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> key % hashArray.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向hash表插入key-value数据,采用线性探测,如果插入的位置已经有值,自动往后面寻找一个空的位置存储</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> key, Object value)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(length == maxDataSize)&#123;</span><br><span class="line">System.out.println(<span class="string">"已经满了,无法插入!!!!!!"</span>);</span><br><span class="line"><span class="comment">//再插入就超过装载因子,碰撞太多,性能急剧下降</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = hashFunction(key);</span><br><span class="line"><span class="comment">//该位置恰好空余,可以插入.发生哈希碰撞,采用线性探测往后找,</span></span><br><span class="line"><span class="keyword">while</span>(index &lt; hashArray.length)&#123;</span><br><span class="line"><span class="keyword">if</span>(hashArray[index] == <span class="keyword">null</span> || hashArray[index] == DELETEED_NODE)&#123;</span><br><span class="line"><span class="comment">//插</span></span><br><span class="line">hashArray[index] = <span class="keyword">new</span> Node(key,value);</span><br><span class="line"><span class="comment">//记录长度</span></span><br><span class="line">length++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此处使用线性探测: 每次+1,线性往后探测空余位置</span></span><br><span class="line"><span class="comment">//[二次探测:不使用index++,而是使用每次往后1,4,9...平方探测,将连续的大区域碰撞转化为分散的碎片碰撞导致二次聚集(因为步长是确定的)]</span></span><br><span class="line"><span class="comment">//[再hash: 将当前的index再次使用一个不同的hash算法计算后往后找,直到找到目标或者发现null,可以消除原始聚集和二次聚集(步长是不确定的)]</span></span><br><span class="line">index++;</span><br><span class="line"><span class="comment">//找到了数组最后面,任然没有空余位置</span></span><br><span class="line"><span class="keyword">if</span>(index == hashArray.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//返回数组最前面继续找</span></span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">find</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = hashFunction(key);</span><br><span class="line"><span class="comment">//往后找</span></span><br><span class="line"><span class="keyword">while</span>(index &lt; hashArray.length)&#123;</span><br><span class="line"><span class="comment">//找到一个空节点还没有,说明没有该条记录</span></span><br><span class="line"><span class="keyword">if</span>(hashArray[index] == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该节点有数据,判断是不是目标节点,不是的话可能是碰撞过的,往后找</span></span><br><span class="line"><span class="keyword">if</span>(hashArray[index].getKey() == key)&#123;</span><br><span class="line"><span class="keyword">return</span> hashArray[index].getValue();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(index == hashArray.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//找到最后还没有,从队首开始找</span></span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//所有节点都非空,找了还没有</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从hash表删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="comment">//不能硬删除!!!!! 否则之前因为哈希碰撞线性探测存储的数据就找不到了!!!!!!!</span></span><br><span class="line"><span class="keyword">int</span> index = hashFunction(key);</span><br><span class="line"><span class="keyword">if</span>(hashArray[index]==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//往后找,找到这个元素就软删除,下次查询到这里直接跳过往后找...</span></span><br><span class="line"><span class="keyword">while</span>(index &lt; hashArray.length)&#123;</span><br><span class="line"><span class="comment">//找到一个空节点还没有,说明没有该条记录</span></span><br><span class="line"><span class="keyword">if</span>(hashArray[index] == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该节点有数据,判断是不是目标节点,不是的话可能是碰撞过的,往后继续找</span></span><br><span class="line"><span class="keyword">if</span>(hashArray[index].getKey() == key)&#123;</span><br><span class="line"><span class="comment">//找到了，软删除之</span></span><br><span class="line">hashArray[index] = DELETEED_NODE;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(index == hashArray.length-<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//找到最后还没有,从队首开始找</span></span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印hash表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hashArray.length; i ++)&#123;</span><br><span class="line"><span class="keyword">if</span>(hashArray[i]==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.print(<span class="string">"null,"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(hashArray[i].getKey()+<span class="string">""</span>+hashArray[i].getValue()+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.maxDataSize;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#hash-shu-ju-jie-gou-ji-chu&quot;&gt;Hash数据结构基础&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ha-xi-biao&quot;&gt;哈希
      
    
    </summary>
    
    
      <category term="java" scheme="https://blog.sofunnyai.com/categories/java/"/>
    
    
      <category term="源码" scheme="https://blog.sofunnyai.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="java" scheme="https://blog.sofunnyai.com/tags/java/"/>
    
      <category term="数据结构" scheme="https://blog.sofunnyai.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>设计模式---观察者模式</title>
    <link href="https://blog.sofunnyai.com/article/design-observer.html"/>
    <id>https://blog.sofunnyai.com/article/design-observer.html</id>
    <published>2017-03-03T05:04:09.000Z</published>
    <updated>2020-06-03T05:44:45.535Z</updated>
    
    <content type="html"><![CDATA[<!--此处生成目录--><div class="toc"><!-- toc --><ul><li><a href="#guan-cha-zhe-mo-shi">观察者模式：</a><ul><li><a href="#you-dian">优点：</a></li><li><a href="#shi-ji-ying-yong">实际应用：</a></li></ul></li><li><a href="#shi-xian-ju-li">实现举例</a></li></ul><!-- tocstop --></div><h1><span id="guan-cha-zhe-mo-shi"> 观察者模式：</span><a href="#guan-cha-zhe-mo-shi" class="header-anchor">#</a></h1><ul><li><pre><code>参与者：**事件源**(source)、**观察者**（observer/listener）、**事件**（event，可选，如果不想知道时间信息可以不要）</code></pre></li><li><pre><code>1.将事件源上注册多个观察者</code></pre></li><li><pre><code>2.当某种特定条件发生的时候（source的某个场景），事件源将此时的信息包装到event中，逐个调用观察者</code></pre></li><li><pre><code>3.观察者就知晓了事情的发生，并能做出相应(被调用相应方法)</code></pre></li></ul><p><img src="https://gitee.com/radio/pics/raw/master/img/image-20200603133906006.png" alt="image-20200603133906006"></p><h2><span id="you-dian"> 优点：</span><a href="#you-dian" class="header-anchor">#</a></h2><ul><li>避免观察者需要持续关注事件源（比如不用开一个线程去不断判断他的状态是否改变）</li><li>只需要将事件发生的逻辑提前准备在观察者上，把观察者注册到事件源上</li><li>事件发生的时候就能被自动执行</li></ul><h2><span id="shi-ji-ying-yong"> 实际应用：</span><a href="#shi-ji-ying-yong" class="header-anchor">#</a></h2><ul><li><pre><code>典型的如UI界面的各种event和listener</code></pre></li><li><pre><code>或者AOP，实际上实现是代理，语义上也是一个观察者模式：当方法执行到这里，就触发AOP绑定的拦截器方法。（只是由代理给实现的）</code></pre></li><li><pre><code>或者Hystrix</code></pre></li></ul><h1><span id="shi-xian-ju-li"> 实现举例</span><a href="#shi-xian-ju-li" class="header-anchor">#</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者模式：</span></span><br><span class="line"><span class="comment"> *     - 事件源(source)、观察者（observer/listener）、事件（event，可选，如果不想知道时间信息可以不要）</span></span><br><span class="line"><span class="comment"> *     - 将事件源上注册多个观察者</span></span><br><span class="line"><span class="comment"> *     - 当某种特定条件发生的时候（source的某个场景），事件源将此时的信息包装到event中，逐个调用观察者</span></span><br><span class="line"><span class="comment"> *     - 观察者就知晓了事情的发生，并能做出相应</span></span><br><span class="line"><span class="comment"> *     - 典型的如UI界面的各种event和listener</span></span><br><span class="line"><span class="comment"> *     - 或者AOP，实际上实现是代理，语义上也是一个观察者模式：当方法执行到这里，就触发AOP绑定的拦截器方法。（只是由代理给实现的）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 事件源，一个baby</span></span><br><span class="line">        Child child = <span class="keyword">new</span> Child();</span><br><span class="line">        <span class="comment">// 给他添加一些观察者（类似监听）</span></span><br><span class="line">        child.addObserver(<span class="keyword">new</span> Dad());</span><br><span class="line">        child.addObserver(<span class="keyword">new</span> Mum());</span><br><span class="line">        <span class="comment">// 当发生业务场景，观察者会被触发</span></span><br><span class="line">        child.cry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件类，可有可无。是为了给观察者传递当时的业务信息。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    T source;</span><br><span class="line">    String name;</span><br><span class="line">    String time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有观察者的接口，观察者统一实现这个接口，发生事件的时候统一触发</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;R&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> &lt;<span class="title">R</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">actionOnEvent</span><span class="params">(Event&lt;R&gt;e)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个事件源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span></span>&#123;</span><br><span class="line">    <span class="comment">// 观察这个事件源的对象，注册到这里</span></span><br><span class="line">    List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer each)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.add(each);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 发生特定事件</span></span><br><span class="line">        System.out.println(<span class="string">"Baby cry.........."</span>);</span><br><span class="line">        <span class="comment">// 构造一个事件对象</span></span><br><span class="line">        Event&lt;Child&gt; e = <span class="keyword">new</span> Event&lt;&gt;(<span class="keyword">this</span>,<span class="string">"孩子哭了"</span>, <span class="keyword">new</span> Date().toLocaleString());;</span><br><span class="line">        <span class="comment">// 触发所有的观察者</span></span><br><span class="line">        <span class="keyword">for</span> (Observer each : observers) &#123;</span><br><span class="line">            each.actionOnEvent(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个观察者Dad</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dad</span> <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">Child</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Child <span class="title">actionOnEvent</span><span class="params">(Event&lt;Child&gt; e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Dad feed baby........"</span>);</span><br><span class="line">        <span class="keyword">return</span> e.source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个观察者Mum</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mum</span> <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">Child</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Child <span class="title">actionOnEvent</span><span class="params">(Event&lt;Child&gt; e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mum pat baby........"</span>);</span><br><span class="line">        <span class="keyword">return</span> e.source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!--此处生成目录--&gt;
&lt;div class=&quot;toc&quot;&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#guan-cha-zhe-mo-shi&quot;&gt;观察者模式：&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#you-dian&quot;&gt;优点：&lt;/a&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="DesignPattern" scheme="https://blog.sofunnyai.com/categories/DesignPattern/"/>
    
    
      <category term="DesignPattern" scheme="https://blog.sofunnyai.com/tags/DesignPattern/"/>
    
  </entry>
  
</feed>
